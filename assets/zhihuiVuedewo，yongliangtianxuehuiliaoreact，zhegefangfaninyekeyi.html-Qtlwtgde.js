import{_ as e,o as t,c as a,a as r}from"./app-84lPdggs.js";const s={},o=r('<h3 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h3><p>由于工作需要学习react框架；最开始看文档的时候感觉还挺难的。但当我看了半天文档以后才发现，原来react这样学才是最快的；前提是同学们会vue一类的框架哈。</p><p>该方法适用于会vue的同学们食用</p><p>我们在学习以前先去想一想，在vue中我们常用的方法是什么，我们遇到一些场景时在vue中是怎么做的。</p><p>当我们想到这儿的时候就会发现，对啊；既然vue是这样做的，那么react中是怎么做的呢？别急，我们一步一步对比着来。</p><p>这样岂不是更能理解哦！下面就让我们开始吧！</p><p>冲冲冲。。。</p><h3 id="vue梳理" tabindex="-1"><a class="header-anchor" href="#vue梳理" aria-hidden="true">#</a> Vue梳理</h3><p>在开始之前，我们先来梳理一下我们在vue中常用的API或者场景有哪些。</p><p>以下这几种就是我们常见的一些功能，主要是列表渲染、表单输入和一些计算属性等等；我们只需要根据原有的需要的功能去学习即可。</p><ul><li>组件传值</li><li>获取DOM</li><li>列表渲染</li><li>条件渲染</li><li>class</li><li>计算属性</li><li>监听器</li><li>表单输入</li><li>模板</li></ul><h3 id="vue-react对比学习" tabindex="-1"><a class="header-anchor" href="#vue-react对比学习" aria-hidden="true">#</a> vue/react对比学习</h3><h4 id="组件传值" tabindex="-1"><a class="header-anchor" href="#组件传值" aria-hidden="true">#</a> 组件传值</h4><p>vue</p><p>javascript</p><p>复制代码</p><p><code>// 父组件 &lt;GoodsList v-if=&quot;!isGoodsIdShow&quot; :goodsList=&quot;goodsList&quot;/&gt; // 子组件 -- 通过props获取即可 props: { goodsList:{ type:Array, default:function(){ return [] } } }</code></p><p>react</p><p>typescript</p><p>复制代码</p><p><code>// 父组件 export default function tab(props:any) { const [serverUrl, setServerUrl] = useState&lt;string | undefined&gt;(&#39;https://&#39;); console.log(props); // 父组件接收子组件的值并修改 const changeMsg = (msg?:string) =&gt; { setServerUrl(msg); }; return( &lt;View className=&#39;tab&#39;&gt; &lt;View className=&#39;box&#39;&gt; &lt;TabName msg={serverUrl} changeMsg={changeMsg} /&gt; &lt;/View&gt; &lt;/View&gt; ) } // 子组件 function TabName(props){ console.log(&#39;props&#39;,props); // 子传父 const handleClick = (msg:string) =&gt; { props.changeMsg(msg); }; return ( &lt;View&gt; &lt;Text&gt;{props.msg}&lt;/Text&gt; &lt;Button onClick={()=&gt;{handleClick(&#39;77777&#39;)}}&gt;测试&lt;/Button&gt; &lt;/View&gt; ); };</code></p><h4 id="获取dom" tabindex="-1"><a class="header-anchor" href="#获取dom" aria-hidden="true">#</a> 获取DOM</h4><p><strong>vue</strong></p><p>javascript</p><p>复制代码</p><p><code>this.$refs[&#39;ref&#39;]</code></p><p>react</p><p>typescript</p><p>复制代码</p><p><code>// 声明ref const domRef = useRef&lt;HTMLInputElement&gt;(null); // 通过点击事件选择input框 const handleBtnClick = ()=&gt; { domRef.current?.focus(); console.log(domRef,&#39;domRef&#39;) } return( &lt;View className=&#39;home&#39;&gt; &lt;View className=&#39;box&#39;&gt; &lt;Input ref={domRef} type=&quot;text&quot; /&gt; &lt;button onClick={handleBtnClick}&gt;增加&lt;/button&gt; &lt;/View&gt; &lt;/View&gt; )</code></p><h4 id="列表渲染" tabindex="-1"><a class="header-anchor" href="#列表渲染" aria-hidden="true">#</a> 列表渲染</h4><p>vue</p><p>html</p><p>复制代码</p><p><code>&lt;div v-for=&quot;(item, index) in mealList&quot; :key=&quot;index&quot;&gt; {{item}} &lt;/div&gt;</code></p><p>react</p><p>typescript</p><p>复制代码</p><p><code>//声明对象类型 type Coordinates = { name:string, age:number }; // 对象 let [userState, setUserState] = useState&lt;Coordinates&gt;({ name: &#39;John&#39;, age: 30 }); // 数组 let [list, setList] = useState&lt;Coordinates[]&gt;([{ name: &#39;李四&#39;, age: 30 }]); // 如果你的 =&gt; 后面跟了一对花括号 { ，那你必须使用 return 来指定返回值！ const listItem = list.map((oi)=&gt;{ return &lt;View key={oi.age}&gt;{oi.name}&lt;/View&gt; }); return ( { list.map((oi)=&gt;{ return &lt;Text className=&#39;main-list-title&#39; key={oi.age}&gt;{oi.name}&lt;/Text&gt; }) } &lt;View&gt;{ listItem }&lt;/View&gt; &lt;/View&gt; )</code></p><h4 id="条件渲染" tabindex="-1"><a class="header-anchor" href="#条件渲染" aria-hidden="true">#</a> 条件渲染</h4><h4 id="计算属性" tabindex="-1"><a class="header-anchor" href="#计算属性" aria-hidden="true">#</a> 计算属性</h4><p>vue</p><p>javascript</p><p>复制代码</p><p><code>computed: { userinfo() { return this.$store.state.userinfo; }, },</code></p><p>react</p><p>typescript</p><p>复制代码</p><p><code>const [serverUrl, setServerUrl] = useState(&#39;https://localhost:1234&#39;); let [age, setAge] = useState(2); const name = useMemo(() =&gt; { return serverUrl + &quot; &quot; + age; }, [serverUrl]); console.log(name) // https://localhost:1234 2</code></p><h4 id="监听器" tabindex="-1"><a class="header-anchor" href="#监听器" aria-hidden="true">#</a> 监听器</h4><p>vue</p><p>javascript</p><p>复制代码</p><p><code>watch: { // 保证自定义菜单始终显示在页面中 customContextmenuTop(top) { ...相关操作 } },</code></p><p>react</p><p>typescript</p><p>复制代码</p><p><code>import { useEffect, useState } from &#39;react&#39;; export default function home() { const [serverUrl, setServerUrl] = useState(&#39;https://localhost:1234&#39;); const [age, setAge] = useState(2); /** * useEffect第二个参数中所传递的值才会进行根据值的变化而出发; * 如果没有穿值的话,就不会监听数据变化 */ useEffect(()=&gt;{ if (age !== 5) { setAge(++age) } },[age]) useEffect(()=&gt;{ if(serverUrl !== &#39;w3c&#39;) { setServerUrl(&#39;w3c&#39;); } },[serverUrl]) return(78) }</code></p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>从上面的方法示例我们可以得出一个结论：在其他框架（自己会的）中常用到的方法或者场景进行针对性的学习即可。</p><p>这样的好处是你能快速的上手开发，然后在实际开发场景中遇到解决不了的问题再去查文档或者百度。</p><p>这只是我的一点小小的发现，哈哈哈。。。</p><p>如果对你有感触的话，可以尝试一下这个方法；我觉得还是很不错的</p><p>注意：react推荐函数式组件开发，不推荐类组件开发，我在上面没有说明，大家也可以去文档看看，类组件和函数组件还是有很大差别的，如：函数组件没有生命周期，一般使用监听来完成的，监听的使用方法还是有所不同，大家可以具体的去试试，我在这儿也是告诉大家一些方法；具体去学了才是你的。</p><p>为了方便自己学习记录，以及给大家提供思路，我下期给大家带来 <strong>vite + ts + react的搭建</strong></p>',65),i=[o];function p(n,l){return t(),a("div",null,i)}const d=e(s,[["render",p],["__file","zhihuiVuedewo，yongliangtianxuehuiliaoreact，zhegefangfaninyekeyi.html.vue"]]);export{d as default};
