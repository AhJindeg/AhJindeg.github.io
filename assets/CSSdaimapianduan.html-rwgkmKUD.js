import{_ as s,o as n,c as a,a as e}from"./app-a8d-X_GH.js";const t="/assets/1655968227461-KVgCKHEc.png",c="/assets/1655968273654-XhleDZzX.png",p="/assets/1655968312887-fPS5sgrW.png",i="/assets/1655968613800-aMVr7jhq.png",o="/assets/1655968830953-EhsJ0p0h.png",l="/assets/1655968943624-qCHyrglt.png",r={},u=e(`<h1 id="scroll-behavior-为文档添加平滑滚动效果" tabindex="-1"><a class="header-anchor" href="#scroll-behavior-为文档添加平滑滚动效果" aria-hidden="true">#</a> Scroll behavior 为文档添加平滑滚动效果</h1><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">html</span>  <span class="token punctuation">{</span>
    scroll-behavior<span class="token punctuation">:</span> smooth<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这行简单的代码可以避免编写复杂的 JavaScript <img src="`+t+`" alt="1655968227461"></p><p>此属性使我们能够定义当用户,单击滚动框中链接时，浏览器的滚动是跳跃还是平稳过渡。Chrome 版本 61+、Firefox 36+和 Edge 版本 79+支持此属性</p><h1 id="clip-path-属性使您可以将元素裁剪为基本形状或-svg-源" tabindex="-1"><a class="header-anchor" href="#clip-path-属性使您可以将元素裁剪为基本形状或-svg-源" aria-hidden="true">#</a> Clip path 属性使您可以将元素裁剪为基本形状或 SVG 源</h1><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">circle</span><span class="token punctuation">(</span>40%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">ellipse</span><span class="token punctuation">(</span>130px 140px at 10% 20%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>50% 0<span class="token punctuation">,</span>  100% 50%<span class="token punctuation">,</span>  50% 100%<span class="token punctuation">,</span>  0 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&#39;M 0 200 L 0,75 A 5,5 0,0,1 150,75 L 200 200 z&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+c+`" alt="1655968273654"></p><p>clip path CSS 属性可以使我们控制显示区域的哪一部分。区域内的内容显示，而外部隐藏。</p><h1 id="filter-属性定义元素-通常是-img-的视觉效果-如模糊和饱和度" tabindex="-1"><a class="header-anchor" href="#filter-属性定义元素-通常是-img-的视觉效果-如模糊和饱和度" aria-hidden="true">#</a> Filter 属性定义元素（通常是 <code>&lt;img&gt;</code>）的视觉效果（如模糊和饱和度）</h1><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">drop-shadow</span><span class="token punctuation">(</span>16px 16px 20px red<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+p+`" alt="1655968312887"></p><p>通过这行 css 代码，我们可以给图片添加滤镜效果。此属性的视觉效果包括，如阴影、模糊、颜色偏移、反转颜色等。下面给出了其中一些属性。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>5px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">contrast</span><span class="token punctuation">(</span>200%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span>80%<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="pseudo-classes-简化同父选择器" tabindex="-1"><a class="header-anchor" href="#pseudo-classes-简化同父选择器" aria-hidden="true">#</a> Pseudo-classes 简化同父选择器</h1><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">:is(header,  main,  footer) p:hover</span>  <span class="token punctuation">{</span>
    color<span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    cursor<span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:is()函数帮助我们通过选择器列表将相同的样式应用于一组不同的元素。选择器列表作为参数传递给:is()函数，选择器列表中的任何元素都会受到影响。它可以在实现 DRY（不要重复你自己的代码）原则时发挥作用。</p><h1 id="user-select-是否可复制文本" tabindex="-1"><a class="header-anchor" href="#user-select-是否可复制文本" aria-hidden="true">#</a> User select 是否可复制文本</h1><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  -webkit-user-select<span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token comment">/* Safari */</span>
  -ms-user-select<span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token comment">/* IE 10 and IE 11 */</span>
  user-select<span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token comment">/* Standard syntax */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>想阻止你的用户复制文本吗？如果是，则 user-select 属性可以帮助我们实现这个功能。user-select 属性指定用户是否可以选择文本。</p><h1 id="change-cursor-指针外观" tabindex="-1"><a class="header-anchor" href="#change-cursor-指针外观" aria-hidden="true">#</a> Change cursor 指针外观</h1><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
     cursor<span class="token punctuation">:</span> alias<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单而强大的属性，可以轻松地更改标指针的外观。</p><p><img src="`+i+`" alt="1655968613800"></p><p>不同的光标传达不同的含义。例如，可以用 cursor:grab 属性来表示可移动对象是可拖动的元素。</p><h1 id="caret-color-输入框光标颜色" tabindex="-1"><a class="header-anchor" href="#caret-color-输入框光标颜色" aria-hidden="true">#</a> Caret color 输入框光标颜色</h1><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">input</span>  <span class="token punctuation">{</span>
    caret-color<span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改变输入框光标颜色，同时又不改变输入框里面的内容的颜色。</p><h1 id="custom-scrollbars-自定义滚动条" tabindex="-1"><a class="header-anchor" href="#custom-scrollbars-自定义滚动条" aria-hidden="true">#</a> Custom Scrollbars 自定义滚动条</h1><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">::-webkit-scrollbar</span>  <span class="token punctuation">{</span>
    width<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以轻松地自定义滚动条，使用此属性可以给网站提供独特的触感。此外，还可以轻松更改滚动条轨迹和滑块。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">body::-webkit-scrollbar-track</span>  <span class="token punctuation">{</span>
      -webkit-box-shadow<span class="token punctuation">:</span> inset 0 0 6px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.9<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
  <span class="token selector">body::-webkit-scrollbar-thumb</span>  <span class="token punctuation">{</span>
    background-color<span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    outline<span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="writing-mode-规定水平还是垂直地排布文本行" tabindex="-1"><a class="header-anchor" href="#writing-mode-规定水平还是垂直地排布文本行" aria-hidden="true">#</a> Writing mode 规定水平还是垂直地排布文本行</h1><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">writing-mode</span><span class="token punctuation">:</span> vertical-lr<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>正确使用 <code>Writing mode</code>可以帮助你为网站增添有趣的变化。书写模式设置文本是水平排列还是垂直排列。我们还可以通过将其应用于 HTML 文件的根元素来设置整个项目。</p><p><img src="`+o+`" alt="1655968830953"></p><h1 id="border-box-指定宽高" tabindex="-1"><a class="header-anchor" href="#border-box-指定宽高" aria-hidden="true">#</a> Border box 指定宽高</h1><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
<span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将 box-sizing 设置为 border-box 是一个巧妙的技巧，可以避免任何意外的 padding 问题。它告诉浏览器在该元素的宽度和高度本身中指定的值中包含 border 和 padding。例如，如果元素宽度为 125px，则添加的任何 padding 都将包含在该宽度（125px）中。</p><h1 id="place-items-垂直水平位置合并" tabindex="-1"><a class="header-anchor" href="#place-items-垂直水平位置合并" aria-hidden="true">#</a> Place items 垂直水平位置合并</h1><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>place<span class="token operator">-</span>items<span class="token operator">:</span> center stretch<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 <code>grid</code>布局中，align-items 属性控制垂直位置，justify-items 属性控制水平位置。这两个属性的值一致时，就可以合并写成一个值。所以，place-items: center;等同于 place-items: center center;</p><p><img src="`+l+'" alt="1655968943624"></p>',42),d=[u];function v(k,m){return n(),a("div",null,d)}const b=s(r,[["render",v],["__file","CSSdaimapianduan.html.vue"]]);export{b as default};
