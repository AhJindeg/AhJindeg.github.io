import{_ as r,r as d,o as a,c as l,b as t,d as o,e as n,a as s}from"./app-a8d-X_GH.js";const i={},p=s(`<h3 id="一、项目规范" tabindex="-1"><a class="header-anchor" href="#一、项目规范" aria-hidden="true">#</a> 一、项目规范</h3><ol><li>项目命名 - 采用小写方式，以中划线分隔</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// bad</span>
mall_management<span class="token operator">-</span>system <span class="token operator">/</span> mallManagementSystem
<span class="token comment">// good</span>
mall<span class="token operator">-</span>management<span class="token operator">-</span>system
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>目录命名全部采用<strong>小写</strong>方式，以中划线分割，有复数结构时，要采用复数命名法</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// bad</span>
script <span class="token operator">/</span> style <span class="token operator">/</span> demo_scripts <span class="token operator">/</span> demoStyles <span class="token operator">/</span> imgs <span class="token operator">/</span> docs
<span class="token comment">// good</span>
scripts <span class="token operator">/</span> styles <span class="token operator">/</span> components <span class="token operator">/</span> images <span class="token operator">/</span> utils <span class="token operator">/</span> layouts <span class="token operator">/</span> demo<span class="token operator">-</span>styles <span class="token operator">/</span> demo<span class="token operator">-</span>scripts <span class="token operator">/</span> img <span class="token operator">/</span> doc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【特殊】项目中的 components 中的组件目录，使用<strong>大驼峰</strong>的方式</p><ol start="3"><li>文件名采用小写方式，以中划线分隔</li></ol><p>arduino</p><p>复制代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// bad </span>
renderDom<span class="token punctuation">.</span>js <span class="token operator">/</span> UserManagement<span class="token punctuation">.</span>html 
<span class="token comment">// good </span>
render<span class="token operator">-</span>dom<span class="token punctuation">.</span>js <span class="token operator">/</span> signup<span class="token punctuation">.</span>css <span class="token operator">/</span> index<span class="token punctuation">.</span>html <span class="token operator">/</span> company<span class="token operator">-</span>logo<span class="token punctuation">.</span>png
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><p>修改公共组件，需提前在群中告知<br> 如：</p></li><li><ol><li><a href="/all%20" title="/all%20">@all</a> 我需要修改 XXX 公用组件，大家请知晓；</li><li>条件允许：在该组件中写一个更新日志，写清楚改什么功能</li></ol></li></ol><h3 id="二、代码规范" tabindex="-1"><a class="header-anchor" href="#二、代码规范" aria-hidden="true">#</a> 二、代码规范</h3><ol><li>css<br> 1.1  id 采用驼峰式命名<br> 1.2 less 中的变量、函数、混合、placeholder 采用驼峰式命名<br> 1.3 选择器尽可能精准</li></ol><p>arduino</p><p>复制代码</p><p><code>// bad .content .title { font-size: 2rem; } // good .content &gt; .title { font-size: 2rem; }</code></p><p>1.4 颜色值和属性值使用 rgba 或者十六进制两种方式，有透明度的采用 rgba，否则采用十六进制，十六进制数值能用简写需使用简写，并全部使用大写。</p><ol start="2"><li>引用<br> 2.1 使用 tabs (空格字符) 设置为 2 个空格<br> 2.2 使用 <code>const</code> 定义常量；避免使用 <code>var</code></li></ol><p>ini</p><p>复制代码</p><p><code>// bad var a = 1 var b = 2 // good const a = 1 const b = 2</code></p><p>2.3   如果你必须重新赋值你的引用， 使用 <code>let</code> 代替 <code>var</code></p><ol start="3"><li>对象<br> 3.1 使用字面语法来创建对象</li></ol><p>ini</p><p>复制代码</p><p><code>// bad const item = new Object(); // good const item = {};</code></p><p>3.2 在创建具有动态属性名称的对象时使用计算属性名<br> 3.3 使用对象方法的缩写<br> 3.4 使用属性值的缩写<br> 3.5 只使用引号标注无效标识符的属性<br> 3.6 更喜欢对象扩展操作符，而不是用 <code>Object.assign</code> 浅拷贝一个对象。 使用对象的 rest 操作符来获得一个具有某些属性的新对象。</p><ol start="4"><li>数组<br> 4.1 使用字面语法创建数组</li></ol><p>javascript</p><p>复制代码</p><p><code>// bad const items = new Array() // good const items = []</code></p>`,31),c={href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push",title:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push",target:"_blank",rel:"noopener noreferrer"},g=t("br",null,null,-1),u=t("code",null,"...",-1),b=t("br",null,null,-1),m=t("code",null,"...",-1),h=t("code",null,"Array.from",-1),f=t("br",null,null,-1),_={href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from",title:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from",target:"_blank",rel:"noopener noreferrer"},v=t("code",null,"...",-1),k=t("br",null,null,-1),q=t("br",null,null,-1),y=s('<ol start="5"><li>解构<br> 5.1 在访问和使用对象的多个属性的时候使用对象的解构</li></ol><p>javascript</p><p>复制代码</p><p><code>// bad function getFullName(user) { const firstName = user.firstName const lastName = user.lastName return `${firstName} ${lastName}` } // good function getFullName(user) { const { firstName, lastName } = user return `${firstName} ${lastName}` } // best function getFullName({ firstName, lastName }) { return `${firstName} ${lastName}` }</code></p><p>5.2 使用数组解构<br> 5.3 对于多个返回值使用对象解构，而不是数组解构。</p><ol start="6"><li>字符<br> 6.1 使用单引号 <code>&#39;&#39;</code> 定义字符串</li></ol><p>go</p><p>复制代码</p><p><code>// bad const name = &quot;Capt. Janeway&quot; // bad - 模板文字应该包含插值或换行。 const name = `Capt. Janeway` // good const name = &#39;Capt. Janeway&#39;</code></p><p>6.2 当以编程模式构建字符串时，使用字符串模板代替字符串拼接<br> 6.3 不要在字符串上使用 <code>eval()</code><br> 6.4   不要转义字符串中不必要的字符</p><ol start="7"><li>函数<br> 7.1 永远不要定义一个参数为 <code>arguments</code>。 这将会优先于每个函数给定范围的 <code>arguments</code> 对象</li></ol><p>javascript</p><p>复制代码</p><p><code>// bad function foo(name, options, arguments) { // ... } // good function foo(name, options, args) { // ... }</code></p><p>7.2 不要使用 <code>arguments</code>, 选择使用 rest 语法 <code>...</code> 代替<br> 7.3 使用默认的参数语法，而不是改变函数参数<br> 7.4 总是把默认参数放在最后</p><ol start="8"><li>模块<br> 8.1 使用 import 导入模块（只引入需要的代码）</li></ol><p>javascript</p><p>复制代码</p><p><code>// bad import airbnbGuide from &#39;./AirbnbStyleGuide&#39; airbnbGuide.isEqual() // good import { isEqual } from &#39;./AirbnbStyleGuide&#39;</code></p><p>8.2 不要直接从导入导出<br> 8.3 只从一个路径导入所有需要的东西<br> 8.4 将所有的 <code>import</code>s 语句放在所有非导入语句的上边</p><ol start="9"><li>属性<br> 9.1 访问属性时使用点符号</li></ol><p>arduino</p><p>复制代码</p><p><code>const luke = { jedi: true, age: 28 } // bad const isJedi = luke[&#39;jedi&#39;] // good const isJedi = luke.jedi</code></p><p>9.2 使用变量访问属性时，使用 <code>[]</code>表示法</p><ol start="10"><li>变量<br> 10.1 把 <code>const</code> 声明的放在一起，把 <code>let</code> 声明的放在一起</li></ol><p>csharp</p><p>复制代码</p><p><code>// bad let i const items = getItems() let dragonball const goSportsTeam = true let len // good const goSportsTeam = true const items = getItems() let dragonball let i let length</code></p><ol start="11"><li>比较运算符<br> 11.1 使用 <code>===</code> 和 <code>!==</code> 而不是 <code>==</code> 和 <code>!=</code><br> 11.2 对于布尔值使用简写，但是对于字符串和数字进行显式比较</li></ol><p>scss</p><p>复制代码</p><p><code>// bad if (isValid === true) { // ... } // good if (isValid) { // ... } // bad if (name) { // ... } // good if (name !== &#39;&#39;) { // ... } // bad if (collection.length) { // ... } // good if (collection.length &gt; 0) { // ... }</code></p><p>11.3 三目表达式不应该嵌套，通常是单行表达式<br> 11.4 避免不必要的三目表达式</p><ol start="12"><li>代码块<br> 12.1 当有多行代码块的时候，使用大括号包裹</li></ol><p>kotlin</p><p>复制代码</p><p><code>// bad if (test) return false // good if (test) return false // good if (test) { return false } // bad function foo() { return false } // good function bar() { return false }</code></p><p>12.2 如果一个 <code>if</code> 块总是执行一个 <code>return</code> 语句，那么接下来的 <code>else</code> 块就没有必要了。 如果一个包含 <code>return</code> 语句的 <code>else if</code> 块，在一个包含了 <code>return</code> 语句的 <code>if</code> 块之后，那么可以拆成多个 <code>if</code> 块。</p><ol start="13"><li>空格<br> 13.1 用空格分离操作符</li></ol><p>arduino</p><p>复制代码</p><p><code>// bad const x=y+5 // good const x = y + 5</code></p><p>13.2 使用单个换行符结束文件<br> 13.3   在使用链式方法调用的时候使用缩进(超过两个方法链)。 使用一个引导点，强调该行是方法调用，而不是新的语句<br> 13.4   不要在块的开头使用空白行<br> 13.5 不要在括号内添加空格<br> 13.6 不要在中括号中添加空格<br> 13.7   在花括号内添加空格<br> 13.8 逗号之前避免使用空格，逗号之后需要使用空格<br> 13.9 在行的末尾避免使用空格<br> 13.10 避免多个空行，并且只允许在文件末尾添加一个换行符</p><ol start="14"><li>逗号<br> 14.1 添加尾随逗号</li></ol><p>arduino</p><p>复制代码</p><p><code>// bad - 没有尾随逗号的 git 差异 const hero = { firstName: &#39;Florence&#39;, - lastName: &#39;Nightingale&#39; + lastName: &#39;Nightingale&#39;, + inventorOf: [&#39;coxcomb chart&#39;, &#39;modern nursing&#39;] }; // good - 有尾随逗号的 git 差异 const hero = { firstName: &#39;Florence&#39;, lastName: &#39;Nightingale&#39;, + inventorOf: [&#39;coxcomb chart&#39;, &#39;modern nursing&#39;], };</code></p><h3 id="三、交互规范" tabindex="-1"><a class="header-anchor" href="#三、交互规范" aria-hidden="true">#</a> 三、交互规范</h3>',49),N={href:"https://ant.design/components/modal-cn/",title:"https://ant.design/components/modal-cn/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://ant.design/components/drawer-cn/",title:"https://ant.design/components/drawer-cn/",target:"_blank",rel:"noopener noreferrer"},j=t("p",null,"bash",-1),F=t("p",null,"复制代码",-1),S=t("p",null,[t("code",null,"新增：/add 有操作按钮 编辑：/edit/:id 有操作按钮 查看：/detail/:id 无操作按钮，只查看(待定) 路由定义（关键字）/:action/:id // action: add | edit | detail")],-1),z={start:"2"},w={href:"https://ant.design/components/form-cn/",title:"https://ant.design/components/form-cn/",target:"_blank",rel:"noopener noreferrer"},A=s('<ul><li><ul><li>在 Modal 中的 Form 布局使用 horizontal ，一行一个 FormItem</li></ul></li><li><ul><li>在 Drawer 中的 Form 布局使用 vertical ，一行两个 FormItem</li><li>在表格上方如高级搜索中的 Form 布局使用 inline</li></ul></li></ul><h3 id="四、注释规范" tabindex="-1"><a class="header-anchor" href="#四、注释规范" aria-hidden="true">#</a> 四、注释规范</h3><ul><li>变量注释</li></ul><ol><li><ol><li>使用行内注释</li></ol></li><li><ol start="2"><li>对变量进行注释</li></ol></li></ol><ul><li>函数注释</li></ul><ol><li><ol start="3"><li>函数的描述</li><li>参数的类型和表示的含义</li><li>返回值的类型和表示的含义</li><li>函数内部的逻辑使用行内注释</li></ol></li></ol><p>php</p><p>复制代码</p><p><code>/** * 两数求和 * @param {number} a 数字a * @param {number} b 数字b * @return {number} 返回两数的和 */ function add (a, b) { // ... return a + b }</code></p><h3 id="五、变量起名" tabindex="-1"><a class="header-anchor" href="#五、变量起名" aria-hidden="true">#</a> 五、变量起名</h3><ol><li>常用动词</li></ol><table><thead><tr><th>获取</th><th>设置</th><th>增加</th><th>删除</th><th>编辑</th><th>查看</th><th>打开</th><th>关闭</th></tr></thead><tbody><tr><td>get</td><td>set</td><td>add</td><td>delete</td><td>edit</td><td>view</td><td>open</td><td>close</td></tr><tr><td><strong>读取</strong></td><td><strong>写入</strong></td><td><strong>载入</strong></td><td><strong>保存</strong></td><td><strong>开始</strong></td><td><strong>结束</strong></td><td><strong>备份</strong></td><td><strong>恢复</strong></td></tr><tr><td>read</td><td>write</td><td>load</td><td>save</td><td>begin</td><td>end</td><td>backup</td><td>restore</td></tr><tr><td><strong>分割</strong></td><td><strong>合并</strong></td><td><strong>导入</strong></td><td><strong>导出</strong></td><td><strong>插入</strong></td><td><strong>清除</strong></td><td><strong>绑定</strong></td><td><strong>追加</strong></td></tr><tr><td>split</td><td>merge</td><td>import</td><td>export</td><td>insert</td><td>clear</td><td>bind</td><td>append</td></tr><tr><td><strong>清理</strong></td><td><strong>排序</strong></td><td><strong>选取</strong></td><td><strong>标记</strong></td><td><strong>复制</strong></td><td><strong>粘贴</strong></td><td><strong>撤销</strong></td><td><strong>重做</strong></td></tr><tr><td>clean</td><td>sort</td><td>select</td><td>mark</td><td>copy</td><td>paste</td><td>undo</td><td>redo</td></tr><tr><td><strong>暂停</strong></td><td><strong>启动</strong></td><td><strong>发布</strong></td><td><strong>解析</strong></td><td><strong>搜索</strong></td><td><strong>增加</strong></td><td><strong>减少</strong></td><td><strong>播放</strong></td></tr><tr><td>pause</td><td>launch</td><td>publish</td><td>parse</td><td>search</td><td>increase</td><td>decrease</td><td>play</td></tr><tr><td><strong>运行</strong></td><td><strong>编译</strong></td><td><strong>执行</strong></td><td><strong>提交</strong></td><td><strong>展开</strong></td><td><strong>折叠</strong></td><td><strong>监听</strong></td><td><strong>构建</strong></td></tr><tr><td>run</td><td>compile</td><td>execute</td><td>submit</td><td>expand</td><td>collapse</td><td>listen</td><td>build</td></tr><tr><td><strong>收集</strong></td><td><strong>编码</strong></td><td><strong>解码</strong></td><td><strong>加密</strong></td><td><strong>解密</strong></td><td><strong>压缩</strong></td><td><strong>解压缩</strong></td><td><strong>打包</strong></td></tr><tr><td>collect</td><td>encode</td><td>decode</td><td>encrypt</td><td>decrypt</td><td>compress</td><td>decompress</td><td>pack</td></tr><tr><td><strong>发出</strong></td><td><strong>连接</strong></td><td><strong>断开</strong></td><td><strong>发送</strong></td><td><strong>接收</strong></td><td><strong>下载</strong></td><td><strong>上传</strong></td><td><strong>刷新</strong></td></tr><tr><td>emit</td><td>connect</td><td>disconnect</td><td>send</td><td>receive</td><td>download</td><td>upload</td><td>refresh</td></tr></tbody></table><ol start="2"><li>函数采用变量 + 名词的方式</li></ol><p>arduino</p><p>复制代码</p><p><code>// 获取模型列表 getModelList // 查看模型详情 getModelDetail // 新增模型 addModel // 编辑模型 editModel // 删除模型 delModel</code></p><ol start="3"><li>避免单字母的名字。用你的命名来描述功能</li></ol><p>csharp</p><p>复制代码</p><p><code>// bad function q() { // ... } // good function query() { // ... }</code></p><ol start="4"><li><p>在命名对象、函数和实例时使用驼峰命名法(和数据库有关的可以使用下划线)</p></li><li><p>不要使用前置或者后置下划线</p></li></ol><p>ini</p><p>复制代码</p><p><code>// bad this.__firstName__ = &#39;Panda&#39;; this.firstName_ = &#39;Panda&#39;; this._firstName = &#39;Panda&#39;; // good this.firstName = &#39;Panda&#39;;</code></p>',24),J={start:"6"},O=t("code",null,"this",-1),G={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind",title:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind",target:"_blank",rel:"noopener noreferrer"},C=s('<p>javascript</p><p>复制代码</p><p><code>// bad function foo() { const that = this; return function () { console.log(that); }; } // good function foo() { return () =&gt; { console.log(this); }; }</code></p><h3 id="六、-vue-项目规范" tabindex="-1"><a class="header-anchor" href="#六、-vue-项目规范" aria-hidden="true">#</a> 六、 Vue 项目规范</h3><ol><li><p>一个文件声明一个组件并只导出一个组件</p></li><li><p>组件名称和定义该组件的文件名称建议要保持一致</p></li></ol><p>css</p><p>复制代码</p><p><code>// bad import GlobalFotter from &#39;./Footer // good import Footer from &#39;./Footer&#39;;</code></p><ol start="3"><li><p>组件名称： 推荐使用大驼峰命名</p></li><li><p>当标签没有子元素的时候，始终使用自闭合的标签</p></li></ol><p>javascript</p><p>复制代码</p><p><code>// bad &lt;Component&gt;&lt;/Component&gt; // good &lt;Component /&gt;</code></p><ol start="5"><li>如果标签有多行属性，关闭标签要另起一行</li></ol><p>ini</p><p>复制代码</p><p><code>// bad &lt;Component bar=&quot;bar&quot; baz=&quot;baz&quot; /&gt; // good &lt;Component bar=&quot;bar&quot; baz=&quot;baz&quot; /&gt;</code></p><ol start="6"><li>使用下列的对齐方式</li></ol><p>ini</p><p>复制代码</p><p><code>// goood &lt;Foo superLongParam=&quot;bar&quot; anotherSuperLongParam=&quot;baz&quot; /&gt; // 如果组件的属性可以放在一行（一个属性时）就保持在当前一行中 &lt;Foo bar=&quot;bar&quot; /&gt; // 多行属性采用缩进 &lt;Foo superLongParam=&quot;bar&quot; anotherSuperLongParam=&quot;baz&quot; &gt; &lt;Quux /&gt; &lt;/Foo&gt;</code></p><ol start="7"><li>Template 的属性都采用双引号，其他的 JS 都使用单引号</li></ol><p>ini</p><p>复制代码</p><p><code>// bad &lt;Foo bar=&#39;bar&#39; /&gt; // good &lt;Foo bar=&quot;bar&quot; /&gt;</code></p><ol start="8"><li>列表循环中禁止用 index 作为 key 值, 可以使用内容作为 key 值</li></ol><p>ruby</p><p>复制代码</p><p><code>// bad &lt;li for=&quot;(item, index) in list&quot; :key=&quot;index&quot;&gt;&lt;/li&gt; // good &lt;li for=&quot;(item, index) in list&quot; :key=&quot;item&quot;&gt;&lt;/li&gt;</code></p><h3 id="七、vscode-设置" tabindex="-1"><a class="header-anchor" href="#七、vscode-设置" aria-hidden="true">#</a> 七、vscode 设置</h3><p>json</p><p>复制代码</p><p><code>// 在vscode编辑器中增加如下设置（ctrl+,） &quot;editor.codeActionsOnSave&quot;: { &quot;editor.formatOnSave&quot;: true, &quot;source.fixAll.eslint&quot;: true },</code></p>',32);function M(P,L){const e=d("ExternalLinkIcon");return a(),l("div",null,[p,t("p",null,[o("4.2 使用 "),t("a",c,[o("Array#push"),n(e)]),o(" 取代直接赋值来给数组添加项。"),g,o(" 4.3 使用数组展开方法 "),u,o(" 来拷贝数组。"),b,o(" 4.4 将一个类数组对象转换成一个数组， 使用展开方法 "),m,o(" 代替 "),h,f,o(" 4.5 对于对迭代器的映射，使用 "),t("a",_,[o("Array.from"),n(e)]),o(" 替代展开方法 "),v,o(" ， 因为它避免了创建中间数组"),k,o(" 4.6   在数组回调方法中使用 return 语句。 如果函数体由一个返回无副作用的表达式的单个语句组成，那么可以省略返回值"),q,o(" 4.7 如果数组有多行，则在开始的时候换行，然后在结束的时候换行")]),y,t("ol",null,[t("li",null,[o("所有树节点的增改弹层都是用"),t("a",N,[o("Modal"),n(e)]),o("（对话框）组件 ，所有的表格增改查弹层都是用"),t("a",x,[o("Drawer"),n(e)]),o("（抽屉）组件")])]),j,F,S,t("ol",z,[t("li",null,[t("a",w,[o("Form"),n(e)]),o(" 组件布局")])]),A,t("ol",J,[t("li",null,[o("不要保存 "),O,o(" 的引用。 使用箭头函数或者 "),t("a",G,[o("函数#bind"),n(e)]),o("。")])]),C])}const I=r(i,[["render",M],["__file","nizaibuhuimingmingguifan，huibeichaoxiaode！.html.vue"]]);export{I as default};
