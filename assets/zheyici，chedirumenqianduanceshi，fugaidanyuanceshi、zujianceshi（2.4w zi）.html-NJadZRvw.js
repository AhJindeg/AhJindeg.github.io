import{_ as r,r as c,o as i,c as a,b as e,d as t,e as p,a as s}from"./app-2S74OMdH.js";const n={},d=e("p",null,'前端测试一直是前端工程化中很重要的话题，但是很多人往往对测试产生误解，认为测试不仅没有什么用而且还浪费时间，或者测试应该让测试人员来做，自己应该专注于开发。所以，文章开头会先从"软件工程语境下的软件测试"的角度，介绍软件测试的定义、作用及其分类，让读者正确认识测试，明确自身在软件测试阶段中的定位，以及在软件测试过程中所承担的职责和所应完成的任务。',-1),l=e("p",null,"在理解软件测试的定义及作用之后，就要开始入门前端测试了，在这一部分我介绍了许多常用的自动化测试基础知识，比如断言、模拟，还介绍了单元测试框架 Jest 和最新的 Vitest 的基本使用并进行了较深入的比较。",-1),u={href:"https://github.com/joeyhuang0235/addressList",title:"https://github.com/joeyhuang0235/addressList",target:"_blank",rel:"noopener noreferrer"},h=s('<p>本文篇幅较长，全程高能，建议收藏慢慢观看。</p><h2 id="软件工程语境下的软件测试" tabindex="-1"><a class="header-anchor" href="#软件工程语境下的软件测试" aria-hidden="true">#</a> 软件工程语境下的软件测试</h2><h3 id="什么是软件测试" tabindex="-1"><a class="header-anchor" href="#什么是软件测试" aria-hidden="true">#</a> 什么是软件测试</h3><p>什么是软件测试？要回答这个问题，我们首先需要先明确为什么要进行软件测试？答案很简单，就是为了保证软件质量。对于软件来说，不论采用什么技术和什么方法来进行开发，软件产品中都或多或少会存在一些错误和问题。采用先进的开发方式、完善的开发过程，可以减少错误的引入，但是不可能完全杜绝软件中的错误，而这些错误就需要通过测试来找出。因此，软件测试是软件质量保证的关键步骤。</p><p>关于软件测试的定义，一直有正反两方面的争辩。正面的观点是：软件测试是使用人工或自动手段来运行或测定某个系统的过程，目的在于检验它是否满足规定的需求或是弄清预期结果与实际结果之间的差别。这个观点明确地提出了软件测试是以检验是否满足需求为目标。</p><p>而反面的观点是：测试是为了发现错误而执行一个程序或系统的过程，测试就是为了发现缺陷，而不是证明程序无错误，如果没有发现程序中的问题，并不能说明问题就不存在，而是还没发现软件中潜在的问题。该观点认为，一个成功的测试必须是发现了软件问题的测试，否则测试就没有价值。</p><p>这正反两面的观点是从不同的角度看问题，一方面通过测试来保证质量，检验软件是否满足需求，另一方面由于测试不能证明软件没有丝毫错误，所以要尽可能找出不能正常工作的地方。在具体的应用场景中，软件测试应该在这两者之间取得平衡，或者有所侧重。</p><h3 id="软件测试与软件开发的关系" tabindex="-1"><a class="header-anchor" href="#软件测试与软件开发的关系" aria-hidden="true">#</a> 软件测试与软件开发的关系</h3><p>介绍完了为什么需要软件测试以及什么是软件测试，我们明确了软件测试的定义及其作用。在这一小节，我们探讨软件测试和软件开发的关系，研究软件测试在软件工程中所扮演的角色。</p><p>在人们的刻板印象中，软件测试的活动似乎仅仅发生在编码完成之后，被认为是一种检验产品的手段，成为软件生命周期的最后一项活动而进行。在著名的软件瀑布模型中，软件测试处在编程阶段的下游，位于维护阶段的上游，先有编程、后有测试，测试的位置被放得很清楚。瀑布模型中的测试只有等到程序完成了之后才会执行，强调测试仅仅是对程序的检验：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4899288e9f58413893f38cff4bda9f8d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="4acb47292139318e0884686a3219163.jpg"></p><p>然而瀑布模型属于传统的软件工程，存在较大的局限性，与软件开发的迭代思想、敏捷方法存在冲突，也不符合当今软件工程的实际需求。实际上，软件测试贯穿着整个软件生命周期，从需求评审、设计评审开始，软件测试就介入到软件的开发活动中。例如，通过对需求定义的阅读、讨论和审查，不仅可以发现需求定义的问题，还可以了解产品的设计特性、用户的真正需求，从而确定测试目标、准备测试用例并策划测试活动。</p><p>同理，在软件设计阶段，通过了解系统是如何实现的、构建在什么运行环境中等问题，可以衡量系统的可测试性、检查系统的设计是否符合系统的可靠性要求。</p><p>因此，软件测试和软件开发在整个软件生命周期中是相互协作，共同工作的。在软件的项目启动时，软件测试的工作便随之开始了。V 模型很好地反映了软件测试和软件开发之间的关系：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb8ff847c90c4d398f88b7ff6a8dc049~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="765000aa33001ac66fa5f64ce4ea3c0.jpg"></p><p>如图所示，左边是软件定义和实现的过程，右边是对左边所构造的结果进行检验的过程，即测试与开发之间是一对一的关系，通过对开发工作成果的检验，来确认其是否满足规定的要求。</p><p>你可能会对 V 模型右边的各种测试类型有些疑惑，像功能测试、验收测试等测试都属于软件测试的分类。</p><h3 id="软件测试的分类" tabindex="-1"><a class="header-anchor" href="#软件测试的分类" aria-hidden="true">#</a> 软件测试的分类</h3><p>软件测试可以从不同角度进行分类，例如根据测试的方法进行分类，也可以根据测试的目标和测试的阶段进行分类。如图所示，是软件测试的三维空间：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b9481bcfc5a94cf4abc06fa5b81f5e97~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt=""></p><p>对于前端程序员来说，我们应该对其中的单元测试、集成测试和系统测试较为熟悉，这三个层次其实是按照被测试的对象或测试阶段划分的。具体内容在后面几节会介绍。</p><p>功能测试也称正确性测试，用于验证每个功能是否按照事先定义的要求正常工作，比如我们前端程序员写的大部分单元测试就属于功能测试。而其他目的的测试，如压力测试、兼容性测试和安全性测试则一般交给专业的测试人员负责。</p><p>回归测试是为保证软件中新的变化（如增加、修改代码）不会对原有功能的正常使用有影响和进行的测试。比如我们将新代码提交到版本控制库后在 CI/CD 管道运行测试脚本的行为，就属于回归测试。</p><p>此外，还有四类测试需要我们特别注意：</p><h4 id="静态测试和动态测试" tabindex="-1"><a class="header-anchor" href="#静态测试和动态测试" aria-hidden="true">#</a> 静态测试和动态测试</h4><p>根据程序是否运行，测试可以分为静态测试和动态测试。</p><p>静态测试包括对软件产品的需求和设计规格说明书的评审，对程序代码的审查以及静态分析等。比如我们在编写完代码之后一般都会简单地检查所写的代码，通过观察程序的控制流或走向来分析其行为是否符合预期，这种静态分析便属于静态测试。</p><p>此外，使用 TypeScript 可以做到在编码时静态分析代码并进行类型检查，从而发现并提示程序中隐藏的类型错误，这个过程也属于静态测试。如果没有使用 TypeScript 等强类型语言，我们通常都需要在代码中使用 <code>typeof</code> 等关键字进行类型判断来避免这类类型错误，并在单元测试中创建并运行相应的测试用例来确保代码对类型的判断符合预期。所以从测试这一角度来看，TypeScript 这类语言或工具在某种程度上也解放了程序员的双手，让我们不必编写复杂且麻烦的判断程序类型处理是否正常的测试用例，专注于对程序的功能测试。</p><p>当然，使用像 ESlint、Prettier 这类的 linter 或 formatter 也属于静态测试，用以检查代码的格式、风格是否符合团队规范。</p><p>像这类使用工具对代码进行静态分析，检查代码是否符合需求的过程，属于自动化测试，所使用的工具称为测试工具。后面我们将聚焦于如何使用 Jest、Vitest 等测试工具或技术进行自动化测试及编写测试代码。</p><p>动态测试是通过运行程序发现错误，通过观察代码运行过程来获取系统行为、内存、堆栈及测试覆盖率等各方面的信息，来判断系统是否存在问题，或者通过有效的测试用例对应的输入输出关系来分析被测程序的运行情况，来发现缺陷。当写完一个组件后，我们都会让代码在浏览器上跑起来，观察组件的渲染效果或运行结果判断是否符合预期，这种行为就属于动态测试。</p><h4 id="自动化测试和手工测试" tabindex="-1"><a class="header-anchor" href="#自动化测试和手工测试" aria-hidden="true">#</a> 自动化测试和手工测试</h4><p>刚才提到了自动化测试，这一小节我们来详细地介绍自动化测试。</p><p>软件测试是一项艰苦的工作，需要投入大量的时间和精力，据统计，软件测试会占用整个开发时间的 40%。但是，软件测试工作具有比较大的重复性。我们知道，在软件发布或新代码提交之前，都会进行多轮回归测试，也就是说，大量的测试用例会被重复执行很多遍，然而这个时候所进行的测试仅仅是为了验证所提交的功能或代码不会对已经实现的代码造成影响，所以找到缺陷的可能性一般很小。尽管执行大量的回归测试的效率低，但又是十分必要的。所以，自动化测试产生了。</p><p>自动化测试是相对手工测试而存在的概念，由手工逐个运行测试用例的操作过程被测试工具或系统自动执行的过程所代替。自动化测试是软件测试中提高测试效率、覆盖率和可靠性的重要手段，是软件测试不可分割的一部分。</p><p>自动化测试是把以人为驱动的测试行为转化为机器执行的一种过程，即模拟手工测试步骤，通过执行由程序语言编制的测试脚本，自动地完成软件的单元测试、功能测试、负载测试等工作。</p><p>对前端程序员来说，除了借助 TypeScript、ESlint 等静态测试工具进行自动化测试外，还可以使用 Jest、Vitest、Mocha 等单元测试工具和 Cypress、Playwright 等端到端测试工具来进行自动化测试。</p><h4 id="白盒测试和黑盒测试" tabindex="-1"><a class="header-anchor" href="#白盒测试和黑盒测试" aria-hidden="true">#</a> 白盒测试和黑盒测试</h4><p>根据是针对软件系统的内部结构，还是针对软件系统的外部表现行为采取的测试方法，分别被称为白盒测试方法和黑盒测试方法。</p><p>白盒测试，也称为逻辑驱动测试或结构化测试，是已知产品的内部工作过程，清楚其程序结构和语句，按照程序内部的结构测试程序，测试程序内部的变量状态、逻辑结构、运行路径等，检验程序中的每条通路是否都能按预定要求正常工作，检查程序内部动作或运行是否符合设计规格要求。</p><p>有写过单元测试的同学可能知道在完成测试代码的编写后我们通常都会跑一次代码覆盖测试，根据生成的代码覆盖率报告来判断所编写的测试是否充足。这里的代码覆盖率是通过运行的测试代码所覆盖源代码的分支、函数和语句等的程度占源代码的比值来得到的。如果代码覆盖率未达到要求，我们就需要为未覆盖到的代码编写一个或多个测试用例来提高覆盖率，这种测试方法就可以称为白盒测试。</p><p>此外，刚才提到的 TypeScript、ESlint 等测试工具也可以说是一种白盒测试工具。</p><p>黑盒测试，也称为数据驱动测试，在测试时，把程序看作一个不能打开的黑盒子，在完全不考虑程序内部结构和内部特性的情况下针对软件直接进行测试。</p><p>黑盒测试不关注软件内部结构，而着眼于程序外部用户界面，关注软件的输入和输出，关注用户的需求，直接获得用户体验，从用户的角度或扮演用户角色来验证软件功能。</p><p>作为前端程序员，我们所使用的测试方法绝大多数都应该使用黑盒测试，具体的原因和做法可以看下文。</p><h4 id="单元测试、集成测试和系统测试" tabindex="-1"><a class="header-anchor" href="#单元测试、集成测试和系统测试" aria-hidden="true">#</a> 单元测试、集成测试和系统测试</h4><p>软件系统是由许多单元构成的，这些单元可能是一个对象、类或函数，也可能是一个更大的单元，组件或模块。要保证软件系统的质量，首先就要保证构成系统的单元的质量，也就是要开展单元测试。通过充分的单元测试，发现并修正单元中的问题，从而为系统的质量打下基础。</p><p>单元测试的大部分工作应该由开发人员完成，但是很多开发人员只把注意力放在编程上，把代码写出来，而不愿在测试上花费时间，让测试人员去进行测试。需要明确的是，如果没有做好单元测试，软件在集成阶段及后续的测试阶段会发现更多的、各种各样的错误，大量的时间将被花费在跟踪那些隐藏在独立单元内的、简单的错误上面，导致整个项目的工期增长，提高软件成本。</p><p>作为软件开发人员，一定要明确一点：软件存在的错误发现得越早，修改和维护的费用就越低，难度也越小，而单元测试就是早期抓住这些错误的最好时机。</p><p>单元测试强调被测试对象的独立性，被测的独立单元将与程序的其他部分隔离开，以避免其他单元对该单元的影响。例如将被测模块与其父模块和子模块隔离开，单独进行测试。但是将其依赖隔离开的话又可能导致被测模块无法正常工作，这时候就需要用到前端单元测试中经常使用的 Mock，即模拟，具体内容可以看下文。</p><p>在软件开发中，经常会遇到这样的情况：单元测试时能确认每个模块都能单独工作，但这些模块集成在一起之后会出现有些模块不能正常工作的问题。仔细思考便可以知道，这主要是因为模块集成到一起后相互调用时的接口出现问题，如接口参数不匹配、传递错误数据等问题。这时就需要进行集成测试。集成测试是将已通过测试的单元按设计要求集成起来再进行的测试，以检查这些单元之间的接口是否存在问题。</p><p>在进行集成测试时，需要选择集成模式，即按照怎样的策略进行集成。集成测试基本可以概括为以下两种：</p><ul><li><p>非渐增式测试模式：先分别测试每个模块，再把所有模块按设计要求放在一起结合成所要的程序进行测试；</p></li><li><p>渐增式测试模式：把下一个要测试的模块同已经测试好的模块结合起来进行测试，测试是在模块一个一个的扩展下进行，测试的范围也逐步增大。</p></li></ul><p>在实际工作中，一般采用渐增式测试模式，具体的实践有自顶向下、自底向上、混合策略等。当然，具体情况具体分析。</p><p>经过集成测试之后，分散开发的模块被集成起来，构成相对完整的体系，其中各模块间接口存在的种种问题基本都已消除，此时就可以进入系统测试阶段。</p><p>系统测试是将经过集成测试过后的软件，作为计算机系统的一个部分，与计算机硬件、数据和平台等系统元素结合起来，在真实运行环境下对计算机系统进行一系列的严格有效的测试来发现软件的潜在问题，保证系统的正常运行。</p><p>系统测试分为功能测试和非功能性测试。</p><p>系统级功能测试不仅要考虑模块之间的相互作用，而且要考虑系统的应用环境，而且要模拟用户完成从头到尾，即端到端的业务测试， 确保系统可以完成事先设计的功能，满足用户的实际业务需求。</p><p>系统非功能性测试是在实际运行环境或模拟实际运行环境上，针对系统的非功能特性所进行的测试，包括负载测试、性能测试、安全测试等。</p><h3 id="测试驱动开发" tabindex="-1"><a class="header-anchor" href="#测试驱动开发" aria-hidden="true">#</a> 测试驱动开发</h3><p>在敏捷方法中，提出测试驱动开发（Test Driven Development，TDD），即测试在先、编码在后的开发方法。TDD 有别于以往的先编码后测试的开发过程，而是在编程之前，先写测试脚本或设计测试用例。这种强调&quot;测试先行“的模式，可以使开发人员对所写的代码有足够的信心，同时也有勇气进行重构。</p><p>TDD 的具体实施过程是，在打算添加某个新功能时，先不急着写功能代码，而是将各种特定条件、使用场景等想清楚，然后为待编写的代码先些一段测试用例，接着使用一些测试工具运行这段测试用例，运行的结果自然是失败，此时利用测试工具的错误信息，了解代码没有通过测试的原因，然后有针对性地逐步添加代码，接着再运行测试，不断地修改、添加代码，直至测试用例通过。</p><p>TDD 使得开发人员不能再像过去那样随意写代码，要求写的每行代码都是有效的代码。而在此之前，即使代码写完了，编程工作也还没结束，因为还没进行单元测试，经过单元测试后可能还会出现错误，需要再次进行修正。TDD 在于预设各种应用场景、前提条件，促进开发人员思考，写出更完善、更高质量的代码，提高工作效率。</p><p>此外，TDD 还可以确保测试的独立性，使测试用例的设计不受实现思维的影响，确保测试的客观和全面。</p><p>对于抽象能力高，在编写代码前喜欢先进行各种场景预设、思考前提条件的程序员来说，TDD 无疑是一种福音，但如果你抽象能力不足或急着实现功能，也不必强求，在完成功能之后及时补充单元测试就行。</p><hr><p>在软件工程语境下的软件测试的所有相关内容和概念就介绍到这里，软件测试作为软件工程中重要的组成部分，在软件开发中发挥着至关重要的作用，贯穿软件的整个生命周期。理解软件测试的定义、作用及其分类，可以使作为程序员的我们明确自身在软件测试阶段中的定位，了解自身在软件测试过程中所承担的职责和所应完成的任务。希望你能好好理解这些内容。</p><p>现在，让我们将目光从软件工程中的测试转移到前端开发的测试中，作为前端程序员，应该做哪些测试以及怎样进行测试呢？</p><h2 id="前端程序员所要进行的测试" tabindex="-1"><a class="header-anchor" href="#前端程序员所要进行的测试" aria-hidden="true">#</a> 前端程序员所要进行的测试</h2><p>作为前端开发人员，当构建一个 Web 或其他类型的应用时，从被测试对象的角度，可以进行以下三类测试：</p><ul><li><p>单元测试。前面提到，单元测试的大部分工作应该由开发人员完成，前端程序员也是如此。我们需要对单个独立的函数、类或一个组合式函数、hook 进行测试，将其与应用的其他部分隔离开来。而且应该进行功能测试，侧重于被测单元在功能上的正确性，而非进行兼容性测试、性能测试等其他测试。而且，由于前端应用的特殊性，为了创建一个与外界隔离的环境，我们往往需要模拟应用环境的很大一部分，如第三方模块、网络请求等；</p></li><li><p>组件测试。如今大多数 Web 应用都会使用 Vue、React 这类提倡组件化开发的框架进行开发，因此对所编写的组件进行测试在前端测试中应当占据比较大的比重。组件测试需要检查组件是否正常挂载或渲染、是否可以正常交互，以及表现是否符合预期；</p></li><li><p>端到端（E2E）测试。当完成单元测试和组件测试之后，我们还需要进行端到端测试，将整个应用部署到实际运行环境或模拟真实运行环境下运行，从用户的视角对整个应用进行从头到尾、端到端的业务测试，确保应用表现符合预定需求。端到端测试除了测试用户界面的真实交互效果和逻辑行为外，还会发起真实的网络请求，向后端的数据库获取数据，并且在真实浏览器上运行，捕捉应用运行出错时的快照、视频等信息。端到端测试可以说是一种系统功能测试。当然，（自动化的）端到端测试也不是非要做，也不是非要前端做，在实际开发过程中还应结合实际情况选择合适的测试方案。</p></li></ul><p>除了进行以上三种功能测试外，前端程序员还可进行性能测试，如借助浏览器的 LightHouse、Performance 功能检测页面的渲染、交互性能。还可进行兼容性测试等其他测试。由于不是本文重点内容，就不进行介绍了。</p><p>对一个庞大的应用进行单元测试、组件测试和端到端测试，往往需要设计大量的测试用例，执行多次且重复的测试，要想大幅缩短在测试上所花费的时间，自然就需要用到自动化测试，通过使用测试工具、编写测试脚本来提高测试效率，所幸前端领域经过这么多年的发展，在社区上早已出现了很多优秀的开源测试工具。接下来，我将介绍如何利用测试工具进行自动化测试，编写测试脚本，让你全面地入门自动化测试。</p><h2 id="前端自动化测试入门" tabindex="-1"><a class="header-anchor" href="#前端自动化测试入门" aria-hidden="true">#</a> 前端自动化测试入门</h2><p>如果现在要你测试以下这个函数，你要怎么做？</p><p>js</p><p>复制代码</p><p><code>function sum(a, b) { return a + b }</code></p><p>第一步自然是设计测试用例，比如输入 1 和 2，这个函数会输出 3。设计好测试用例之后，当然就要让这个函数跑起来，传入 1 和 2，打印函数返回值看看是否为 3。于是可以写出以下这段测试代码：</p><p>js</p><p>复制代码</p><p><code>console.log(sum(1, 2))</code></p><p>然后运行这段代码，检查打印结果是否为 3。这样，一个测试代码就完成了。当然，这个函数过于简单，用静态测试的方法也能进行测试，这里只是方便举例。除此之外，这段代码运行起来还都需要人工观察运行结果来检验测试成果，这其实也不属于自动化测试的范畴。</p><p>当类似的测试做多了之后我们就可以发现一个规律，大多数测试用例，都是设计一个或多个输入数据，以及对应的输出数据，通过传入这些输入数据时被测代码是否产生或返回这些输出数据来判断被测代码是否运行正常，这个判断的过程就叫作<strong>断言（assertion）</strong>。</p><h3 id="断言" tabindex="-1"><a class="header-anchor" href="#断言" aria-hidden="true">#</a> 断言</h3><p>Node 的 assert 模块就提供了进行断言的 API，比如使用 equal 方法对上述的 sum 函数进行断言，可以这样：</p><p>js</p><p>复制代码</p><p><code>assert.equal(sum(1, 2), 3)</code></p><p>运行这段代码，如果 sum 函数的实现不符合预期，equal 方法就会抛出一个 AssertionError 错误，并打印详细的错误原因。</p>',90),m={href:"https://www.chaijs.com/",title:"https://www.chaijs.com/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://jestjs.io/",title:"https://jestjs.io/",target:"_blank",rel:"noopener noreferrer"},f=s('<h4 id="chai" tabindex="-1"><a class="header-anchor" href="#chai" aria-hidden="true">#</a> Chai</h4><p>Chai 提供了三种不同的断言风格供用户选择。</p><h5 id="assert" tabindex="-1"><a class="header-anchor" href="#assert" aria-hidden="true">#</a> assert</h5><p>assert 风格与 Node 的 assert 模块类似，但是提供了更多 API，并且可以在浏览器上运行：</p><p>js</p><p>复制代码</p><p><code>const assert = require(&#39;chai&#39;).assert const foo = &#39;bar&#39; assert.typeOf(foo, &#39;string&#39;) // without optional message assert.typeOf(foo, &#39;string&#39;, &#39;foo is a string&#39;) // with optional message assert.equal(foo, &#39;bar&#39;, &#39;foo equal `bar`&#39;)</code></p><p>assert 风格的 API 允许使用者传入一个可选的描述断言行为的字符串到最后一个参数，当断言失败后错误信息中就会显示这个字符串。</p><h5 id="bdd" tabindex="-1"><a class="header-anchor" href="#bdd" aria-hidden="true">#</a> BDD</h5><p>BDD 风格提供两类断言：expect 和 should，两者都支持链式调用的语法让使用者可以用一种贴近自然语言的方式进行断言。使用方式如下：</p><p>js</p><p>复制代码</p><p><code>// expect: const expect = require(&#39;chai&#39;).expect const foo = &#39;bar&#39; expect(foo).to.be.a(&#39;string&#39;) expect(foo).to.equal(&#39;bar&#39;) // should: const should = require(&#39;chai&#39;).should() const foo = &#39;bar&#39; foo.should.be.a(&#39;string&#39;) foo.should.equal(&#39;bar&#39;) foo.should.have.lengthOf(3)</code></p><p>仔细观察这两类 API　的使用方式就可以看出差别：使用 expect 时只需将待测结果包裹进 <code>expect()</code> 函数便可进行链式调用，而使用 should 语法时则只需调用 <code>should()</code> 方法就可直接在待测结果上进行链式调用，其原理也很明显：调用<code>should()</code> 函数后在对象的原型上添加了 <code>should()</code> 方法的定义。</p><h4 id="jest" tabindex="-1"><a class="header-anchor" href="#jest" aria-hidden="true">#</a> Jest</h4><p>Jest 风格的 API 与 Chai 的 expect 语法类似，但是不提供链式调用，而是直接调用一个方法进行断言：</p><p>js</p><p>复制代码</p><p><code>expect(2 + 2).toBe(4) expect(&#39;How time flies&#39;).toContain(&#39;time&#39;) expect({a: 1}).not.toEqual({b: 2})</code></p>',19),b=e("code",null,"toBe()",-1),v=e("code",null,"toEqual",-1),_=e("code",null,"toBe",-1),y=e("code",null,"toEqul",-1),k=e("code",null,"toContain",-1),j={href:"https://jestjs.io/docs/expect",title:"https://jestjs.io/docs/expect",target:"_blank",rel:"noopener noreferrer"},x=s('<h3 id="使用-jest" tabindex="-1"><a class="header-anchor" href="#使用-jest" aria-hidden="true">#</a> 使用 Jest</h3><p>通过对单元测试最基本的步骤，即断言的介绍，我们了解了三种断言风格及相应的 API，在具备该编写单元测试的基本能力之后，我们来正式地学习如何使用自动化测试工具来进行单元测试，以 Jest 为例。</p><p>Jest 除了是一种断言风格之外，还是一个用于单元测试的测试框架，具备运行测试脚本的能力。它对普通的 JS 项目无需配置，开箱即用，同时支持快照测试、并行测试等优秀能力。</p><p>我们来尝试一下使用 Jest 进行单元测试。首先安装 Jest：</p><p>复制代码</p><p><code>npm install jest -D</code></p><p>安装完毕后，我们新建一个 <code>__tests__</code> 目录，然后创建一个 <code>sum.spec.js</code> 文件。默认情况下当运行测试时 Jest 会自动搜索并运行 <code>__tests__</code> 目录下的所有 <code>.js</code>, <code>.jsx</code>, <code>.ts</code> 文件和根目录下所有带有 <code>.test</code> or <code>.spec</code> 后缀的文件，所以我们不必手动设置测试文件的位置。</p><p>在 <code>sum.spec.js</code> 文件下我们可以输入以下测试代码：</p><p>js</p><p>复制代码</p><p><code>function sum(a, b) { return a + b } describe(&quot;sum&quot;, () =&gt; { test(&quot;输入 1 和 2，输出 3&quot;, () =&gt; { expect(sum(1, 2)).toBe(3) }) })</code></p><p>写好测试代码之后，输入以下命令就可以启动 Jest 来运行测试：</p><p>复制代码</p><p><code>npx jest</code></p><p>测试运行完毕后，Jest 就会在控制台输出以下内容表明测试通过：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6e7af2027df54bcdaef1da88d8cead80~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="image.png"></p><p>OK，一个超级简单的单元测试就完成了！</p><p>我们来详细介绍一下测试代码中使用到的函数：</p><h3 id="用于组织测试代码的-describe-和-test" tabindex="-1"><a class="header-anchor" href="#用于组织测试代码的-describe-和-test" aria-hidden="true">#</a> 用于组织测试代码的 <code>describe()</code> 和 <code>test()</code></h3><p>第一个是 <code>test()</code> 方法，用于声明一个测试用例（test case，可直接称为一个测试，即 test）。我们在写单元测试时基本上就是以测试用例为单位来组织测试，它的第一个参数接受一个字符串，用于描述这个测试用例的内容，这里我们以“输入xx，输出xx”的格式来描述这个测试用例，这样可以清晰地表明这个测试用例的意图。</p><p><code>test()</code> 方法的第二个参数是一个函数，包含了这个测试用例的主体内容，即断言。一个测试用例可以包含多个断言，但是所断言的内容应该符合这个测试用例的意图。</p><p><code>test()</code> 方法还接收一个可选的 timeout 参数，用以指定测试的超时时间，默认是 5 秒。</p><p><code>test()</code> 方法还有一个别名：<code>It()</code>，如果使用 <code>It()</code> 来描述测试用例可以采用更符合自然语言的语法，比如：</p><p>scss</p><p>复制代码</p><p><code>It(&quot;should return the correct result&quot;, () =&gt; { expect(sum(1, 2)).toBe(3) expect(sum(2, 4)).toBe(6) expect(sum(10, 100)).toBe(110) })</code></p><p><code>describe()</code> 方法可以组织一个或多个测试用例，将多个相关的测试组合成一个块，这种块叫作测试套件（test suite）。使用 <code>describe()</code> 来组织测试用例是一个推荐的写法，可以将测试内容与其他内容隔离，更有利于维护。</p><p><code>describe()</code> 方法可以嵌套使用，比如可以像这样（来自官网示例）：</p><p>js</p><p>复制代码</p><p><code>describe(&#39;binaryStringToNumber&#39;, () =&gt; { describe(&#39;given an invalid binary string&#39;, () =&gt; { test(&#39;composed of non-numbers throws CustomError&#39;, () =&gt; { expect(() =&gt; binaryStringToNumber(&#39;abc&#39;)).toThrowError(CustomError); }); test(&#39;with extra whitespace throws CustomError&#39;, () =&gt; { expect(() =&gt; binaryStringToNumber(&#39; 100&#39;)).toThrowError(CustomError); }); }); describe(&#39;given a valid binary string&#39;, () =&gt; { test(&#39;returns the correct number&#39;, () =&gt; { expect(binaryStringToNumber(&#39;100&#39;)).toBe(4); }); }); });</code></p><p>嵌套的 <code>describe()</code> 块允许我们对测试用例进行更细粒度的分配和组织。当然，如果你不喜欢或不习惯用 <code>describe()</code> 也是可以的，你可以直接在顶层上下文中使用 <code>test()</code> 方法，Jest 会自动为其包裹一个测试套件。</p><p>到此为止，用于组织编写测试代码最常用的两个函数：<code>describe()</code>、<code>test() / It()</code> 就介绍到这里了。此外，使用这两个函数时还支持使用 <code>skip</code>、<code>only</code> 等扩展方法来跳过或在某些条件下跳过或过滤测试套件和测试用例的运行：</p><p>scss</p><p>复制代码</p><p><code>test.skip(&quot;跳过这个测试&quot;, () =&gt; { expect(sum(1, 2)).toBe(3) }) test.only(&quot;只允许这个测试&quot;, () =&gt; { expect(sum(1, 2)).toBe(3) })</code></p>',36),q={href:"https://jestjs.io/zh-Hans/docs/api#%E6%96%B9%E6%B3%95",title:"https://jestjs.io/zh-Hans/docs/api#%E6%96%B9%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},T=s('<p>看到这里，你可能会问，<code>describe()</code>、<code>test()</code> 这些函数在使用之前不需要先引入吗？答案是不用，Jest 在执行测试代码之前会自动将这些全局 API 注入到全局上下文中，可以直接使用，不必手动引入。如果你更想要手动引入，可以新建一个 Jest 的配置文件，将 <code>injectGlobals</code> 字段的值置为 false 即可关闭全局注入。</p><h3 id="钩子函数" tabindex="-1"><a class="header-anchor" href="#钩子函数" aria-hidden="true">#</a> 钩子函数</h3><p>当编写的测试代码较复杂，包含很多重复的如初始化的操作时，我们可以将这些重复的内容拆解（tear down）出来，放到钩子函数中执行。一个测试文件、测试套件和测试用例的执行也是有生命周期的，钩子函数将这些生命周期拆分为执行前和执行后两个阶段。Jest 提供了四个钩子函数允许使用者在这些生命周期中进行一些自定义行为。</p><p><code>beforeAll()</code> 和 <code>afterAll()</code> 允许使用者注册一个回调，该回调会在当前上下文中的所有测试运行之前或之后被调用一次。</p><p>比如如果将 <code>beforeAll()</code> 放在顶层上下文中调用：</p><p>js</p><p>复制代码</p><p><code>beforeAll(() =&gt; { console.log(1) }) describe(&quot;sum1&quot;, () =&gt; { test(&quot;测试1&quot;, () =&gt; { expect(sum(1, 2)).toBe(3) }) test(&quot;测试2&quot;, () =&gt; { expect(sum(1, 2)).toBe(3) }) }) describe(&quot;sum2&quot;, () =&gt; { test(&quot;测试3&quot;, () =&gt; { expect(sum(1, 2)).toBe(3) }) test(&quot;测试4&quot;, () =&gt; { expect(sum(1, 2)).toBe(3) }) })</code></p><p>则 <code>console.log(1)</code> 语句只会在两个套件内的测试执行前执行一次。<code>afterAll()</code> 也是同理。</p><p>而如果将 <code>beforeAll()</code> 放到测试套件内执行：</p><p>scss</p><p>复制代码</p><p><code>describe(&quot;sum1&quot;, () =&gt; { test(&quot;测试1&quot;, () =&gt; { expect(sum(1, 2)).toBe(3) }) test(&quot;测试2&quot;, () =&gt; { expect(sum(1, 2)).toBe(3) }) }) describe(&quot;sum2&quot;, () =&gt; { beforeAll(() =&gt; { console.log(1) }) test(&quot;测试3&quot;, () =&gt; { expect(sum(1, 2)).toBe(3) }) test(&quot;测试4&quot;, () =&gt; { expect(sum(1, 2)).toBe(3) }) })</code></p><p>则 <code>console.log(1)</code> 语句只会在 sum2 套件内的测试执行前执行一次。</p><p><code>beforeEach()</code> 和 <code>afterEach()</code> 所注册的回调会在当前上下文中的每个测试运行之前或之后被调用一次。注意与 <code>beforeAll()</code> 和 <code>afterAll()</code> 的区别，前者是运行每个测试前后执行一次，后者是在运行所有测试前后执行一次。</p><p>这四个钩子函数是我们编写测试代码时非常常用的函数了，一些模拟、初始化和清除状态的逻辑我们都会放到钩子函数中进行。你可能会问，如果测试文件之间也包含一些重复的逻辑时要怎么处理呢？</p><p>Jest 允许我们编写一个在每个测试文件的测试代码运行之前运行的 setup file 进行跨文件的配置。我们需要先新建一个 setup file，比如在根目录下创建一个 <code>jest-setup.js</code> 文件，输入以下内容：</p><p>js</p><p>复制代码</p><p><code>beforeAll(() =&gt; { console.log(1) })</code></p><p>接着在根目录下新建一个 Jest 的配置文件 <code>jest.config.js</code>，输入以下内容：</p><p>js</p><p>复制代码</p><p><code>/** @type {import(&#39;jest&#39;).Config} */ module.exports = { setupFilesAfterEnv: [&#39;&lt;rootDir&gt;/jest-setup.js&#39;], }</code></p><p><code>setupFilesAfterEnv</code> 字段用于指定一个 setup file 数组的路径，这些文件会在 Jest 的执行环境（包括 <code>describe()</code>、钩子函数等全局 API 的初始化）安装之后、测试代码运行之前执行。</p><hr><p>有关使用 Jest 进行单元测试的两个基础知识就介绍到这里了，在开始接下来的重点内容之前，我们来聊聊 Jest 这个测试框架本身。</p><p>通过以上几个示例，我们算是小小地入门了 Jest 的使用，充分体会到了 Jest 的”无需配置“的妙处，即安装之后即可开始编写测试代码，并且无需手动引入相关 API，测试代码写完之后启动一行命令即可开始运行测试，不得不说真的很方便。</p><p>但是，我们刚才所展示的仅仅是一个非常简单的测试一个 JS 函数的场景，要是应用场景更复杂一点，比如对 Web 应用进行单元测试，Jest 可能就不会像现在这样方便了。为什么这么说呢？</p><p>思考一下，Jest 是如何运行测试文件的？自然是用 Node 运行的，详细点说，就是在注入 <code>describ()</code>、<code>beforeAll</code> 等全局 API 后，就使用 Node 来运行测试代码，处理所导入的依赖的路径解析和加载。这时如果导入的是一个 vue 文件，测试就会立即失败，因为 Jest 不认识这个类型的文件。甚至如果直接使用 TypeScript 来编写测试代码，也会导致测试失败。这就意味着，如果是 <code>.ts</code>、<code>.vue</code>、<code>.jsx</code> 类型的文件 Jest 就无法先天支持了，因为它只认识 JS 语法。要想支持其他语法的运行，就需要使用一些 transformer 进行转换， 将 <code>.ts</code>、<code>jsx</code> 等语法转换为标准 JS 语法，才能继续执行测试代码。</p><p>比如想让 Jest 能够加载、运行 <code>.ts</code>、<code>.vue</code> 格式的文件，就需要这样配置：</p><p>js</p><p>复制代码</p><p><code>// jest.config.js module.exports = { transform: { &#39;^.+\\\\.(j|t)sx?$&#39;: &#39;babel-jest&#39;, &#39;^.+\\\\.vue$&#39;: &#39;@vue/vue3-jest&#39; } }</code></p><p>我们使用 babel 来处理 Typescript 内容，将其中的类型注解删除掉，需要提前安装 <code>@babel/core</code>、<code>@babel/preset-env</code>、<code>@babel/preset-typescript</code> 这几个包并新建一个 <code>babel.config.js</code> 来配置 babel 的行为：</p><p>js</p><p>复制代码</p><p><code>// babel.config.js module.exports = { presets: [ &#39;@babel/preset-typescript&#39;, [&#39;@babel/preset-env&#39;, { targets: { node: &#39;current&#39; } }], ], }</code></p>',38),I={href:"https://github.com/vuejs/vue-jest",title:"https://github.com/vuejs/vue-jest",target:"_blank",rel:"noopener noreferrer"},A=e("code",null,"vue-jest",-1),B=e("p",null,"此外，Jest 还未支持 ESM 规范，仍处于实验阶段，也需要使用 babel 降级。所以，如果想要使用 Jest 来测试一个 Web 应用，需要进行更多配置。另外，由于 Jest 的测试和构建工具的开发、构建是在两个不同的转换管道中进行的，需要使用两个不同的配置文件，这也无形中加大了项目前期搭建的负担。",-1),w={href:"https://vitest.dev/",title:"https://vitest.dev/",target:"_blank",rel:"noopener noreferrer"},P=s('<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f216e6eee8c4f38a7776decf8c1a0ca~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="image.png"></p><p>Vitest 是一个由 Vite 提供支持的极速单元测试框架，它底层依赖了 Vite，借助于 Vite 强大的能力，Vitest 支持了以下这些优秀特性：</p><ul><li><p>与 Vite 共享同一套配置！如果你的项目也是选择 Vite 作为构建工具，那么你可以与 Vite 共享同一套配置。这是因为 Vitest 同样使用 Vite 对你的测试代码及其引入的所有模块使用 Vite 的解析器、加载器、转换器进行处理，这意味着当 Vitest 运行时你的 Vite 配置文件中配置的除用于生产环境以外的所有插件都会被调用并发挥作用，你的测试环境会和开发环境一样使用同一个运行管道，而不需要像 Jest 一样进行额外的配置！</p></li><li><p>真正的开箱即用，而且速度超快！借助 Esbuild 对 TypeScript、JSX 和 ESM 语法的天然支持，Vite 原生就具备处理这几类语法的能力，促使 Vitest 做到真正的开箱即用，并且速度超快！</p></li><li><p>测试的 HMR！Vite 的开发服务器在对模块进行加载、转换的过程中，会逐步构建出一个缓存转换结果、记录模块依赖关系等信息的模块图（Module Graph）。借助模块图，Vite 可以清晰地处理模块热更新的边界，确定进行更新的范围。而 Vitest 借助 Vite 的 HMR 能力，同样可以做到在修改源代码后重新运行依赖该源代码的测试文件，做到测试的 HMR。Vitest 在默认情况下会启动监听模式（watch mode），即自动进行 HMR，这对喜欢使用 TDD 的模式进行开发的同学来说无疑是个福音！</p></li></ul><p>除了以上三点通过 Vite 得到支持的优秀能力之外，Vitest 还具备以下几个功能：</p><ul><li><p>多线程运行测试文件。通过使用 Worker 线程尽可能多地并发运行测试文件，使多个测试同时运行。同时，Vitest 还隔离了每个测试文件的运行环境，使某一个文件的状态不会对其他文件造成影响。</p></li><li><p>支持多数测试框架的常用功能。例如快照测试、模拟（Mock）、测试覆盖率、并发运行测试和模拟 DOM 等功能。</p></li><li><p>兼容 Chai 和 Jest 的 API。内置 Chai 的断言 API 和 Jest 的大多数 API。</p></li></ul>',5),V=e("code",null,"create-vue",-1),C={href:"https://mp.weixin.qq.com/s/Ara_KWegpSRssIPz3Oddtw",title:"https://mp.weixin.qq.com/s/Ara_KWegpSRssIPz3Oddtw",target:"_blank",rel:"noopener noreferrer"},S=s('<h3 id="使用-vitest" tabindex="-1"><a class="header-anchor" href="#使用-vitest" aria-hidden="true">#</a> 使用 Vitest</h3><p>在介绍完 Vitest 的功能之后，我们来尝试一下它的基本使用。同样先安装 Vitest：</p><p>复制代码</p><p><code>npm install -D vitest</code></p><p>安装完毕后，我们来编写测试代码，同样对 sum 函数进行测试：</p><p>js</p><p>复制代码</p><p><code>import { describe, test, expect } from &quot;vitest&quot; function sum(a, b) { return a + b } describe(&quot;sum&quot;, () =&gt; { test(&quot;输入 1 和 2，输出 3&quot;, () =&gt; { expect(sum(1, 2)).toBe(3) }) })</code></p><p>由于 Vitest 在默认情况下不自动注入全局 API，因此我们需要手动引入 <code>describe()</code>、<code>test()</code> 等方法。当然，可以通过配置 globals 字段来开启自动注入，这里我们先不开启。</p><p>测试代码编写好后，运行以下命令启动 Vitest：</p><p>复制代码</p><p><code>npx vitest</code></p>',12),M={href:"https://cn.vitest.dev/config/#include",title:"https://cn.vitest.dev/config/#include",target:"_blank",rel:"noopener noreferrer"},E=s('<p>当控制台打印以下信息时说明测试通过：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/126333d58e6042d49acc2e56fcff7f6c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="image.png"></p><p>以上就是 Vitest 的基本使用了，关于 Vitest 的更多内容可以看下文的实战小节。现在我们来继续学习单元测试的常用功能，这部分是重点内容。</p><h3 id="测试异步代码" tabindex="-1"><a class="header-anchor" href="#测试异步代码" aria-hidden="true">#</a> 测试异步代码</h3><p>在真实的场景中测试异步代码是一件非常常见的事，比如测试后端 API，异步函数等等。由于异步代码的特殊性，在测试它们时需要做更多的工作。</p><p>比如我们要测试以下这个异步函数：</p><p>js</p><p>复制代码</p><p><code>async function hello() { return &quot;Hello World!&quot; }</code></p><p>要断言它返回了 &quot;Hello World!&quot; 字符串，如果按照测试同步函数的方式进行测试：</p><p>js</p><p>复制代码</p><p><code>test(&quot;hello&quot;, () =&gt; { expect(hello()).toBe(&quot;Hello World!&quot;) })</code></p><p>运行这个测试会直接报错：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c016a331d6c8451086529268ca8c79aa~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="image.png"></p><p>原因很简单，我们断言的并不是 &quot;Hello World!&quot; 这个字符串，而是这个函数返回的 Promise 对象。</p><p>知道了原因之后，我们可以很自然地进行改进：</p><p>js</p><p>复制代码</p><p><code>test(&quot;hello&quot;, async () =&gt; { const res = await hello() expect(res).toBe(&quot;Hello World!&quot;) })</code></p><p>我们改为将一个异步函数传入 <code>test()</code> 方法，该异步函数使用 await 关键字等待 hello 函数 resolve 并返回结果，接着就可以对其返回结果进行断言。</p><p>除了使用 await 等待异步函数调用完成之外，我们还可以使用 <code>resolves()</code> 和 <code>rejects()</code> 方法。使用方式如下：</p><p>js</p><p>复制代码</p><p><code>test(&quot;hello&quot;, async () =&gt; { await expect(hello()).resolves.toBe(&quot;Hello World!&quot;) })</code></p><p>可以看到，使用 <code>resolves()</code> 可以从 hellow 函数返回的 Promise 对象中提取所 resolve 的值，然后直接对该值进行断言。</p><p><code>rejects()</code> 方法的使用方式同理：</p><p>js</p><p>复制代码</p><p><code>async function hello() { throw new Error(&quot;Hello World!&quot;) } test(&quot;hello&quot;, async () =&gt; { await expect(hello()).rejects.toThrow(&quot;Hello World!&quot;) })</code></p><p>以上便是测试异步代码的两种方法，比较简单，相信你可以很快掌握。</p><h3 id="处理定时器" tabindex="-1"><a class="header-anchor" href="#处理定时器" aria-hidden="true">#</a> 处理定时器</h3><p>虽然定时器回调也算是异步代码的一种，但是它毕竟不返回 Promise，我们还需对其进行其他处理。</p><p>比如测试以下代码：</p><p>js</p><p>复制代码</p><p><code>let a = 1 function timer() { setTimeout(() =&gt; { a = 2 }, 3000) }</code></p><p>要断言调用 timer 函数会在 3 秒后将 a 的值置为 2，我们要怎么做呢？如果直接使用同步的方式，即：</p><p>js</p><p>复制代码</p><p><code>test(&quot;timer&quot;, () =&gt; { expect(a).toBe(1) timer() expect(a).toBe(2) })</code></p><p>运行结果自然是报错，因为第二个断言会在回调调用之前执行：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec358300fc1444bfb7ca90b35915cbbd~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="image.png"></p><p>（注：在这个示例中我们在对函数进行调用之前断言了 a 的初始状态，即第一个断言，这是为了保证在进行正式的断言之前待测对象的状态不会发生意外改变，确保正式的断言的结果是由我们的操作（这里是调用 timer 函数和）产生的，而非外界的干扰。你可以把这个步骤理解为一种<strong>控制变量</strong>的做法。）</p><p>要想做到断言定时器的操作结果，我们可以使用 vitest 模块导出的 vi 工具对象中的 <code>useFakeTimers()</code> 方法，该方法的作用顾名思义——使用假的定时器。当调用 <code>useFakeTimers()</code> 方法使用 fake timers 之后，所有对定时器的调用，包括 <code>setTimeout</code>、<code>setInterval</code>、<code>nextTick</code>、<code>setImmediate</code> ，所传入的回调都会被&quot;滞留&quot;在定时器队列中，得不到执行，即使达到了指定的 timeout 时间。需要手动调用 <code>vi.runAllTimers()</code> 或 <code>vi.advanceTimersByTime()</code> 等方法才可以执行这些回调。比如：</p><p>js</p><p>复制代码</p><p><code>test(&quot;timer&quot;, () =&gt; { vi.useFakeTimers() expect(a).toBe(1) timer() vi.runAllTimers() expect(a).toBe(2) vi.useRealTimers() })</code></p><p>调用了 <code>vi.useFakeTimers()</code> 使用 fake timers 之后，我们可以调用 <code>vi.runAllTimers()</code> 来运行所有处于队列中的定时器回调。另外，为了避免对其他测试造成影响，在测试的最后我们还需要调用 <code>vi.useRealTimers()</code> 恢复使用真实定时器。在实际场景中，我们可以选择在钩子函数中处理这些初始化、清除副作用的操作。</p><p>我们也可以使用 <code>vi.advanceTimersByTime()</code>，它可以只执行所传入的毫秒数以内对应的超时时间的回调：</p><p>js</p><p>复制代码</p><p><code>test(&quot;timer&quot;, () =&gt; { vi.useFakeTimers() expect(a).toBe(1) timer() vi.advanceTimersByTime(2000) expect(a).toBe(1) vi.advanceTimersByTime(3000) expect(a).toBe(2) vi.advanceTimersByTime(4000) expect(a).toBe(2) vi.useRealTimers() })</code></p>',53),L=e("code",null,"vi.useFakeTimers()",-1),D={href:"https://cn.vitest.dev/api/#vi-setsystemTime",title:"https://cn.vitest.dev/api/#vi-setsystemTime",target:"_blank",rel:"noopener noreferrer"},O=e("code",null,"vi.setSystemTime()",-1),J=s('<h3 id="模拟-mock" tabindex="-1"><a class="header-anchor" href="#模拟-mock" aria-hidden="true">#</a> 模拟（Mock）</h3><p>在真实的测试场景中，我们需要应付许多调用后端 API 的模块，由于调用这些接口需要发起网络请求，导致测试时间变相增长，降低测试效率，并且，我们做的也不是端到端测试，而是将待测对象与外界隔离的单元测试，不必发起真实的网络请求。另外，在单元测试下为了屏蔽其他模块，比如第三方模块，我们还需要避免对它们的调用，甚至伪造一个假的模块。更重要的是，很多时候我们还需要断言待测对象对其他模块或方法的调用，即进行监听。在这种情况下，模拟（Mock）就派上用场了。</p><p>模拟的方式，大致可以分为两种：stub（存根） 和 spy（监听）。</p><p>stub 会改变被模拟对象的实现，即伪造另一个版本来代替被模拟的对象。与之相反，spy 无需改变被模拟对象的实现，但是会监听对其的使用，如监听函数的调用次数、传入的参数等等。</p><p>我这里仅仅按照&quot;实现是否被更改&quot;来对模拟的方式进行分类，也有将模拟分为 mock、stub 和 fake 等等的分类，其实也不必纠结这几种分类和模拟方式之间的差异，大多数场合将它们统称为模拟（Mock）即可。</p><p>接下来我按照模拟函数、模拟模块的顺序来介绍模拟的具体使用。</p><h4 id="模拟函数" tabindex="-1"><a class="header-anchor" href="#模拟函数" aria-hidden="true">#</a> 模拟函数</h4><p>比如现在我们要监听对 obj 对象的 sum 方法的调用，获取对该方法的调用次数、参数、返回值等信息，要怎么做呢：</p><p>js</p><p>复制代码</p><p><code>const obj = { sum: (a: number, b: number) =&gt; { return a + b } }</code></p><p>可以使用 <code>vi.spyOn()</code> 方法：</p><p>js</p><p>复制代码</p><p><code>test(&quot;spy&quot;, () =&gt; { vi.spyOn(obj, &quot;sum&quot;) obj.sum(1, 2) expect(obj.sum).toBeCalledTimes(1) expect(obj.sum).toBeCalledWith(1, 2) expect(obj.sum).toHaveReturnedWith(3) vi.mocked(obj.sum).mockClear() })</code></p><p><code>vi.spyOn()</code> 可以监听一个对象上的方法。在调用被监听的函数之后，我们就可以通过 <code>toBeCalledTimes()</code>、<code>toBeCalledWith()</code> 等等这类匹配器来断言调用信息。</p><p><code>vi.spyOn()</code> 返回一个 SpyInstance 类型的对象，我们也可以直接在这个对象上进行断言，比如：</p><p>js</p><p>复制代码</p><p><code>test(&quot;spy&quot;, () =&gt; { const spy = vi.spyOn(obj, &quot;sum&quot;) obj.sum(1, 2) expect(spy).toHaveBeenCalledOnce() expect(spy).toHaveBeenNthCalledWith(1, 1, 2) expect(spy).toHaveReturnedWith(3) spy.mockClear() })</code></p>',20),H={href:"https://cn.vitest.dev/api/#mockclear",title:"https://cn.vitest.dev/api/#mockclear",target:"_blank",rel:"noopener noreferrer"},W=e("code",null,"mockClear()",-1),R=e("code",null,"vi.useRealTimers()",-1),F={href:"https://cn.vitest.dev/api/#mockreset",title:"https://cn.vitest.dev/api/#mockreset",target:"_blank",rel:"noopener noreferrer"},N=e("code",null,"mockReset()",-1),z={href:"https://cn.vitest.dev/api/#mockrestore",title:"https://cn.vitest.dev/api/#mockrestore",target:"_blank",rel:"noopener noreferrer"},U=e("code",null,"mockRestore()",-1),Q=e("code",null,"mockClear()",-1),G=e("code",null,"mockClear()",-1),$=e("code",null,"mockReset()",-1),K={href:"https://cn.vitest.dev/api/#vi-clearallmocks",title:"https://cn.vitest.dev/api/#vi-clearallmocks",target:"_blank",rel:"noopener noreferrer"},Y=e("code",null,"vi.clearAllMocks()",-1),X={href:"https://cn.vitest.dev/api/#vi-resetallmocks",title:"https://cn.vitest.dev/api/#vi-resetallmocks",target:"_blank",rel:"noopener noreferrer"},Z=e("code",null,"vi.resetAllMocks()",-1),ee={href:"https://cn.vitest.dev/api/#vi-restoreallmocks",title:"https://cn.vitest.dev/api/#vi-restoreallmocks",target:"_blank",rel:"noopener noreferrer"},te=e("code",null,"vi.restoreAllMocks()",-1),oe=s('<p><code>mockClear()</code> 是 SpyInstance 和 MockInstance 类型上的方法，所以我们可以直接在 <code>vi.spyOn()</code> 返回的对象上调用它，如果我们想直接在原函数上调用该方法，像下面这样：</p><p>js</p><p>复制代码</p><p><code>obj.sum.mockClear()</code></p><p>如果你使用的是 JS，这可以行得通，但是如果你使用的是 TS 的话，就会直接报错了。在这种情况下，可以使用 <code>vi.mocked()</code> 来为被模拟的对象提供类型支持：</p><p>js</p><p>复制代码</p><p><code>vi.mocked(obj.sum).mockClear()</code></p><p>如果我们要模拟另一个模块导出的函数要怎么做呢？比如：</p><p>js</p><p>复制代码</p><p><code>// math.ts export function sum(a: number, b: number) { return a + b }</code></p><p>这时候我们可以以命名空间的形式来导入 math 模块：</p><p>js</p><p>复制代码</p><p><code>import * as math from &quot;./math&quot; test(&quot;spy&quot;, () =&gt; { vi.spyOn(math, &quot;sum&quot;) math.sum(1, 2) expect(math.sum).toBeCalledTimes(1) expect(math.sum).toBeCalledWith(1, 2) expect(math.sum).toHaveReturnedWith(3) vi.mocked(math.sum).mockClear() })</code></p><p>可以看到十分简单粗暴。看到这里你可能会有疑问：只能监听对象上的方法吗，不能直接监听函数吗？</p><p>据我所知，好像不能。如果真想直接监听函数的话，可以这样做：</p><p>js</p><p>复制代码</p><p><code>import { sum } from &quot;./math&quot; test(&quot;spy&quot;, () =&gt; { const math = { sum } vi.spyOn(math, &quot;sum&quot;) math.sum(1, 2) expect(math.sum).toBeCalledTimes(1) expect(math.sum).toBeCalledWith(1, 2) expect(math.sum).toHaveReturnedWith(3) vi.mocked(math.sum).mockClear() })</code></p><p>直接将它放到一个对象上就行了。</p><p>学完了怎么监听函数，我们来看看怎么模拟一个函数。比如我们想将 sum 函数模拟成以下这样：</p><p>js</p><p>复制代码</p><p><code>function sum(a: number, b: number) { return a + b + 100 }</code></p><p>可以直接在 SpyInstance 上调用 <code>mockImplementation()</code> 方法：</p><p>js</p><p>复制代码</p><p><code>test(&quot;mock&quot;, () =&gt; { vi.spyOn(obj, &quot;sum&quot;).mockImplementation((a, b) =&gt; a + b + 100) obj.sum(1, 2) expect(obj.sum).toHaveReturnedWith(103) vi.mocked(obj.sum).mockRestore() })</code></p><p><code>mockImplementation()</code> 方法可以直接在 SpyInstance 和 MockInstance（继承了 SpyInstance）上使用，用于模拟被模拟对象的实现。由于我们更改了 sum 的内部实现，因此测试完毕后需要调用 <code>mockRestore()</code> 将其还原。</p><h4 id="模拟模块" tabindex="-1"><a class="header-anchor" href="#模拟模块" aria-hidden="true">#</a> 模拟模块</h4><p>介绍完了如何监听和模拟函数，我们来看看如何模拟模块。</p><p>模拟模块需要使用 <code>vi.mock()</code> 方法，比如要模拟刚刚的 math 模块，我们可以这样做：</p><p>js</p><p>复制代码</p><p><code>import { sum } from &quot;./math&quot; vi.mock(&#39;./math&#39;) test(&quot;mock&quot;, () =&gt; { sum(1, 2) expect(sum).toHaveBeenCalledOnce() expect(sum).toHaveBeenCalledWith(1, 2) vi.mocked(sum).mockRestore() })</code></p><p>我们将要模拟的模块的路径传入 <code>vi.mock()</code> 方法后，该方法会自动模拟被模拟模块的所有导出内容，所以当我们调用了该模块的某一个导出函数后，我们就可以直接对其进行断言。</p><p>我们也可以传入一个工厂函数来定义该模块要导出什么内容，比如：</p><p>typescript</p><p>复制代码</p><p><code>vi.mock(&#39;./math&#39;, () =&gt; ({ sum: (a: number, b: number) =&gt; a + b + 100 }))</code></p><p>我们模拟了 math 模块的导出内容，其返回了一个新的 sum 方法。但是运行测试发现测试失败了：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9e97a3e86764e9291221c36f306e196~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="image.png"></p><p>这是因为我们仅仅模拟了 math 模块，而没有模拟它导出的 sum 函数。我们来学习模拟函数的另一种方法：<code>vi.fn()</code>。</p><p>调用 <code>vi.fn()</code> 会返回一个空的 Mock 类型的模拟函数，Mock 也继承了 SpyInstance，我们可以直接对该函数调用 <code>toHaveBeenCalledOnce()</code> 等匹配器。直接调用模块函数会返回 undefined。我们可以传入一个函数到 <code>vi.fn()</code> 中来模拟其返回的模拟函数的实现。以上代码可以修改为：</p><p>js</p><p>复制代码</p><p><code>vi.mock(&#39;./math&#39;, () =&gt; ({ sum: vi.fn((a: number, b: number) =&gt; a + b + 100) }))</code></p><p>运行测试后显示测试通过，说明我们模拟成功了。</p><p>如果我们只想模拟模块导出的某个特定函数，其他导出内容维持原样，可以这样做：</p><p>js</p><p>复制代码</p><p><code>import { sum } from &quot;./math&quot; import * as Math from &quot;./math&quot; vi.mock(&#39;./math&#39;, async () =&gt; ({ ...await vi.importActual&lt;typeof Math&gt;(&#39;./math&#39;), sum: vi.fn((a: number, b: number) =&gt; a + b + 100) }))</code></p><p><code>vi.importActual()</code> 可以原封不动地导入模块的所有导出内容。注意当使用 TS 时，记得传入类型。</p><p>除了传入一个工厂函数外，我们还可以将要模拟的导出内容放到一个 <code>__mocks__</code> 目录里，这样当调用 <code>vi.mock()</code> 时如果 <code>__mocks__</code> 目录下存在同名文件，所有导入都会返回其导出。比如在 <code>__tests__</code> 目录下新建一个 <code>__mocks__</code> 目录，然后创建一个 <code>math.ts</code> 文件，内容如下：</p><p>js</p><p>复制代码</p><p><code>import { vi } from &quot;vitest&quot; export const sum = vi.fn((a: number, b: number) =&gt; a + b + 100)</code></p><p>然后将测试的模拟代码修改为：</p><p>js</p><p>复制代码</p><p><code>vi.mock(&#39;./math&#39;)</code></p><p>重新运行测试，测试会通过。</p><p>注意，对 <code>vi.mock()</code> 的调用会被自动提升到顶层上下文，即使在测试套件或测试内调用它也是如此。所以如果你只是想在某个套件或测试内模拟模块，可以使用 <code>vi.importMock()</code> 方法：</p><p>js</p><p>复制代码</p><p><code>import * as Math from &quot;./math&quot; test(&quot;mock&quot;, async () =&gt; { const { sum } = await vi.importMock&lt;typeof Math&gt;(&#39;./math&#39;) sum(1, 2) expect(sum).toHaveBeenCalledOnce() expect(sum).toHaveBeenCalledWith(1, 2) sum.mockRestore() })</code></p><p>该方法使用方式与 <code>vi.mock()</code> 相同，只是将模拟的行为定义在测试套件或测试内而已。另外，调用该方法后会返回原函数类型和 Mock 类型的交叉类型，所以可以不用使用 <code>vi.mocked()</code> 就可以获取类型信息。</p><h4 id="模拟全局变量" tabindex="-1"><a class="header-anchor" href="#模拟全局变量" aria-hidden="true">#</a> 模拟全局变量</h4><p>模拟全局变量的方式比较简单，使用 <code>vi.stubGlobal()</code> 就可以。这里直接贴出文档示例：</p><p>js</p><p>复制代码</p><p><code>import { vi } from &#39;vitest&#39; const IntersectionObserverMock = vi.fn(() =&gt; ({ disconnect: vi.fn(), observe: vi.fn(), takeRecords: vi.fn(), unobserve: vi.fn(), })) vi.stubGlobal(&#39;IntersectionObserver&#39;, IntersectionObserverMock)</code></p><h3 id="测试覆盖率" tabindex="-1"><a class="header-anchor" href="#测试覆盖率" aria-hidden="true">#</a> 测试覆盖率</h3><p>很多人在写完单元测试后会想知道自己写的测试是否已经够多了，这时候他们会看测试的覆盖率是否够高。</p>',76),pe={href:"https://github.com/bcoe/c8",title:"https://github.com/bcoe/c8",target:"_blank",rel:"noopener noreferrer"},se={href:"https://istanbul.js.org/",title:"https://istanbul.js.org/",target:"_blank",rel:"noopener noreferrer"},re=s('<p>Vitest 默认情况下使用 c8，我们需要先安装对应的包：</p><p>css</p><p>复制代码</p><p><code>npm i -D @vitest/coverage-c8</code></p><p>然后更新测试代码，这次我们还是来测试 sum 函数：</p><p>js</p><p>复制代码</p><p><code>import { test, expect } from &quot;vitest&quot; import { sum } from &quot;../src/math&quot; test(&quot;sum&quot;, () =&gt; { expect(sum(1, 2)).toBe(3) })</code></p><p>然后在命令行中输入以下命令：</p><p>arduino</p><p>复制代码</p><p><code>npx vitest run --coverage</code></p><p>然后控制台就输出了测试覆盖率的报告：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3da55f8fbc24318a1a606ee716fc064~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="image.png"></p><p>以上这四个参数的含义分别是：语句覆盖率（statements）、分支覆盖率、函数覆盖率和行覆盖率。同时根目录下还生成了一个 coverage 目录，记录了更详细的统计信息。</p><p>使用 istanbul 的方式也是差不多，安装对应的包就行了，不再赘述了。</p><p>istanbul 的原理是把源代码进行转译，插入用于记录某个函数、语句被调用次数等记录的代码，然后将记录到的信息存储到某个变量中，测试完毕后就可以通过这个变量获取统计到的信息，生成覆盖率报告。而 c8 是直接使用 V8 引擎内置的覆盖率统计，测试完成后直接生成报告。</p><p>在实际项目中为了保证程序员们写单测的数量或质量，会限定测试覆盖率的阈值，然后在代码提交前或者在集成管道中检查测试覆盖率是否达到这个阈值。我们来尝试一下。</p><p>如果你使用的是 Vite，那么你可以直接在 <code>vite.config.ts</code> 里进行配置：</p><p>js</p><p>复制代码</p><p><code>/// &lt;reference types=&quot;vitest&quot; /&gt; import {defineConfig} from &quot;vite&quot; export default defineConfig({ // 其它配置项... test: { coverage: { lines: 80, functions: 80, branches: 80, statements: 80 } }, })</code></p><p>我们将 80% 作为阈值。为了方便演示，我们来修改 sum 函数的实现：</p><p>typescript</p><p>复制代码</p><p><code>export function sum(a: number, b: number) { if(a &gt; 100) { return 100 } return a + b }</code></p><p>然后同样运行刚才那个命令运行测试，覆盖率报告如下：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42697a45e4fb4ce4af5ab8fe8ce0dff9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="image.png"></p><p>由于未达到阈值，控制台报错，然后我们就可以观察哪部分代码的分支或行等没有被覆盖到，为其补充测试用例。这种根据程序的内部实现，如分支、函数等创建测试用例进行测试的方式，其实就属于白盒测试。如果要判断黑盒测试的覆盖率，可以通过判断所使用的测试用例所对应的等价类占总的等价类（包括有效等价类和无效等价类）及边界值的比例来得出。感兴趣的朋友可以自行查阅相关资料。</p><p>关于如何输出测试覆盖率并做覆盖率检查的使用就介绍到这里了。测试覆盖率作为检查单元测试是否充分的手段，在一定程度上确实是一个有效的工具。但是，高测试覆盖率不等于高的测试质量，在很多情况下高测试覆盖率其实是一个很容易达到的数字。比如我们可以把测试用例改成这样：</p><p>js</p><p>复制代码</p><p><code>test(&quot;sum&quot;, () =&gt; { expect(sum(1, 2)).not.toBe(100) })</code></p><p>以上这个测试用例是：输入 1 和 2，不会输出 100。测试覆盖率达到了 100%，超额完成了任务要求，但是这个测试的质量就真的很高么？答案显然是否定的，因为这个测试用例并没有任何意义，我们应该断言它返回了正确的结果（即 3），而不是断言它返回了其它无关的数字，除非进行穷举，断言它不等于除 3 以外的所有数字，但这显然是不可能的。</p><p>很多人写测试时以高覆盖率为目标，会以覆盖率达到 100% 为傲，但这并没有什么用，你应该做的、思考的，是如何设计出高质量的测试用例，而不是盯着一个数字疯狂堆用例。很多情况下，即使达到了 100% 也不能说明程序就没有问题，正如文章开头说的那样，软件测试是检验其是否满足规定的需求，或者找出程序中潜在的错误。</p>',35),ce={href:"https://www.martinfowler.com/bliki/TestCoverage.html",title:"https://www.martinfowler.com/bliki/TestCoverage.html",target:"_blank",rel:"noopener noreferrer"},ie=e("ul",null,[e("li",null,[e("p",null,"你很少在生产中碰到 bug；")]),e("li",null,[e("p",null,"当修改代码时你很少会犹豫、害怕它会导致生产事故。")])],-1),ae=e("p",null,"关于测试覆盖率我要说的就是这些了，希望能提高你对测试覆盖率的认知。",-1),ne=e("h3",{id:"配置类浏览器环境",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#配置类浏览器环境","aria-hidden":"true"},"#"),t(" 配置类浏览器环境")],-1),de=e("p",null,"Vitest、Jest 等单元测试框架由于是运行在 Node 环境中的，如果我们要测试一个 Web 应用，进行组件测试，就需要有类浏览器环境，以支持 DOM API、本地存储、Cookie 等浏览器特性。",-1),le={href:"https://github.com/jsdom/jsdom",title:"https://github.com/jsdom/jsdom",target:"_blank",rel:"noopener noreferrer"},ue={href:"https://github.com/capricorn86/happy-dom",title:"https://github.com/capricorn86/happy-dom",target:"_blank",rel:"noopener noreferrer"},he={href:"https://edge-runtime.vercel.app/packages/vm",title:"https://edge-runtime.vercel.app/packages/vm",target:"_blank",rel:"noopener noreferrer"},me=e("p",null,"jsdom 是一个用于 Node 环境的对许多 Web 标准的 JS 实现，它的使用示例如下：",-1),ge=e("p",null,"js",-1),fe=e("p",null,"复制代码",-1),be=e("p",null,[e("code",null,'const jsdom = require("jsdom") const { JSDOM } = jsdom const dom = new JSDOM(`<!DOCTYPE html><p>Hello world</p>`) console.log(dom.window.document.querySelector("p").textContent)')],-1),ve=e("p",null,[t("可以看到，只要将 HTML 字符串传入 JSDOM 构造函数中，就可以在返回的实例上使用许多包括 "),e("code",null,"querySelector()"),t(" 等众多 Web API。")],-1),_e=e("code",null,"getBoundingClientRects()",-1),ye={href:"https://www.cypress.io/",title:"https://www.cypress.io/",target:"_blank",rel:"noopener noreferrer"},ke=s("<p>Happy DOM 与 jsdom 一样实现了 Web 浏览器的诸多特性，相比于后者，它拥有更高的性能，但实现的特性要少一点。</p><p>我们来使用 jsdom 来配置类浏览器环境，首先需要安装 jsdom：</p><p>复制代码</p><p><code>npm -D install jsdom</code></p><p>接着修改配置：</p><p>css</p><p>复制代码</p><p><code>// vite.config.ts test: { environment: &quot;jsdom&quot;, },</code></p><p>就可以在全局使用 Web API 了：</p><p>dart</p><p>复制代码</p><p><code>test(&quot;dom&quot;, () =&gt; { const div = document.createElement(&#39;div&#39;) div.className = &#39;dom&#39; document.body.appendChild(div) expect(document.querySelector(&#39;.dom&#39;)).toBe(div) })</code></p>",12),je=e("code",null,"0.23.0",-1),xe=e("code",null,"vitest-environment-${name}",-1),qe=e("code",null,"populateGlobal",-1),Te={href:"https://cn.vitest.dev/guide/environment.html",title:"https://cn.vitest.dev/guide/environment.html",target:"_blank",rel:"noopener noreferrer"},Ie=e("h4",{id:"使用-jest-dom",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#使用-jest-dom","aria-hidden":"true"},"#"),t(" 使用 "),e("code",null,"jest-dom")],-1),Ae=e("p",null,"当在 Web 环境下对 DOM 进行测试时，我们会发现对 DOM 结点进行断言会比较麻烦，比如断言其是否有某个属性、是否可见，一个按钮是否被禁用，输入框是否聚焦等等，我们通常需要调用多个 DOM API 逐步提取出想要的属性或值等才能达到我们的目的。",-1),Be={href:"https://github.com/testing-library/jest-dom",title:"https://github.com/testing-library/jest-dom",target:"_blank",rel:"noopener noreferrer"},we=e("code",null,"jest-dom",-1),Pe=s('<p>首先进行安装：</p><p>dart</p><p>复制代码</p><p><code>npm install -D @testing-library/jest-dom</code></p><p>安装完毕后我们需要应用这些匹配器，可以选择在 setup file 中进行这个操作：</p><p>arduino</p><p>复制代码</p><p><code>// __tests__/vitest-setup.ts import &#39;@testing-library/jest-dom&#39;</code></p><p>注意，引入这个包时它会在内部使用 <code>expect.extend()</code> 方法来应用这些自定义匹配器，这意味着 <code>expect</code> 必须是一个全局 API。Vitest 默认情况下关闭全局 API 的注入，我们可以手动开启，并配置 setup file 的路径：</p><p>javascript</p><p>复制代码</p><p><code>/// &lt;reference types=&quot;vitest&quot; /&gt; import path from &quot;path&quot; import { defineConfig } from &quot;vite&quot; export default defineConfig({ // 其它配置项... test: { globals: true, environment: &quot;jsdom&quot;, setupFiles: path.resolve(__dirname, &#39;__tests__/vitest-setup&#39;), }, })</code></p><p>如果你不喜欢开启全局注入，可以将 setup file 的内容改成这样：</p><p>javascript</p><p>复制代码</p><p><code>// __tests__/vitest-setup.ts import matchers from &#39;@testing-library/jest-dom/matchers&#39; import { expect } from &#39;vitest&#39; expect.extend(matchers)</code></p><p>现在就能使用 jest-dom 提供的匹配器了：</p><p>javascript</p><p>复制代码</p><p><code>test(&quot;dom&quot;, () =&gt; { const div = document.createElement(&#39;div&#39;) div.className = &#39;dom&#39; document.body.appendChild(div) expect(div).toBeInTheDocument() })</code></p><p>jest-dom 提供的匹配器数量不多，只有二十几个，建议你到仓库把它们都看一遍熟悉一下。</p><h3 id="快照测试" tabindex="-1"><a class="header-anchor" href="#快照测试" aria-hidden="true">#</a> 快照测试</h3><p>快照是一个序列化的字符串，你可以用它来确保待测对象的输出不会发生改变。使用方式如下：</p><p>scss</p><p>复制代码</p><p><code>test(&quot;sum&quot;, () =&gt; { const res = sum(1, 2) expect(res).toMatchSnapshot() })</code></p><p><code>toMatchSnapshot()</code> 匹配器用于对所传入的期望与之前保存的快照进行比较。当第一次使用它时会在测试文件的目录下新建一个 <code>__snapshots__</code> 目录存放每个测试文件中的快照，内容大致如下：</p><p>javascript</p><p>复制代码</p><p><code>// Vitest Snapshot v1 exports[`sum 1`] = `3`;</code></p><p>当第二次使用 <code>toMatchSnapshot()</code> 匹配器时就会进行比较，如果不匹配就会报错，比如：</p><p>scss</p><p>复制代码</p><p><code>test(&quot;sum&quot;, () =&gt; { const res = sum(100, 200) expect(res).toMatchSnapshot() })</code></p><p>修改测试代码，重新运行测试后就会报错：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7629f642d54544dabe09f09da22aaf41~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="image.png"></p><p>如果快照不匹配是预期的行为，可以在控制台键入“u”更新失败的快照。</p><p>如果你不希望将快照保存在另一个目录中，可以选择内联快照，使用 <code>toMatchInlineSnapshot</code> 匹配器：</p><p>scss</p><p>复制代码</p><p><code>test(&quot;sum&quot;, () =&gt; { const res = sum(1, 2) expect(res).toMatchInlineSnapshot() })</code></p><p>使用 <code>toMatchInlineSnapshot()</code> 后运行测试，生成的快照会作为参数直接被写入匹配器的括号内：</p><p>scss</p><p>复制代码</p><p><code>test(&quot;sum&quot;, () =&gt; { const res = sum(1, 2) expect(res).toMatchInlineSnapshot(&#39;3&#39;) })</code></p><p>Jest 文档中推荐了快照测试的另一个用途：测试 React 组件，提供的示例如下：</p><p>javascript</p><p>复制代码</p><p><code>import renderer from &#39;react-test-renderer&#39;; import Link from &#39;../Link&#39;; it(&#39;renders correctly&#39;, () =&gt; { const tree = renderer .create(&lt;Link page=&quot;http://www.facebook.com&quot;&gt;Facebook&lt;/Link&gt;) .toJSON(); expect(tree).toMatchSnapshot(); });</code></p><p>以上代码渲染了 Link 组件，然后对序列化后的结果进行快照测试。所保存的快照是这个样子：</p><p>ini</p><p>复制代码</p><p><code>exports[`renders correctly 1`] = ` &lt;a className=&quot;normal&quot; href=&quot;http://www.facebook.com&quot; onMouseEnter={[Function]} onMouseLeave={[Function]} &gt; Facebook &lt;/a&gt; `;</code></p><p>通过对组件的渲染结果进行快照测试，可以很方便地找出所修改的内容与之前的版本不匹配的地方，然后进行修复或更新。</p><p>但是，你不应该过度依赖快照测试，也不应该过分对组件进行快照测试，因为快照测试并不能很好地表达测试用例的意图而仅仅比较序列化后的结果，当快照出现不匹配时我们无法立即断定这是因为代码某处地方出现 bug 还是代码更新后的正常现象，为了找出不匹配的原因我们可能会在这个不匹配的地方上浪费大量的时间，甚至放弃思考武断地选择更新快照。</p><p>快照测试是一把双刃剑，它在某些场景下可能会很有用，但是也有可能让测试走向另一个极端。我个人还是建议开发者编写有意图的测试，从程序的输入输出等方面入手，专注设计高质量的测试用例。</p>',56),Ve={href:"https://kentcdodds.com/blog/effective-snapshot-testing",title:"https://kentcdodds.com/blog/effective-snapshot-testing",target:"_blank",rel:"noopener noreferrer"},Ce=e("hr",null,null,-1),Se=e("p",null,"到此为止，关于如何使用单元测试框架进行自动化测试的入门内容就介绍到这里了，相信你已经收获良多了。接下来我们就开始进入实战部分，对一个小型的 Web 应用进行单元测试、组件测试。",-1),Me=e("h2",{id:"前端自动化测试实战",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#前端自动化测试实战","aria-hidden":"true"},"#"),t(" 前端自动化测试实战")],-1),Ee=e("p",null,"我们来对以下这个地址列表小应用进行单元测试和组件测试：",-1),Le=e("p",null,[e("img",{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aab6829908f94f54a7ff2a07dd1d1500~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?",alt:"CPT2209201943-375x812.gif"})],-1),De={href:"https://github.com/joeyhuang0235/addressList",title:"https://github.com/joeyhuang0235/addressList",target:"_blank",rel:"noopener noreferrer"},Oe=e("h3",{id:"准备工作",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#准备工作","aria-hidden":"true"},"#"),t(" 准备工作")],-1),Je=e("h4",{id:"使用-vue-test-utils",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#使用-vue-test-utils","aria-hidden":"true"},"#"),t(" 使用 Vue Test Utils")],-1),He={href:"https://test-utils.vuejs.org/",title:"https://test-utils.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},We=s("<p>首先安装包：</p><p>bash</p><p>复制代码</p><p><code>npm install -D @vue/test-utils</code></p><p>然后新建一个测试文件，输入以下代码：</p><p>js</p><p>复制代码</p><p><code>import { expect, test } from &#39;vitest&#39; import { mount } from &#39;@vue/test-utils&#39; import { defineComponent } from &#39;vue&#39; const Component = defineComponent({ template: &#39;&lt;p&gt;Hello World!&lt;/p&gt;&#39;, }) test(&#39;Component&#39;, () =&gt; { const wrapper = mount(Component) expect(wrapper.find(&#39;p&#39;).text()).toBe(&#39;Hello World!&#39;) })</code></p><p>运行测试后终端会显示测试通过。</p><p>我们使用了 mount 方法来挂载组件，mount 方法内部会先创建一个包含该组件的父组件，然后调用 <code>createApp()</code> 方法创建 Vue 应用，将父组件作为根组件传进去，最后挂载到一个 div DOM 节点上。</p><p>mount 方法还支持传入一个配置对象来支持对组件的渲染或初始化进行更多配置，我挑几个较常用的配置项列在下面：</p><ul><li><p>data：用于覆盖组件默认的 data 数据，比如：</p><p>js</p><p>复制代码</p><p><code>const Component = defineComponent({ data() { return { msg: &#39;Hello World!&#39;, } }, template: &#39;&lt;p&gt;{{ msg }}&lt;/p&gt;&#39;, }) test(&#39;Component&#39;, () =&gt; { const wrapper = mount(Component, { data() { return { msg: &#39;111&#39;, } }, }) expect(wrapper.find(&#39;p&#39;).text()).toBe(&#39;111&#39;) })</code></p></li><li><p>props：设置渲染组件的 props：</p><p>js</p><p>复制代码</p><p><code>const Component = defineComponent({ props: { msg: { type: String, required: true, }, }, template: &#39;&lt;p&gt;{{ msg }}&lt;/p&gt;&#39;, }) test(&#39;Component&#39;, () =&gt; { const wrapper = mount(Component, { props: { msg: &#39;Hello World!&#39;, }, }) expect(wrapper.find(&#39;p&#39;).text()).toBe(&#39;Hello World!&#39;) })</code></p></li><li><p>globals：</p><ul><li>plugins：设置要应用到所创建的 app 的插件；</li><li>stubs：设置对待测组件的子组件的存根，当你不想渲染某些子组件或者模拟子组件时这个选项会很有用。</li></ul></li><li><p>shallow：当不想渲染所有子组件时可以将这个选项置为 true。</p></li></ul>",12),Re={href:"https://test-utils.vuejs.org/api/#mount",title:"https://test-utils.vuejs.org/api/#mount",target:"_blank",rel:"noopener noreferrer"},Fe={href:"https://test-utils.vuejs.org/api/#wrapper-methods",title:"https://test-utils.vuejs.org/api/#wrapper-methods",target:"_blank",rel:"noopener noreferrer"},Ne=s("<ul><li><p>emitted：返回组件发出的所有事件，使用示例如下：</p><p>js</p><p>复制代码</p><p><code>const Component = defineComponent({ emits: [&#39;fetch&#39;], setup(props, { emit }) { emit(&#39;fetch&#39;, &#39;123&#39;) }, }) test(&#39;Component&#39;, () =&gt; { const wrapper = mount(Component) expect(wrapper.emitted()).toHaveProperty(&#39;fetch&#39;) expect(wrapper.emitted(&#39;fetch&#39;)?.[0]).toEqual([&#39;123&#39;]) })</code></p></li><li><p>find：查询组件中的 DOM 节点，返回一个 DOMWrapper 类型的对象。DOMWrapper 在使用上与 VueWrapper 差不多，都可以使用很多工具方法；</p></li><li><p>trigger：触发组件 DOM 事件：</p><p>js</p><p>复制代码</p><p><code>const Component = defineComponent({ data() { return { count: 0, } }, template: &#39;&lt;button @click=&quot;count++&quot;&gt;{{ count }}&lt;/button&gt;.&#39;, }) test(&#39;Component&#39;, async () =&gt; { const wrapper = mount(Component) const button = wrapper.find(&#39;button&#39;) expect(button.text()).toBe(&#39;0&#39;) await button.trigger(&#39;click&#39;) expect(button.text()).toBe(&#39;1&#39;) })</code></p><p>注意，为了保证触发事件后进行断言时 DOM 已更新，trigger 方法返回了一个 Promise，它只有在 DOM 更新后才会 resolve，所以我们需要进行 await；</p></li><li><p>unmount：卸载组件。</p></li></ul>",1),ze={href:"https://test-utils.vuejs.org/api/#flushpromises",title:"https://test-utils.vuejs.org/api/#flushpromises",target:"_blank",rel:"noopener noreferrer"},Ue={href:"https://testing-library.com/docs/vue-testing-library/intro",title:"https://testing-library.com/docs/vue-testing-library/intro",target:"_blank",rel:"noopener noreferrer"},Qe=e("h4",{id:"使用-vue-testing-library",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#使用-vue-testing-library","aria-hidden":"true"},"#"),t(" 使用 Vue Testing Library")],-1),Ge={href:"https://testing-library.com/docs/dom-testing-library/intro",title:"https://testing-library.com/docs/dom-testing-library/intro",target:"_blank",rel:"noopener noreferrer"},$e=s('<p>Testing Library 是一个专注于模拟用户的行为进行测试的库，它只暴露可以让使用者以一种接近用户使用方式进行测试的 API，它的指导原则是：</p><blockquote><p>The more your tests resemble the way your software is used, the more confidence they can give you.</p></blockquote><p>这同时也是我们对组件进行测试的测试原则，即我们的测试不应过度依赖待测试对象的内部实现，而是从一个用户的角度思考其输入和输出，大多数情况下，对于一个组件来说，其输入可以是：用户的交互、Props、其它从外部输入的数据（例如 store、API 调用）；其输出可以是：视图、事件、其它 API 调用（例如调用 router、store 的方法）。</p><p>只注重组件的输入输出可以让我们写出易维护的测试代码，让我们有信心对代码进行重构，当我们进行迭代时测试也会在合适的时候失败，而不是改个类名就直接报错。</p><p>Vue Testing Library 使用 Queries API 来查询组件内部的 DOM 结点，Queries API 是从 DOM Testing Library 引入的方法，我们来简单介绍一下。</p><p>（虽然我们使用 Vue Testing Library 进行测试，但是我还是推荐你阅读一下 Vue Test Utiles 的文档，因为前者也是基于 Vue Test Utiles 开发出来的，渲染组件的配置字段和更新组件的方法有部分重合；此外，它的文档还较系统地介绍了如何测试一个 Vue 组件，包括自定义事件、路由、状态管理等等，非常值得一读。）</p><h5 id="queries" tabindex="-1"><a class="header-anchor" href="#queries" aria-hidden="true">#</a> Queries</h5><p>如果只查询一个 DOM 结点的话，按照查询 DOM 的结果来分类，Queries API 可以分为 3 种：</p><ul><li>getBy**：当没有查询到或查询到多个结果时报错；</li><li>queryBy**：当没有查询到时返回 null，查询到多个结果时报错；</li><li>findBy**：异步查询 DOM，当没有查询到或查询到多个结果时报错，返回一个 Promise。这在查询只有在视图更新后才会变化的 DOM 时会很有用。</li></ul><p>如果要查询多个 DOM 结点的话：</p><ul><li>getAllBy**：查询结果返回一个数组，其它与 getBy** 相同；</li><li>queryAllBy**：没有查询到时返回空数组，查询到时返回一个数组；</li><li>findAllBy**：查询结果返回一个数组，其它与 findBy** 相同。</li></ul>',11),Ke={href:"https://testing-library.com/docs/vue-testing-library/cheatsheet#search-types",title:"https://testing-library.com/docs/vue-testing-library/cheatsheet#search-types",target:"_blank",rel:"noopener noreferrer"},Ye={href:"https://testing-library.com/docs/queries/about#priority",title:"https://testing-library.com/docs/queries/about#priority",target:"_blank",rel:"noopener noreferrer"},Xe=s('<p>DOM Testing Library 本质上是对给定的 DOM 元素进行各种 DOM API（如 <code>querySelector()</code>） 的调用最后返回查询结果，使用方式大致如下：</p><p>js</p><p>复制代码</p><p><code>const input = getByLabelText(container, &#39;Username&#39;)</code></p><p>可以看到，使用时需要先传入一个根节点，DOM Testing Library 会对其子元素进行查询。</p><p>由于 Vue 组件的根节点一般是固定的，Vue Testing Library 修改了 Queries API 的实现，省略了根节点的传入：</p><p>js</p><p>复制代码</p><p><code>const { getByText } = render(Component) getByText(&#39;Hello World!&#39;)</code></p><h5 id="render" tabindex="-1"><a class="header-anchor" href="#render" aria-hidden="true">#</a> render</h5><p>render 方法用于挂载 Vue 组件，相当于 Vue Test Utils 的 mount 方法，但是略有不同，接口如下：</p><p>js</p><p>复制代码</p><p><code>function render(Component, options, callbackFunction) { return { ...DOMTestingLibraryQueries, container, baseElement, debug(element), unmount, html, emitted, rerender(props), } }</code></p>',14),Ze={href:"https://testing-library.com/docs/vue-testing-library/api#rendercomponent-options",title:"https://testing-library.com/docs/vue-testing-library/api#rendercomponent-options",target:"_blank",rel:"noopener noreferrer"},et=s('<p>render 方法的内部实现也很简单，大致就是修改了组件挂载的节点然后调用 mount 方法而已。</p><h5 id="fireevent" tabindex="-1"><a class="header-anchor" href="#fireevent" aria-hidden="true">#</a> fireEvent</h5><p>fireEvent 方法顾名思义，用来给 DOM 结点触发事件，使用方式如下：</p><p>js</p><p>复制代码</p><p><code>await fireEvent.click(getByText(&#39;Click me&#39;))</code></p><p>跟 Vue Test Utils 的 trigger 方法一样，为了保证 DOM 的更新，调用它会返回一个 Promise，我们需要对它进行 await。</p><p>fireEvent 的原理是对所传入的元素调用 dispatchEvent 方法触发事件，然后调用 Vue Test Utils 的 <code>flushPromises()</code> 等待 DOM 更新。</p><h5 id="cleanup" tabindex="-1"><a class="header-anchor" href="#cleanup" aria-hidden="true">#</a> cleanup</h5><p>cleanup 方法用于卸载所有已挂载的组件。Vue Testing Library 内部维护了一个存放已挂载组件的列表，当调用 render 函数时就会将所渲染的组件添加到该列表中。调用 cleanup 时就会对列表中的每个组件调用 Vue Test Utils 的 unmount 方法进行卸载。</p><p>在默认情况下 Vue Testing Library 会在 afterEach 钩子中调用 cleanup 函数，所以我们可以不用手动调用它。但是还有一个问题需要注意，我们放在后面讲。</p><hr><p>Vue Testing Library 的基本使用就介绍到这里，API 不多，上手非常容易，另外它的源码量也不多，只有不到 200 行，感兴趣的同学可以阅读一下。</p><h4 id="内联组件库" tabindex="-1"><a class="header-anchor" href="#内联组件库" aria-hidden="true">#</a> 内联组件库</h4><p>如果我们所测试的组件依赖了组件库提供的组件的话，在 Vitest 下可能会出现报错：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/09ce297550754b1aa099f3c345bd1e5c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="image.png"></p><p>从报错信息可以看出，Vitest 无法识别 vant 某个组件的 CSS 文件。出现这个问题是因为 Vitest 在默认情况下不会对 <code>node_modules</code> 的模块进行转换，而是直接交给 Node 执行，所以当然就不认识 CSS 文件了。之所以这么做是因为 <code>node_modules</code> 里的包一般都是 Node 能识别的 ESM 或 CJS 格式，出于性能考虑，当然不必对它们进行处理，Vitest 也不会将它们纳入模块图。</p><p>所以这个报错的解决方法已经很明了了，就是让 Vitest 对 vant 进行转换，可以使用 <code>deps.inline</code> 选项来达到这个目的：</p><p>css</p><p>复制代码</p><p><code>// vite.config.ts test: { deps: { inline: [&#39;vant&#39;], }, },</code></p><h4 id="其它配置" tabindex="-1"><a class="header-anchor" href="#其它配置" aria-hidden="true">#</a> 其它配置</h4><p>测试的目录结构直接照搬 src 目录的就行，方便维护和后期迭代。</p><p>如果要使用 <code>vi.useFakeTimers()</code> 时记得这样做：</p><p>js</p><p>复制代码</p><p><code>vi.useFakeTimers({ toFake: [&#39;setTimeout&#39;, &#39;clearTimeout&#39;], })</code></p>',27),tt={href:"https://github.com/vitest-dev/vitest/issues/649",title:"https://github.com/vitest-dev/vitest/issues/649",target:"_blank",rel:"noopener noreferrer"},ot=e("p",null,"如果你使用 Vite，还需要在配置文件加上一条配置：",-1),pt=e("p",null,"css",-1),st=e("p",null,"复制代码",-1),rt=e("p",null,[e("code",null,"resolve: { conditions: process.env.VITEST ? ['node'] : [], },")],-1),ct={href:"https://github.com/vitest-dev/vitest/issues/1918",title:"https://github.com/vitest-dev/vitest/issues/1918",target:"_blank",rel:"noopener noreferrer"},it=s('<p>最后，将配置文件的 <code>test.globals</code> 置为 true，为什么呢？为了兼容 Jest 生态。现在大部分库都是兼容 Jest 的，这意味着它们会假定 expect、afterEach 等 API 是可以从全局获取的。</p><p>比如 Vue Testing Library 会在 afterEach 钩子中调用 cleanup 函数来卸载所有 Vue 组件：</p><p>js</p><p>复制代码</p><p><code>if (typeof afterEach === &#39;function&#39; &amp;&amp; !process.env.VTL_SKIP_AUTO_CLEANUP) { afterEach(() =&gt; { cleanup() }) }</code></p><p>如果不开启 globals 的话，我们就需要手动调用 cleanup。</p><p>再比如前文的 jest-dom 也还是需要引入所有 matcher 然后手动进行扩展，以及后文要介绍的 Pinia 提供的用于测试的 createTestingPinia 方法也是这样。所以，为了避免测试时出现无法预料的问题，还是建议开启 globals。</p><h3 id="测试-loginform" tabindex="-1"><a class="header-anchor" href="#测试-loginform" aria-hidden="true">#</a> 测试 LoginForm</h3><p>测试实战的第一个示例，我们来测试 LoginForm，即登录表单组件。功能很简单，提交时进行调用 API 进行登录，登录成功后存储 token 并调用 router 跳转到新页面。此外还包含表单验证、按钮禁用的小功能。</p><p>所以我们要测试的功能和对应的用例如下：</p><ul><li><p>填写表单登录成功后将 token 存储到本地存储。输入为用户填写表单，输出为 localStorage 的 token 字段。由于 jsdom 提供了本地存储的支持，所以我们可直接调用 localStorage。如果不支持的话，就需要 mock 了；</p></li><li><p>填写表单登录成功 1 秒后调用 router 跳转页面。输入为用户填写表单，输出为调用 <code>router.replace()</code> 和传入的参数。所以我们需要 mock <code>vue-router</code> 模块，才能断言对 <code>useRouter()</code> 等方法的调用。你可能会问，为什么不等跳转到新页面后直接断言页面的 URL 呢？</p><p>由于我们仅仅挂载了待测的组件，如果要跳到新页面的话就需要使用 RouterView 组件，然后还需要挂载一个 APP 组件来放置 RouterView，接着配置路由表创建一个 router 实例，将其应用到 APP 组件中。可见工作量还是非常大的，如果不嫌麻烦的话就可以这样做。但是个人认为这么做也没有什么意义，本质上也还是模拟一个 router，因此直接 mock <code>vue-router</code> 模块就足够了。</p></li><li><p>提交表单时提交按钮被禁用、提交失败时按钮启用；输入为提交表单，输出为按钮的状态；</p></li><li><p>表单验证：输入框失焦或提交表单时如果有未填写的则显示提示信息。输入分别为输入框失焦和提交表单，输出为显示提示信息。</p></li></ul><p>按照这样的思路，即组件功能的输入输出设计测试用例，是一个推荐的做法。</p><p>登录时需要发起请求，所以还需要模拟调用的后端 API。通过前面的学习你应该知道怎么模拟函数了，像这样：</p><p>js</p><p>复制代码</p><p><code>import * as loginAPI from &#39;~/api/userManagement&#39; vi.spyOn(loginAPI, &#39;login&#39;).mockImplementation(vi.fn().mockResolvedValue({ token: &#39;acbdefgfedbca123&#39;, }))</code></p><p>如果要模拟返回成功结果，可以像上面这样使用 mockResolvedValue 方法，它可以模拟返回一个 resolve 的 Promise。如果要模拟失败结果，则可以使用 mockRejectedValue 方法：</p><p>js</p><p>复制代码</p><p><code>vi.mocked(loginAPI.login).mockImplementation(vi.fn().mockRejectedValue(&#39;rejected&#39;))</code></p><p>现在我们就可以写出第一个测试用例：</p><p>js</p><p>复制代码</p><p><code>describe(&#39;填写表单进行登录&#39;, () =&gt; { test(&#39;输入用户名和密码进行登录可以登录成功, 将 token 存储到本地存储中&#39;, async () =&gt; { // 模拟后端 API vi.spyOn(loginAPI, &#39;login&#39;).mockImplementation(vi.fn().mockResolvedValue({ token: &#39;acbdefgfedbca123&#39;, })) const { getByPlaceholderText, getByTestId } = render(LoginForm) expect(localStorage.getItem(&#39;token&#39;)).toBeNull() await fireEvent.update(getByPlaceholderText(&#39;用户名&#39;), &#39;jeanmay&#39;) await fireEvent.update(getByPlaceholderText(&#39;密码&#39;), &#39;password123456&#39;) await fireEvent.submit(getByTestId(&#39;form&#39;)) expect(localStorage.getItem(&#39;token&#39;)).toBe(&#39;acbdefgfedbca123&#39;) // 清除本地存储 localStorage.removeItem(&#39;token&#39;) vi.clearAllMocks() }) })</code></p><p>注意，我将测试里的代码分为了四个步骤：</p><ul><li>第一个步骤是进行测试前的初始化，完成模拟 API、渲染组件和“控制变量“这些准备工作；</li><li>第二个步骤是进行测试，即触发原先规定好的输入和输出，这里我们填写表单内容并提交。一定要记得调用 fireEvent 后还要 await 它确保视图更新；</li><li>第三个步骤是进行断言，断言输出结果是否符合我们的预期，这里断言了本地存储中是否有我们模拟的 token；</li><li>最后是进行测试的收尾，一些状态或副作用的清除在这一步完成，这里我们完成了本地存储的 token 和模拟的 API 调用记录的删除，此外还有 Vue Testing Library 自动帮我们卸载组件。</li></ul><p>这四个步骤非常重要，按照这个方式来组织测试代码可以很清晰地表达测试的意图，确保测试的独立性和可维护性。</p><p>一些重复的初始化和收尾工作可以提取出来放到钩子函数中或提到更上层的作用域，抽离出来后最终代码是这样的：</p><p>javascript</p><p>复制代码</p><p><code>describe(&#39;LoginForm&#39;, () =&gt; { afterEach(() =&gt; { vi.clearAllMocks() }) describe(&#39;填写表单进行登录&#39;, () =&gt; { vi.spyOn(loginAPI, &#39;login&#39;).mockImplementation(vi.fn().mockResolvedValue({ token: &#39;acbdefgfedbca123&#39;, })) afterEach(() =&gt; { localStorage.removeItem(&#39;token&#39;) }) test(&#39;输入用户名和密码进行登录可以登录成功, 将 token 存储到本地存储中&#39;, async () =&gt; { const { getByPlaceholderText, getByTestId } = render(LoginForm) expect(localStorage.getItem(&#39;token&#39;)).toBeNull() await fireEvent.update(getByPlaceholderText(&#39;用户名&#39;), &#39;jeanmay&#39;) await fireEvent.update(getByPlaceholderText(&#39;密码&#39;), &#39;password123456&#39;) await fireEvent.submit(getByTestId(&#39;form&#39;)) // await waitFor(() =&gt; expect(localStorage.getItem(&#39;token&#39;)).toBe(&#39;acbdefgfedbca123&#39;)) expect(localStorage.getItem(&#39;token&#39;)).toBe(&#39;acbdefgfedbca123&#39;) }) }） })</code></p><p>接下来写第二个用例的代码，由于使用了 router，我们需要模拟 vue-router 模块，模拟代码如下：</p><p>typescript</p><p>复制代码</p><p><code>import type * as VueRouter from &#39;vue-router&#39; const replace = vi.fn() vi.mock(&#39;vue-router&#39;, async () =&gt; ({ ...await vi.importActual&lt;typeof VueRouter&gt;(&#39;vue-router&#39;), useRouter: () =&gt; ({ replace, }), }))</code></p><p>由于源代码使用的是 <code>router.replace()</code>，这里我们只需要模拟 useRouter 和 replace 就足够了。</p><p>测试代码我直接贴出来：</p><p>js</p><p>复制代码</p><p><code>test(&#39;输入用户名和密码进行登录可以登录成功, 1 秒后调用 router.replace()&#39;, async () =&gt; { const { getByPlaceholderText, getByTestId } = render(LoginForm) expect(replace).not.toHaveBeenCalled() await fireEvent.update(getByPlaceholderText(&#39;用户名&#39;), &#39;jeanmay&#39;) await fireEvent.update(getByPlaceholderText(&#39;密码&#39;), &#39;password123456&#39;) await fireEvent.submit(getByTestId(&#39;form&#39;)) vi.advanceTimersByTime(1000) expect(replace).toHaveBeenCalledTimes(1) expect(replace).toHaveBeenCalledWith(&#39;/address/shipAddress&#39;) })</code></p><p>由于源代码中用到了定时器，我们还需要使用 <code>vi.useFakeTimers()</code>，这个工作已经在 setup file 中完成了就不必再做了。</p><p>其它几个测试比较简单，所以就不必多讲了。测试 LoginForm 的介绍就到这里了，在这一小节中，我讲了如何根据待测组件的功能从输入输出的角度设计测试用例、组织测试代码的四个步骤和常见的模拟模块的方式。</p><p>此外还有几个常用技巧，比如使用 <code>toBeInTheDocument()</code> 匹配器判断 DOM 是否存在、使用 <code>toBeEnabled()</code>、<code>toBeDisabled()</code> 判断按钮是否禁用或启用等等。</p><h3 id="测试-addresslistitem" tabindex="-1"><a class="header-anchor" href="#测试-addresslistitem" aria-hidden="true">#</a> 测试 AddressListItem</h3><p>AddressListItem 组件通过 Props 接收地址信息，然后将其渲染到视图上，点击时跳转到新页面，长按一秒时抛出 longTouch 事件。</p><p>根据上一小节提供的方法应该可以很容易地想出如何设计测试用例，所以这里就不再介绍了。这里我们来细说一下点击跳转新页面这个功能，因为这个过程涉及到调用 store。</p><p>这个项目使用的状态管理是 Pinia，Pinia 提供了 createTestingPinia 方法来简化测试的复杂度，用法如下：</p><p>js</p><p>复制代码</p><p><code>render(Component, { global: { plugins: [createTestingPinia()], }, })</code></p><p>调用 createTestingPinia 会返回一个专门用于测试的 pinia 实例，将其作为插件传入 <code>global.plugins</code> 之后，所有对 store 的获取都会返回一个模拟的 store 而不是原先定义的 store，所以我们不必担心调用 store 上的 action 或修改其中的状态会对其它测试或源代码中的 store 造成影响。这个模拟的 store 与原来的没有什么区别，唯一的一点不同是 pinia 会用一个模拟函数（比如 <code>vi.fn()</code>）来替换掉所有 action，所以我们可以直接对这些 action 进行监听而不必担心它会发起网络请求或修改状态。</p><p>（注：createTestingPinia 假定 <code>vi.fn()</code> 或 <code>jest.fn()</code> 是可以从全局获取的，所以需要开启 globals）</p><p>对 action 进行修改的源码是这样的：</p><p>js</p><p>复制代码</p><p><code>const createSpy = _createSpy || typeof jest !== &quot;undefined&quot; &amp;&amp; jest.fn || typeof vi !== &quot;undefined&quot; &amp;&amp; vi.fn; if (!createSpy) { throw new Error(&quot;[@pinia/testing]: You must configure the `createSpy` option.&quot;); } pinia$1._p.push(({ store, options }) =&gt; { Object.keys(options.actions).forEach((action) =&gt; { store[action] = stubActions ? createSpy() : createSpy(store[action]); }); store.$patch = stubPatch ? createSpy() : createSpy(store.$patch); });</code></p><p>stubActions 是传入 createTestingPinia 的一个选项。可以看到，如果 stubActions 为 false，则会使用原先的实现并启动监听。</p><p>除了传入 stubActions 选项外，我们还可以设置 store 的状态的初始值：</p><p>js</p><p>复制代码</p><p><code>render(Component, { global: { plugins: [ createTestingPinia({ initialState: { counter: { n: 20 }, }, }), ], }, })</code></p><p>如果需要改变 getter 的值，我们也可以强制对其进行写入：</p><p>js</p><p>复制代码</p><p><code>const counter = useCounter() // @ts-expect-error: usually it&#39;s a number counter.double = 2</code></p><p>但是需要使用 <code>@ts-expect-error</code> 注释绕过 TS 编译器的检查。</p><p>接下来我们来测试&quot;点击后设置 store 的 currentAddressId&quot; 这个用例，代码如下：</p><p>js</p><p>复制代码</p><p><code>const renderAddressListItem = () =&gt; { return render(AddressListItem, { props: { addressInfo, }, global: { plugins: [createTestingPinia()], }, }) } describe(&#39;AddressListItem&#39;, () =&gt; { afterEach(() =&gt; { vi.clearAllMocks() }) test(&#39;点击后设置 store 的 currentAddressId&#39;, async () =&gt; { const { getByTestId } = renderAddressListItem() const address = useAddressStore() expect(address.currentAddressId).toBe(&#39;&#39;) await fireEvent.click(getByTestId(&#39;item&#39;)) expect(address.currentAddressId).toBe(addressInfo.addressId) }) })</code></p><p>当调用 render 的配置项较多且重复时可以将这个操作抽离成一个函数，这里是 renderAddressListItem 函数，它初始化了用于展示的地址信息，并调用了 createTestingPinia 方法。</p><p>测试代码比较简单，没有什么可以讲的地方，使用和断言 store 的方式也跟测试 router 差不多。主要是学会 createTestingPinia 方法的使用。</p><h3 id="测试-addresslist" tabindex="-1"><a class="header-anchor" href="#测试-addresslist" aria-hidden="true">#</a> 测试 AddressList</h3><p>AddressList 组件调用 store 的 action 获取地址列表数据并传入 AddressListItem，获取地址列表后及地址列表的数量变化时都会抛出 fetch 事件，此外监听 AddressListItem 的 longTouch 事件，事件回调中调用 action 删除地址列表项。</p><p>我们来看&quot;获取并展示地址列表信息&quot;这个测试的代码：</p><p>js</p><p>复制代码</p><p><code>test(&#39;获取并展示地址列表信息&#39;, async () =&gt; { const { findAllByTestId } = renderAddressList() expect(await findAllByTestId(&#39;item&#39;)).toHaveLength(3) })</code></p><p>由于源代码中会调用 action 发起请求获取地址列表，这是一个异步的过程，所以需要使用 findAllByTestId()。</p><p>我们封装的用于渲染组件的函数如下：</p><p>js</p><p>复制代码</p><p><code>const renderAddressList = (stubs = false) =&gt; { const spy = () =&gt; { return vi.fn(async () =&gt; { const address = useAddressStore() address.addressInfoList.push(...mockedAddressInfoList) }) } if (stubs) { const AddressListItem = defineComponent({ emits: [&#39;longTouch&#39;], setup(props, { emit }) { const emitLongTouch = async () =&gt; { emit(&#39;longTouch&#39;) } emitLongTouch() }, template: &#39;&lt;div /&gt;&#39;, }) return render(AddressList, { global: { stubs: { AddressListItem, }, plugins: [createTestingPinia({ createSpy: spy, })], }, }) } else { return render(AddressList, { global: { plugins: [createTestingPinia({ createSpy: spy, })], }, }) } }</code></p><p>由于后面几个测试用例会测试接收 AddressListItem 的 longTouch 事件并删除列表项的功能逻辑，需要模拟 AddressListItem 组件，所以渲染组件时需要分为模拟和不模拟两种情况，通过 stubs 参数来控制，默认是 false。</p><p>另外，我们还自己定义了一个传入 createSpy 选项的 spy 函数，因为 AddressList 创建前就会立即调用 <code>store.getAddressInfoList()</code> 获取地址列表，这意味我们必须在开始渲染该组件前模拟这个 action，创建一个新的 createSpy 函数就可以达到这个目的。在 spy 函数中我们重写了所有 action，让它们都更新 <code>address.addressInfoList</code>，因为测试场景比较简单，所以这样做不会出现什么大问题，当我们需要在组件创建前实现不同的 action 时可以将 spy 函数作为参数传入。</p><p>如果组件在创建前后不会立即调用 action，我们不需要重写 createSpy，直接在挂载后修改就行，比如这个测试用例：</p><p>js</p><p>复制代码</p><p><code>test(&#39;监听到 Item 组件的 longTouch 事件后弹出弹窗，点击确定即可删除该 Item&#39;, async () =&gt; { mockedAddressInfoList.splice(0, 2) const { findAllByTestId, queryAllByTestId } = renderAddressList(true) const address = useAddressStore() vi.mocked(address.deleteAddress).mockImplementation(vi.fn(async () =&gt; { address.addressInfoList = [] })) expect(await findAllByTestId(&#39;item&#39;)).toHaveLength(1) await fireEvent.click(screen.getByText(&#39;确认&#39;)) expect(address.deleteAddress).toHaveBeenCalledWith(&#39;3&#39;) expect(queryAllByTestId(&#39;item&#39;)).toHaveLength(0) })</code></p><p>这里在组件挂载后调用了 mockImplementation 更改了 <code>address.deleteAddress</code> 的实现。</p><h3 id="测试-addressform" tabindex="-1"><a class="header-anchor" href="#测试-addressform" aria-hidden="true">#</a> 测试 AddressForm</h3><p>测试 AddressForm 这里有两个地方需要注意。</p><p>一个是设置初始的 getter，虽然 createTestingPinia 只支持初始化 state，但是初始化 getter 也不难，因为 getter 本身就是从 state 计算得到的，所以直接设置初始 state 就可以了。</p><p>第二个是在测试用例内重写模块的模拟函数的实现，比如这个测试：</p><p>js</p><p>复制代码</p><p><code>test(&#39;正确填写表单并提交成功后，1 秒后调用 router.back()&#39;, async () =&gt; { const back = vi.fn() vi.mocked(useRouter, { partial: true, }).mockImplementation(() =&gt; ({ back, })) const { getByPlaceholderText, getByText, getByRole, getByTestId } = renderAddressForm() expect(back).not.toHaveBeenCalled() await fireEvent.update(getByPlaceholderText(&#39;请填写收货人姓名&#39;), addressInfo.name) await fireEvent.update(getByPlaceholderText(&#39;手机号码&#39;), addressInfo.mobilePhone) await fireEvent.click(getByPlaceholderText(&#39;点击选择省市区&#39;)) await fireEvent.click(screen.getByText(&#39;确认&#39;)) await fireEvent.update(getByPlaceholderText(&#39;详细地址&#39;), addressInfo.detailAddress) await fireEvent.click(getByText(&#39;家&#39;)) await fireEvent.click(getByRole(&#39;switch&#39;)) await fireEvent.submit(getByTestId(&#39;form&#39;)) vi.advanceTimersByTime(1000) expect(back).toHaveBeenCalledTimes(1) })</code></p><p>需要注意的地方是，调用 <code>vi.mocked()</code> 是需要额外传入一个值为 true 的 partial 字段，表明只模拟模块的部分 API。</p><h3 id="测试-pinia-stores" tabindex="-1"><a class="header-anchor" href="#测试-pinia-stores" aria-hidden="true">#</a> 测试 Pinia stores</h3><p>除了测试组件外，我们还需要测试 store，因为 store 通常管理一个或多个业务模块的状态，负责模块级别的数据层的调度和维护，是一个 Web 应用重要的组成部分，所以对它们进行测试是自动化测试中非常重要的一环。</p><p>在 Pinia 中测试 store 非常简单，因为本质上就是对一个个 getter 和 action 做单元测试，粒度比组件要小很多。唯一要注意的地方是要记得加上这一段代码：</p><p>js</p><p>复制代码</p><p><code>beforeEach(() =&gt; { setActivePinia(createPinia()) })</code></p><p>因为想要使用 store，需要有一个已注册的 pinia 实例，否则就需要手动将其传入 <code>useAddressStore()</code> 方法中，以上代码可以自动帮我们完成这件事情。</p><p>完成以上这件事后，剩下的事情就简单多了，也没啥好介绍的了，大伙们直接看仓库代码就够了。</p><hr><p>前端自动化测试的组件测试实战就到这里了，我重点介绍了进行组件测试时的测试原则、测试技巧和注意事项，如果你理解并熟练了之后就会发现写测试其实真的不难，本质上还是围绕组件功能的输入输出做文章，并按照四个步骤组织测试代码，剩下的就是对各种 API 的熟练程度了。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>从入门到实战，以上就是前端测试的介绍的全部内容了，希望对你有所帮助。另外，在示例项目中我还使用了 Cypress 进行端到端测试，感兴趣的同学可以看一下。</p><p>最后，如果觉得这篇文章对你很有用的话，就请给我点赞收藏加关注吧~</p>',111);function at(nt,dt){const o=c("ExternalLinkIcon");return i(),a("div",null,[d,l,e("p",null,[t("最后是前端测试的实战部分，我演示了如何测试一个地址列表小应用（GitHub 仓库在"),e("a",u,[t("这里"),p(o)]),t("），先介绍进行组件测试时要使用的组件挂载库 Vue Test Utils 和 Vue Testing Library，然后重点介绍了进行组件测试时的测试原则、测试技巧和一些注意事项。")]),h,e("p",null,[t("除了 Node 提供的 assert 模块外，社区还出现了很多断言库，提供了多样的断言风格，最具代表性的当属 "),e("a",m,[t("Chai"),p(o)]),t(" 和 "),e("a",g,[t("Jest"),p(o)]),t("。")]),f,e("p",null,[t("如上例所示，像 "),b,t("、"),v,t(" 这类对待测内容的某个方面进行断言的方法，称为匹配器（Matcher）。常用的匹配器有 "),_,t("、"),y,t("、"),k,t(" 等等。可以查阅 "),e("a",j,[t("Jest 的匹配器 API 文档"),p(o)]),t(" 了解更多内容，匹配器的数量不多，也就不到 40 个，相信你可以轻松搞定，这里就不赘述了。")]),x,e("p",null,[t("更多 API 及详细内容可以查阅"),e("a",q,[t("文档"),p(o)]),t("，这里不过多介绍了。")]),T,e("p",null,[t("要想 Jest 支持 Vue 文件的转换需要使用 "),e("a",I,[A,p(o)]),t("，这里我用的是支持 Vue3 的版本。")]),B,e("p",null,[t("因此，相比于使用 Jest，我更推荐你使用 "),e("a",w,[t("Vitest"),p(o)]),t(" ！")]),P,e("p",null,[t("Vue 官方的脚手架 "),V,t(" 已将 Vitest 作为默认的单元测试框架。如果你还在犹豫不决，觉得 Vitest 还是一个较新的测试框架，怀疑是否可以在实际项目中使用的话，可以看"),e("a",C,[t("这篇文章"),p(o)]),t("。")]),S,e("p",null,[t("与 Jest 不同，Vitest 会将所有带有 spec 和 test 后缀的 js、ts 等类型文件视为测试文件。具体可以看 "),e("a",M,[t("include"),p(o)]),t(" 字段")]),E,e("p",null,[t("除了模拟定时器外，"),L,t(" 还可以模拟日期（Date），具体用法可以看 "),e("a",D,[O,p(o)]),t(" 方法。")]),J,e("p",null,[t("你可能已经注意到了我们在测试最后调用了一个 "),e("a",H,[W,p(o)]),t(" 方法，该方法用于清除被模拟的对象的所有调用信息。使用它的目的与前文使用的 "),R,t(" 一样，为了不对其他测试造成影响。类似的方法还有 "),e("a",F,[N,p(o)]),t(" 和 "),e("a",z,[U,p(o)]),t("，前者用于清除调用信息和将被模拟对象的实现置为一个空函数，后者用于清除调用信息和还原被模拟对象的原始实现。这个示例中由于我们仅仅是对函数进行监听，没有修改内部实现， 因此调用 "),Q,t(" 就足够了。")]),e("p",null,[t("对每个模拟对象调用 "),G,t("、"),$,t(" 很快会变成重复的行为，我们可以使用 "),e("a",K,[Y,p(o)]),t("、"),e("a",X,[Z,p(o)]),t(" 和 "),e("a",ee,[te,p(o)]),t(" 一次性对所有的模拟对象进行这些操作，通常把对这三个方法的调用放到钩子函数里。")]),oe,e("p",null,[t("测试覆盖率，顾名思义，就是检查测试所覆盖的源代码量占源代码总数的比例。Vitest 支持通过 "),e("a",pe,[t("c8"),p(o)]),t(" 和 "),e("a",se,[t("istanbul"),p(o)]),t(" 获得测试的覆盖率，我们来尝试一下。")]),re,e("p",null,[t("Martin Fowler 在"),e("a",ce,[t("这篇文章"),p(o)]),t("中提到：高测试覆盖率并不意味着什么，它反而在帮助检查源代码中还没有被测试的地方这个方面有效果。他认为，如果你做到了以下这两点，就说明你写的测试已经充足了：")]),ie,ae,ne,de,e("p",null,[t("Vitest 提供了 environment 选项来配置测试环境，除 Node 之外还支持了 "),e("a",le,[t("jsdom"),p(o)]),t("、"),e("a",ue,[t("Happy DOM"),p(o)]),t(" 和 "),e("a",he,[t("Edge Runtime"),p(o)]),t("。")]),me,ge,fe,be,ve,e("p",null,[t("尽管 jsdom 实现了许多 Web API，但是它毕竟运行在一个模拟的浏览器环境（即无头浏览器）中，许多特性仍然无法实现，一个是布局（layout），即无法计算某个元素在页面中的布局，如在视口中的位置（"),_e,t("）和 offsetTop 等属性；一个是 navigation。所以在某些场景下使用 jsdom、Happy DOM 进行 Web 环境下的测试可能无法很好地满足你的需求，在这种情况下你需要让待测对象在一个真实的浏览器上运行，比如使用 "),e("a",ye,[t("Cypress"),p(o)]),t(" 来进行测试。")]),ke,e("p",null,[t("从 "),je,t(" 开始，Vitest 支持使用自定义的环境，需要创建一个命名格式为 "),xe,t(" 的导出环境对象的包，并且还导出了 "),qe,t(" 方法方便填充 global 对象。你可以点击"),e("a",Te,[t("这里"),p(o)]),t("查看指引。")]),Ie,Ae,e("p",null,[e("a",Be,[we,p(o)]),t(" 提供许多 Jest 匹配器来帮助我们简化这些步骤，由于 Vitest 兼容 Jest 的断言风格，所以 jest-dom 也可以在 Vitest 上使用。我们来尝试一下。")]),Pe,e("p",null,[t("Testing Library 的作者 Kent C. Dodds 在他的"),e("a",Ve,[t("这篇博客"),p(o)]),t("中介绍了几个他觉得非常适合使用快照测试的地方，感兴趣的同学可以看一看。")]),Ce,Se,Me,Ee,Le,e("p",null,[t("技术栈主要是 Vue3、Pinia 和 TypeScript。 源代码仓库在"),e("a",De,[t("这里"),p(o)]),t("，我还提供了使用 Vuex 的分支，你可以拉下来边学习边对照。")]),Oe,Je,e("p",null,[e("a",He,[t("Vue Test Utils"),p(o)]),t(" 是官方提供的组件挂载库，它提供了许多实用的 API 来支持对 Vue 组件的测试，我们来尝试一下。")]),We,e("p",null,[t("mount 方法的配置选项的几个字段就介绍到这里，为了避免篇幅过多，还是建议大家去看对应的 "),e("a",Re,[t("API 文档"),p(o)]),t("，讲得很详细。")]),e("p",null,[t("调用 mount 方法会返回一个 VueWrapper 类型的对象，它提供了许多工具方法来方便对组件进行断言或更新组件的状态。比如上面几个示例的 text 方法就可以返回一个元素的文本内容，这里列举几个其他几个常用的方法，更多详情可以"),e("a",Fe,[t("看这"),p(o)]),t("：")]),Ne,e("p",null,[t("Vue Test Utiles 还暴露了一个 "),e("a",ze,[t("flushPromises"),p(o)]),t(" 方法，调用并 await 它可以确保所有微任务（包括 DOM 更新）都会执行完毕。它内部同时使用了宏任务和微任务来达到这个目的。")]),e("p",null,[t("Vue Test Utiles 的基本使用就介绍到这，之所以介绍得比较简短，除了节省篇幅外，主要原因是我们并不使用它来作为 Vue 组件的挂载库，我们使用的是 "),e("a",Ue,[t("Vue Testing Library"),p(o)]),t("。")]),Qe,e("p",null,[t("Vue Testing Library 是一个用于 Vue 的测试库，它内部依赖了 "),e("a",Ge,[t("DOM Testing Library"),p(o)]),t(" 和 Vue Test Utils。相比于 Vue Test Utils，Vue Testing Library 可以使用更简洁的 API 来与组件进行交互，它摒弃了操作、查询 Vue 组件时需要使用的过度依赖其内部实现的 API，而将这些操作简化为最原始的，更加抽象的原生 DOM 操作。")]),$e,e("p",null,[t("按照查询 DOM 的方式来分类，可以分为 8 种，具体可以"),e("a",Ke,[t("看这里"),p(o)]),t("，就不列举了。同时文档还为这些 API 的使用优先级"),e("a",Ye,[t("排了序"),p(o)]),t("。")]),Xe,e("p",null,[t("使用方式与 mount 方法差不多，但是返回了 Queries API 和几个变量和方法，具体可以看"),e("a",Ze,[t("这里"),p(o)]),t("。")]),et,e("p",null,[t("具体原因可以看这条 "),e("a",tt,[t("issue"),p(o)]),t("。在示例项目中我已将以上代码放到 setup file 中。")]),ot,pt,st,rt,e("p",null,[t("具体看这个 "),e("a",ct,[t("issue"),p(o)]),t("。")]),it])}const ut=r(n,[["render",at],["__file","zheyici，chedirumenqianduanceshi，fugaidanyuanceshi、zujianceshi（2.4w zi）.html.vue"]]);export{ut as default};
