import{_ as t,r as p,o,c as l,b as s,d as a,e,a as c}from"./app-yIsnbKMY.js";const i={},r={href:"https://juejin.cn/post/7099702781094674468",title:"https://juejin.cn/post/7099702781094674468",target:"_blank",rel:"noopener noreferrer"},u=c(`<h1 id="组件化思想" tabindex="-1"><a class="header-anchor" href="#组件化思想" aria-hidden="true">#</a> 组件化思想</h1><blockquote><p>为什么使用组件化开发？</p></blockquote><p>当前前端比较流行的 <strong>Vue</strong> <strong>React</strong> 等框架，都会通过编写组件来完成业务需求，也就是组件化开发。包括小程序开发也会用到组件化开发的思想。</p><p>分析组件化思想开发应用程序：</p><ul><li>将一个完整页面拆分成很多个小组件</li><li>每个组件用于完成页面的一个功能模块</li><li>每一个组件还可以细分 （父子组件）</li><li>通用的组件可以复用到不同的页面</li></ul><p>一个 <strong>Vue</strong> 的页面，应该像是棵嵌套的组件树的形式来组织：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f2a4a9e24624b16b15b6db1090a1f63~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" alt="components.png"></p><p><strong>vue3</strong> 入口文件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span><span class="token punctuation">;</span>

<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>createApp()</code>函数传入了一个<code>App</code>，<code>App</code> 就是一个组件，是项目的根组件。</p><p>下面将分析 <strong>Vue3</strong> 中组件化开发的常用方法。</p><h1 id="组件通讯" tabindex="-1"><a class="header-anchor" href="#组件通讯" aria-hidden="true">#</a> 组件通讯</h1><h2 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> $props</h2><ul><li><code>$props</code> 用于向子组件传递数据</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> $props: {{$props}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>&lt;script setup&gt;</code> 语法糖中需要使用 <code>defineProps</code>Api获取props</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">num</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="emits" tabindex="-1"><a class="header-anchor" href="#emits" aria-hidden="true">#</a> $emits</h2><ul><li><code>$emit</code> 用于调用父级组件的方法</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$emit(&#39;add&#39;)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  add
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>&lt;script setup&gt;</code> 语法糖中需要使用 <code>defineEmits</code>Api声明emits</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>add<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ num }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

const emits = defineEmits([&#39;add&#39;])
function add() {
  emits(&#39;add&#39;)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="parent" tabindex="-1"><a class="header-anchor" href="#parent" aria-hidden="true">#</a> $parent</h2><ul><li><code>$parent</code>用于获取父组件实例对象。</li></ul><p><code>&lt;script setup&gt;</code> 中组件实例不会暴露出来，直接在模板中使用<code>$parent</code>会返回一个空对象。</p><p>为了在 <code>&lt;script setup&gt;</code> 组件中明确要暴露出去的属性，使用 <code>defineExpose</code> 编译器宏：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> parData <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&quot;父组件数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">defineExpose</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  parData<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子组件：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>父组件 parData: {{$parent.parData}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="attrs" tabindex="-1"><a class="header-anchor" href="#attrs" aria-hidden="true">#</a> $attrs</h2><ul><li>包含了父作用域中不作为组件 <code>props</code> 或自定义事件的 attribute 绑定和事件。</li></ul><p>子组件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Foo a<span class="token operator">=</span><span class="token string">&quot;a&quot;</span> b<span class="token operator">=</span><span class="token string">&quot;b&quot;</span> <span class="token operator">:</span>num<span class="token operator">=</span><span class="token string">&quot;num&quot;</span> @add<span class="token operator">=</span><span class="token string">&quot;add&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在父组件中，<code>$attrs</code> 的值就是 <code>{ &quot;a&quot;: &quot;a&quot;, &quot;b&quot;: &quot;b&quot; }</code>。</p><ul><li>当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定，并且可以通过 <code>v-bind=&quot;$attrs&quot;</code> 传入内部组件——这在创建高阶的组件时会非常有用，举个例子：</li></ul><p>父组件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Bar <span class="token operator">:</span>age<span class="token operator">=</span><span class="token number">18</span> sex<span class="token operator">=</span><span class="token string">&quot;boy&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>子组件 <code>Bar.vue</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>p v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">&quot;$attrs&quot;</span><span class="token operator">&gt;</span>将$attrs对象绑定到当前标签<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在浏览器查看DOM，<code>age 和 sex</code>作为属性被绑定到了这个<code>p</code>标签上面。</p><ul><li><code>&lt;script setup&gt;</code>中，需要使用<code>useAttrs</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useAttrs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> attrs <span class="token operator">=</span> <span class="token function">useAttrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>attrs<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// boy</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="proviede-inject" tabindex="-1"><a class="header-anchor" href="#proviede-inject" aria-hidden="true">#</a> proviede &amp; inject</h2><ul><li>用于跨层级/多层级的组件通信</li><li>父组件有一个 <code>provide</code> 选项来提供数据，子组件有一个 <code>inject</code> 选项来开始使用这些数据。</li></ul><p>父级组件:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kong&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&quot;pass&quot;</span><span class="token punctuation">,</span> <span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>子孙级组件:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pass <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&quot;pass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="插槽-slot" tabindex="-1"><a class="header-anchor" href="#插槽-slot" aria-hidden="true">#</a> 插槽 slot</h1><p>用于内容分发，将 <code>&lt;slot&gt;</code> 元素作为承载分发内容的出口。</p><p><code>SlotComp</code> 组件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">&quot;s1&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">&quot;head&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">&quot;s2&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">&quot;foot&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用上面的组件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>          <span class="token operator">&lt;</span>SlotComp<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span>head<span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>head插槽<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span>foot<span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>foot插槽<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>SlotComp<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SlotComp</code> 组件中带 <code>name</code>属性的 <code>slot</code>插槽内容，会被替换。被替换的内容 需要在父组件中使用 <code>v-slot</code>指令为插槽提供想要显示的内容。</p><h2 id="渲染作用域" tabindex="-1"><a class="header-anchor" href="#渲染作用域" aria-hidden="true">#</a> 渲染作用域</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>            <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span>foot<span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>foot插槽<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
              <span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token punctuation">}</span>
              <span class="token punctuation">{</span><span class="token punctuation">{</span>items<span class="token punctuation">}</span><span class="token punctuation">}</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子，<code>{{items}}</code> 不会显示数据。</p><blockquote><p>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</p></blockquote><h2 id="作用域插槽" tabindex="-1"><a class="header-anchor" href="#作用域插槽" aria-hidden="true">#</a> 作用域插槽</h2><p>让插槽的内容访问子组件才有的数据：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">&quot;head&quot;</span> <span class="token operator">:</span>item<span class="token operator">=</span><span class="token string">&quot;items&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>插槽内容：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>            <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span>head <span class="token operator">=</span> <span class="token string">&quot;slotProps&quot;</span><span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span>p v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;i in slotProps.item&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>i<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>绑定在 <code>&lt;slot&gt;</code> 元素上的 attribute 被称为<strong>插槽 prop</strong>。现在，在父级作用域中，我们可以使用带值的 <code>v-slot</code> 来定义我们提供的插槽 prop 的名字，本例中就是<code>slotProps</code>。</p><h1 id="v-model" tabindex="-1"><a class="header-anchor" href="#v-model" aria-hidden="true">#</a> v-model</h1><h2 id="表单组件" tabindex="-1"><a class="header-anchor" href="#表单组件" aria-hidden="true">#</a> 表单组件</h2><ul><li>将 <code>v-model</code> 应用在表单上面，实现双向绑定：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="自定义组件" tabindex="-1"><a class="header-anchor" href="#自定义组件" aria-hidden="true">#</a> 自定义组件</h2><ul><li>将 <code>v-model</code> 应用在自定义组件上面：</li></ul><p>父组件中使用自定义组件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;hello world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">&lt;</span>ModelComp v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;msg&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>ModelComp<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相当于：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>          <span class="token operator">&lt;</span>ModelComp 
            <span class="token operator">:</span>modelValue<span class="token operator">=</span><span class="token string">&quot;msg&quot;</span>
             @update<span class="token operator">:</span>modelValue<span class="token operator">=</span><span class="token string">&quot;msg = $event&quot;</span>
          <span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>ModelComp<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义组件<code>ModelComp.vue</code>中：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">modelValue</span><span class="token operator">:</span> String
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> emits <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token string">&quot;update:modelValue&quot;</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&quot;请输入..&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// text改变时执行</span>
<span class="token function">watch</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token function">emits</span><span class="token punctuation">(</span><span class="token string">&quot;update:modelValue&quot;</span><span class="token punctuation">,</span>text<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="改变默认参数" tabindex="-1"><a class="header-anchor" href="#改变默认参数" aria-hidden="true">#</a> 改变默认参数</h2><ul><li>未设置参数时如上，默认绑定的参数是 <code>modelValue</code> <code>update:modelValue</code> 设置<code>v-model</code>参数：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>ModelComp v<span class="token operator">-</span>model<span class="token operator">:</span>show<span class="token operator">=</span><span class="token string">&quot;show&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>ModelComp<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>相当于：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>          <span class="token operator">&lt;</span>ModelComp 
            <span class="token operator">:</span>show<span class="token operator">=</span><span class="token string">&quot;showFlag&quot;</span>
             @update<span class="token operator">:</span>show<span class="token operator">=</span><span class="token string">&quot;showFlag = $event&quot;</span>
          <span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>ModelComp<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义组件<code>ModelComp.vue</code>中：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">show</span><span class="token operator">:</span> Boolean
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> emits <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token string">&quot;update:show&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="样式绑定相关" tabindex="-1"><a class="header-anchor" href="#样式绑定相关" aria-hidden="true">#</a> 样式绑定相关</h1><h2 id="class" tabindex="-1"><a class="header-anchor" href="#class" aria-hidden="true">#</a> class</h2><p>class绑定：根据需求动态绑定class样式时可以使用一下几种方法</p><p>写法1：对象语法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;changeColor&quot;</span> <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;{ active: isActive }&quot;</span><span class="token operator">&gt;</span>
    点击切换我的文体颜色样式
<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>

<span class="token keyword">const</span> isActive <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">changeColor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  isActive<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">!</span>isActive<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写法2：对象语法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;changeColor2&quot;</span> <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;classObj&quot;</span><span class="token operator">&gt;</span>
          点击切换颜色，根据计算属性
<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>

<span class="token keyword">const</span> isActive2 <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
<span class="token literal-property property">active</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> classObj <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">active</span><span class="token operator">:</span> isActive2<span class="token punctuation">.</span>active<span class="token punctuation">,</span>
  <span class="token string-property property">&#39;font-30&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">changeColor2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
isActive2<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token operator">!</span>isActive2<span class="token punctuation">.</span>active
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写法3：数组语法</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[activeClass, errorClass]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>三目运算符写法</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[isActive ? activeClass : &#39;&#39;, errorClass]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>数组语法中结合对象语法使用</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[{ active: isActive }, errorClass]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="style" tabindex="-1"><a class="header-anchor" href="#style" aria-hidden="true">#</a> style</h2><p>动态绑定行内style样式</p><p>三种方式：html代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>      <span class="token operator">&lt;</span>p <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">&quot;{ color: colorRed }&quot;</span><span class="token operator">&gt;</span>style绑定<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>      <span class="token operator">&lt;</span>p <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">&quot;styleObj&quot;</span><span class="token operator">&gt;</span><span class="token function">style对象绑定</span><span class="token punctuation">(</span>直接绑定到一个对象，代码更清新<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>     <span class="token operator">&lt;</span>p <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">&quot;[styleObj, styleObjRed]&quot;</span><span class="token operator">&gt;</span>style数组绑定<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>js 代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> colorRed <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;#f00&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> styleObj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">&#39;30px&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> styleObjRed <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;#f00&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,105),d={href:"https://github.com/kongcodes/vue3study",title:"https://github.com/kongcodes/vue3study",target:"_blank",rel:"noopener noreferrer"},k={href:"https://juejin.cn/post/7010212118779674637",title:"https://juejin.cn/post/7010212118779674637",target:"_blank",rel:"noopener noreferrer"};function v(m,g){const n=p("ExternalLinkIcon");return o(),l("div",null,[s("p",null,[a("持续创作，加速成长！这是我参与「掘金日新计划 · 6 月更文挑战」的第5天，"),s("a",r,[a("点击查看活动详情"),e(n)])]),u,s("blockquote",null,[s("p",null,[a("代码demo地址 "),s("a",d,[a("github.com/kongcodes/v…"),e(n)])])]),s("blockquote",null,[s("p",null,[s("a",k,[a("从0开始vue3项目搭建"),e(n)])])])])}const h=t(i,[["render",v],["__file","vue3zujianhuakaifachangyongAPI.html.vue"]]);export{h as default};
