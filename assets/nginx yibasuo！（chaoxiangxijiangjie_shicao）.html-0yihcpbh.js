import{_ as p,r as i,o as c,c as l,b as n,d as s,e,a as t}from"./app-84lPdggs.js";const o={},r=t('<h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言：</h1><p>nginx作为当今火爆的、高性能的http及反向代理服务，不管前端还是后端，都需要全面去了解，学习，实操。一句话：搞懂nginx如何使用以及工作逻辑对于程序员来说是必不可少的！</p><p>我们看看本文的大纲 先了解一下本文都讲了哪些东西，大纲如下：</p><ol><li>nginx介绍</li><li>nginx安装</li><li>nginx目录一览</li><li>nginx.conf文件解读</li><li>location路由匹配规则</li><li>反向代理</li><li>负载均衡</li><li>动静分离</li><li>跨域</li><li>缓存</li><li>黑白名单</li><li>nginx限流</li><li>https配置</li><li>压缩</li><li>其他一些常用指令与说明</li><li>重试策略</li><li>最后总结</li></ol><p><strong>一些说明：</strong></p>',5),d=n("li",null,"系统： centos7",-1),m=n("li",null,"本文使用nginx版本：nginx/1.24.0",-1),u={href:"https://juejin.cn/post/7293176193322729510",title:"https://juejin.cn/post/7293176193322729510",target:"_blank",rel:"noopener noreferrer"},b=n("li",null,"在学习nginx前，最好需要知道或者了解事件驱动思想以及几种常见多路复用I/O模型和Reactor模式，这样你才能从底层 更深刻的理解nginx的架构设计",-1),v=t('<h1 id="_1、nginx-介绍" tabindex="-1"><a class="header-anchor" href="#_1、nginx-介绍" aria-hidden="true">#</a> 1、nginx 介绍</h1><p>为了有一个全面的认知，接下来我们先来看看nginx的架构以及一些特点。</p><h2 id="_1-1、nginx-特点" tabindex="-1"><a class="header-anchor" href="#_1-1、nginx-特点" aria-hidden="true">#</a> 1.1、nginx 特点</h2><ol><li>处理响应请求快（异步非阻塞I/O，零拷贝，mmap，缓存机制）</li><li>扩展性好（模块化设计）</li><li>内存消耗低（异步非阻塞，多阶段处理）</li><li>具有很高的可靠性（无数次的生产验证，很多头部公司都在用）</li><li>热部署</li><li>高并发连接（事件驱动模型，多进程机制）</li><li>自由的BSD许可协议（可以自己修改代码后发布，包容性极强）</li></ol><h2 id="_1-2、nginx-架构" tabindex="-1"><a class="header-anchor" href="#_1-2、nginx-架构" aria-hidden="true">#</a> 1.2、nginx 架构</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2db0016998d447f1bf0c657454180238~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1986&amp;h=1182&amp;s=483033&amp;e=png&amp;b=f4f4f4" alt="image.png"> 从上边这张图，我们可以一览nginx的架构设计，首先我们可以直观得出<code>nginx的几大特点：</code></p><ol><li><p><strong>事件驱动&amp;异步非阻塞：</strong></p><blockquote><p>本质来说，<strong>事件驱动是一种思想（事实上它不仅仅局限于编程）</strong> ，事件驱动思想是实现 <strong>异步非阻塞特性</strong> 的一个重要手段。对于web服务器来说，造成性能拉胯不支持高并发的常见原因就是由于使用了传统的I/O模型造成在<code>内核没有可读/可写事件（或者说没有数据可供用户进程读写）时</code>，<strong>用户线程</strong> <code>一直在等待</code>（其他事情啥也干不了就是干等等待内核上的数据可读/可写），这样的话其实是一个线程（ps:线程在Linux系统也是进程）对应一个请求，请求是无限的，而线程是有限的从而也就形成了并发瓶颈。而大佬们为了解决此类问题，运用了事件驱动思想来对传统I/O模型做个改造，即在客户端发起请求后，用户线程<code>不再阻塞等待内核数据就绪</code>，而是<code>立即返回</code>（可以去执行其他业务逻辑或者继续处理其他请求）。当内核的I/O操作完成后，<code>内核系统</code>会向用户线程<code>发送一个事件通知</code>，用户线程才来处理这个读/写操作，之后拿到数据再做些其他业务后响应给客户端，从而完成一次客户端请求的处理。事件驱动的I/O模型中，程序不必阻塞等待I/O操作的完成，也无需为每个请求创建一个线程，从而提高了系统的并发处理能力和响应速度。<code>事件驱动型的I/O模型通常也被被称为I/O多路复用</code>，即这种模型可以在一个线程中，处理多个连接（复用就是指多个连接复用一个线程，多路也即所谓的 多个连接），通过这种方式避免了线程间切换的开销，同时也使得用户线程不再被阻塞，提高了系统的性能和可靠性。nginx支持事件驱动是因为他利用了操作系统提供的I/O多路复用接口，如Linux系统中，常用的I/O多路复用接口有select/poll，epoll。这些接口可以监视多个文件描述符的状态变化，当文件描述符可读或可写时，就会向用户线程发送一个事件通知。用户线程通过事件处理机制（读取/写入数据）来处理这个事件，之后进行对应的业务逻辑完了进行响应。<strong>简单一句话概括：</strong> <code>事件驱动机制就是指当有读/写/连接事件就绪时 再去做读/写/接受连接这些事情，而不是一直在那里傻傻的等，也正应了他的名词： 【事件驱动！】，基于事件驱动思想设计的多路复用I/O（如select/poll，epoll），相对于传统I/O模型，达到了异步非阻塞的效果！</code></p><p>既然提到了select/poll,epoll 那么我们就简单说一下（注意我这里是简单描述，后续有时间会对相关知识点从源码层面做个系统的整理和图解）：</p><p><strong>select：</strong> 将已连接的 Socket 都放到一个文件描述符集合，然后用户态调用 select 函数将文件描述符集合拷贝到内核里，让内核来检查是否有网络事件产生，检查的方式很粗暴，就是通过遍历文件描述符集合的方式，当检查到有事件产生后，将此 Socket 标记为可读或可写， 接着再把整个文件描述符集合拷贝回用户态里，然后用户态还需要再通过遍历的方法找到可读或可写的 Socket，然后再对其处理。</p><p><strong>poll：</strong> poll函数的话其实和select大差不差，唯一区别可能就是socket列表的结构有所不同，不再受FD_SETSIZE的限制。这里就不多说了。</p><p><strong>epoll：</strong> epoll在前边两者的基础上做了很大的优化，select/poll都需要遍历整个socket列表，当检测到传入的socket可读/可写时，则copy socket列表给用户空间，用户态仍然需要遍历（因为内核copy给用户态的是整个socket列表） ，而epoll则是通过红黑树结构将需要监控的socket插入到进去，然后当有socket可读时会通过回调机制来将其添加到可读列表中，然后内核将可读列表copy给用户态即可(据说此处使用了mmap这里我们不去验证探究，后续写相关文章时在深究吧)，整个过程少了无效的遍历以及不用copy整个socket集合。</p></blockquote></li><li><p><strong>多进程机制：</strong></p><blockquote><p>另外可以得知nginx有两种类型的进程，一种是Master主进程，一种是Worker工作进程。主进程主要负责3项工作：<code>加载配置</code>、<code>启动工作进程</code>及<code>非停升级</code>。另外work进程是主进程启动后，fork而来的。假设 Nginx fork了多个(具体在于你的配置)Worker进程，并且在Master进程中通过 socket 套接字监听（listen）80端口。然后每个worker进程都可以去 accept 这个监听的 socket。 当一个连接进来后，所有Worker进程，都会收到消息，但是只有一个Worker进程可以 accept 这个连接，其它的则 accept 失败，Nginx 保证只有一个Worker去accept的方式就是加锁（accept_mutex）。有了锁之后，在同一时刻，就只会有一个Worker进程去 accpet 连接，在 Worker 进程拿到 Http 请求后，就开始按照worker进程内的预置模块去处理该 Http 请求，最后返回响应结果并断开连接。其实如果熟悉reactor模型你会发现，nginx的设计有reactor的影子，只不过reactor的主reactor是会负责accept的，而nginx的主进程（对应主reactor） 是不会去accept的，而是交给了worker进程来处理。</p><p>worker进程除了accept连接之外，还会执行：网络读写、存储读写、内容传输、以及请求分发等等。而其代码的模块化设计，也使得我们可以根据需要对功能模块 进行适当的选择和修改，编译成符合特定需要/业务的服务器</p></blockquote></li><li><p><strong>proxy cache（服务端缓存）：</strong></p><blockquote><p>proxy cache主要实现 nginx 服务器对客户端数据请求的快速响应。nginx 服务器在接收到被代理服务器的响应数据之后，一方面将数据传递给客户端，另一方面根据proxy cache的配置将这些数据缓存到本地硬盘上。当客户端再次访问相同的数据时，nginx服务器直接从硬盘检索到相应的数据返回给用户，从而减少与被代理服务器交互的时间。在缓存数据时，运用了零拷贝以及mmap技术，使得数据copy性能大幅提升。</p></blockquote></li><li><p><strong>反向代理：</strong></p><blockquote><p>nginx的强大之处其中一个就是他的反向代理，通过反向代理，可以隐藏真正的服务，增加其安全性，同时便于统一管理处理请求，另外可以很容易的做个负载均衡，更好的面对高并发的场景。</p></blockquote></li></ol><h2 id="_1-3、nginx模块" tabindex="-1"><a class="header-anchor" href="#_1-3、nginx模块" aria-hidden="true">#</a> 1.3、nginx模块</h2><blockquote><p>nginx服务器由n多个模块组成，每个模块就是一个功能，某个模块只负责自身的功能，所以说对于 <strong><code>“高内聚，低耦合“</code></strong> 的编程规则，在<code>nginx</code>身上可谓<code>体现的淋漓尽致</code>。</p></blockquote><p><strong>nginx模块示意图如下：</strong> <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9abd5af68a4f4581b34e14af6810e3a7~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1306&amp;h=928&amp;s=154272&amp;e=png&amp;b=f8f6f2" alt="image.png"></p><ul><li><strong>核心模块</strong> ：是nginx 服务器正常运行必不可少的模块，提供错误日志记录、配置文件解析、事件驱动 机制、进程管理等核心功能</li><li><strong>标准HTTP模块</strong> ：提供 HTTP 协议解析相关的功能，如：端口配置、网页编码设置、HTTP 响应头设 置等</li><li><strong>可选HTTP模块</strong> ：主要用于扩展标准的 HTTP 功能，让nginx能处理一些特殊的服务，如：Flash 多 媒体传输、解析 GeoIP 请求、SSL 支持等</li><li><strong>邮件服务模块</strong> ：主要用于支持 nginx 的邮件服务，包括对 POP3 协议、IMAP 协议和 SMTP 协议的支持</li><li><strong>第三方模块</strong> ：是为了扩展 Nginx 服务器应用，完成开发者自定义功能，如：Json 支持、Lua 支持等</li></ul><h2 id="_1-4、nginx常见应用场景" tabindex="-1"><a class="header-anchor" href="#_1-4、nginx常见应用场景" aria-hidden="true">#</a> 1.4、nginx常见应用场景</h2><p>nginx常用场景挺多的，比如：</p><ul><li>反向代理</li><li>负载均衡</li><li>缓存</li><li>限流</li><li>黑/白名单</li><li>静态资源服务</li><li>动静分离</li><li>防盗链</li><li>跨域</li><li>高可用</li><li>.......</li></ul><p>其中我认为 <strong>最最</strong> 基础的也是应用最多的就是 <strong>反向代理</strong>，这里我们画个图简单看下什么是反向代理 （ps：其他的那些使用场景，我们先不做展开，放到下边一个个哔哔。）</p><p>所谓反向代理，其实很好理解就是代理的服务端（与之对应的正向代理一般代理的是客户端），<strong>nginx反向代理如下示意：</strong> <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12feb26340c74998bd7917f1a21d83fa~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1906&amp;h=1212&amp;s=132766&amp;e=png&amp;b=fdfdfd" alt="image.png"></p><hr><p><strong>好了介绍了这么多，想必到这里应该对nginx有个大体的了解了吧，接下来我们安装并一个一个的分析介绍nginx的知识点。</strong></p><h1 id="_2、nginx安装" tabindex="-1"><a class="header-anchor" href="#_2、nginx安装" aria-hidden="true">#</a> 2、nginx安装</h1>',19),h={href:"https://juejin.cn/post/7293176193322729510",title:"https://juejin.cn/post/7293176193322729510",target:"_blank",rel:"noopener noreferrer"},g=t(`<h1 id="_3、nginx目录一览" tabindex="-1"><a class="header-anchor" href="#_3、nginx目录一览" aria-hidden="true">#</a> 3、nginx目录一览</h1><p>我们使用 tree /usr/local/nginx/ -L 2 命令查看一下nginx的目录，对其结构有个初步的认识：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># tree  /usr/local/nginx/  -L 2</span>
/usr/local/nginx/
├── conf                        <span class="token comment">#存放一系列配置文件的目录</span>
│   ├── fastcgi.conf           <span class="token comment">#fastcgi程序相关配置文件</span>
│   ├── fastcgi.conf.default   <span class="token comment">#fastcgi程序相关配置文件备份</span>
│   ├── fastcgi_params         <span class="token comment">#fastcgi程序参数文件</span>
│   ├── fastcgi_params.default <span class="token comment">#fastcgi程序参数文件备份</span>
│   ├── koi-utf           <span class="token comment">#编码映射文件</span>
│   ├── koi-win           <span class="token comment">#编码映射文件</span>
│   ├── mime.types        <span class="token comment">#媒体类型控制文件</span>
│   ├── mime.types.default<span class="token comment">#媒体类型控制文件备份</span>
│   ├── nginx.conf        <span class="token comment">#主配置文件</span>
│   ├── nginx.conf.default<span class="token comment">#主配置文件备份</span>
│   ├── scgi_params      <span class="token comment">#scgi程序相关配置文件</span>
│   ├── scgi_params.default <span class="token comment">#scgi程序相关配置文件备份</span>
│   ├── uwsgi_params       <span class="token comment">#uwsgi程序相关配置文件</span>
│   ├── uwsgi_params.default<span class="token comment">#uwsgi程序相关配置文件备份</span>
│   └── win-utf          <span class="token comment">#编码映射文件</span>
├── html                 <span class="token comment">#存放网页文档</span>
│   ├── 50x.html         <span class="token comment">#错误页码显示网页文件</span>
│   └── index.html       <span class="token comment">#网页的首页文件</span>
├── logs                 <span class="token comment">#存放nginx的日志文件</span>
├── nginx-1.23.0.tar.gz <span class="token comment"># 我把压缩包下载到url/local/nginx/目录了，不用管这个</span>
├── sbin                <span class="token comment">#存放启动程序</span>
│   ├── nginx           <span class="token comment">#nginx启动程序</span>
│   └── nginx.old       
└── <span class="token builtin class-name">test</span>                <span class="token comment"># 我自己建的目录，不用管这个</span>
    ├── abc
    └── cba

<span class="token number">15</span> directories, <span class="token number">26</span> files
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从输出可以看到nginx分的很清晰，有配置目录，html目录，log目录，启动程序目录。</p><ul><li><p><strong>关于目录的一点小说明：</strong></p><p>上边的仅仅是nginx的主目录，事实上，生效的主配置文件一定是/usr/local/nginx/conf.conf ？这不一定，而是取决于你启动nginx时候有没有指定nginx.conf，实际使用中我发现我机器上有好几个地方都存在nginx.conf文件，使用 locate nginx.conf看一下 如下图所示： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26191e37310e42e4ae8e166927959eaf~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=904&amp;h=186&amp;s=29866&amp;e=png&amp;b=010101" alt="image.png"> 那如何确定nginx当前生效的是哪个nginx.conf呢，很简单使用nginx -T命令即可查看当前生效的nginx.conf，如下：可以看到我当前生效的是 /etc/nginx/nginx.conf这个文件（我是使用的 systemctl start nginx.service命令启动的，未指定用哪个文件启动，所以可以看出默认使用的是 /etc/nginx/nginx.conf这个配置文件） <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7cd376f7eec1444298216905fb5d2669~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1116&amp;h=196&amp;s=26459&amp;e=png&amp;b=010101" alt="image.png"> 另外还有一个就是nginx的日志，我发现我的nginx日志就不是在 /usr/local/nginx/logs/这个目录下，而是放到了/var/log/nginx/ 这个目录下了（ps：log文件的存放和我的nginx.conf文件中的 access_log配置有关系）。如下演示： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa46cd957f224031bb05950196630777~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3316&amp;h=1624&amp;s=335118&amp;e=png&amp;b=000000" alt="image.png"></p></li></ul><p>好了在了解了nginx整体的目录结构后，就来看看 <strong>nginx.conf</strong> 这个文件这个文件是nginx的核心配置，<strong>想玩转nginx，读懂这个配置文件是必不可少的一项基本功！</strong></p><h1 id="_4、nginx-conf文件-解读" tabindex="-1"><a class="header-anchor" href="#_4、nginx-conf文件-解读" aria-hidden="true">#</a> 4、nginx.conf文件 解读</h1><p>首先我们要知道<code>nginx.conf文件是由一个一个的指令块组成的</code>，nginx用{}标识一个指令块，指令块中再设置具体的指令(注意 指令必须以 ; 号结尾)，指令块有<code>全局块</code>，<code>events块</code>，<code>http块</code>，<code>server块</code>和<code>location块 以及 upstream块</code>。精简后的结构如下：</p><div class="language-vbscript line-numbers-mode" data-ext="vbscript"><pre class="language-vbscript"><code>全局模块
event模块
http模块
    upstream模块
    
    server模块
        location块
        location块
        ....
    server模块
        location块
        location块
        ...
    ....    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>各模块的功能作用如下描述：</strong></p><ol><li><strong>全局模块：</strong> 配置影响nginx全局的指令，比如运行nginx的用户名，nginx进程pid存放路径，日志存放路径，配置文件引入，worker进程数等。</li><li><strong>events块：</strong> 配置影响nginx服务器或与用户的网络连接。比如每个进程的最大连接数，选取哪种事件驱动模型（select/poll epoll或者是其他等等nginx支持的）来处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</li><li><strong>http块：</strong> 可以嵌套多个server，配置代理，缓存，日志格式定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</li><li><strong>server块：</strong> 配置虚拟主机的相关参数比如域名端口等等，一个http中可以有多个server。</li><li><strong>location块：</strong> 配置url路由规则</li><li><strong>upstream块：</strong> 配置上游服务器的地址以及负载均衡策略和重试策略等等</li></ol><p><strong>下面看下nginx.conf长啥样并对一些指令做个解释：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 注意：有些指令是可以在不同指令块使用的（需要时可以去官网看看对应指令的作用域）。我这里只是演示</span>
<span class="token comment"># 这里我以/usr/local/nginx/conf/nginx.conf文件为例</span>

<span class="token punctuation">[</span>root@localhost /usr/local/nginx<span class="token punctuation">]</span><span class="token comment"># cat /usr/local/nginx/conf/nginx.conf</span>

<span class="token comment">#user  nobody; # 指定Nginx Worker进程运行用户以及用户组，默认由nobody账号运行</span>
worker_processes  <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment"># 指定工作进程的个数，默认是1个。具体可以根据服务器cpu数量进行设置， 比如cpu有4个，可以设置为4。如果不知道cpu的数量，可以设置为auto。 nginx会自动判断服务器的cpu个数，并设置相应的进程数</span>
<span class="token comment">#error_log  logs/error.log;  # 用来定义全局错误日志文件输出路径，这个设置也可以放入http块，server块，日志输出级别有debug、info、notice、warn、error、crit可供选择，其中，debug输出日志最为最详细，而crit输出日志最少。</span>
<span class="token comment">#error_log  logs/error.log  notice;</span>
<span class="token comment">#error_log  logs/error.log  info; # 指定error日志位置和日志级别</span>
<span class="token comment">#pid        logs/nginx.pid;  # 用来指定进程pid的存储文件位置</span>

events <span class="token punctuation">{</span>
    accept_mutex on<span class="token punctuation">;</span>   <span class="token comment"># 设置网路连接序列化，防止惊群现象发生，默认为on</span>
    
    <span class="token comment"># Nginx支持的工作模式有select、poll、kqueue、epoll、rtsig和/dev/poll，其中select和poll都是标准的工作模式，kqueue和epoll是高效的工作模式，不同的是epoll用在Linux平台上，而kqueue用在BSD系统中，对于Linux系统，epoll工作模式是首选</span>
    use epoll<span class="token punctuation">;</span>
    
    <span class="token comment"># 用于定义Nginx每个工作进程的最大连接数，默认是1024。最大客户端连接数由worker_processes和worker_connections决定，即Max_client=worker_processes*worker_connections在作为反向代理时，max_clients变为：max_clients = worker_processes *worker_connections/4。进程的最大连接数受Linux系统进程的最大打开文件数限制，在执行操作系统命令“ulimit -n 65536”后worker_connections的设置才能生效</span>
    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token comment"># 对HTTP服务器相关属性的配置如下</span>
http <span class="token punctuation">{</span>
    include       mime.types<span class="token punctuation">;</span> <span class="token comment"># 引入文件类型映射文件 </span>
    default_type  application/octet-stream<span class="token punctuation">;</span> <span class="token comment"># 如果没有找到指定的文件类型映射 使用默认配置 </span>
    <span class="token comment"># 设置日志打印格式</span>
    <span class="token comment">#log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span>
    <span class="token comment">#                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span>
    <span class="token comment">#                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span>
    <span class="token comment"># </span>
    <span class="token comment">#access_log  logs/access.log  main; # 设置日志输出路径以及 日志级别</span>
    sendfile        on<span class="token punctuation">;</span> <span class="token comment"># 开启零拷贝 省去了内核到用户态的两次copy故在文件传输时性能会有很大提升</span>
    <span class="token comment">#tcp_nopush     on; # 数据包会累计到一定大小之后才会发送，减小了额外开销，提高网络效率</span>
    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span> <span class="token comment"># 设置nginx服务器与客户端会话的超时时间。超过这个时间之后服务器会关闭该连接，客户端再次发起请求，则需要再次进行三次握手。</span>
    <span class="token comment">#gzip  on; # 开启压缩功能，减少文件传输大小，节省带宽。</span>
    sendfile_max_chunk 100k<span class="token punctuation">;</span> <span class="token comment">#每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span>
    
    <span class="token comment"># 配置你的上游服务（即被nginx代理的后端服务）的ip和端口/域名</span>
    upstream backend_server <span class="token punctuation">{</span> 
        server <span class="token number">172.30</span>.128.65:8080<span class="token punctuation">;</span>
        server <span class="token number">172.30</span>.128.65:8081 backup<span class="token punctuation">;</span> <span class="token comment">#备机</span>
    <span class="token punctuation">}</span>

    server <span class="token punctuation">{</span>
        listen       <span class="token number">80</span><span class="token punctuation">;</span> <span class="token comment">#nginx服务器监听的端口</span>
        server_name  localhost<span class="token punctuation">;</span> <span class="token comment">#监听的地址 nginx服务器域名/ip 多个使用英文逗号分割</span>
        <span class="token comment">#access_log  logs/host.access.log  main; # 设置日志输出路径以及 级别，会覆盖http指令块的access_log配置</span>
        
        <span class="token comment"># location用于定义请求匹配规则。 以下是实际使用中常见的3中配置（即分为：首页，静态，动态三种）</span>
       
        <span class="token comment"># 第一种：直接匹配网站根目录，通过域名访问网站首页比较频繁，使用这个会加速处理，一般这个规则配成网站首页，假设此时我们的网站首页文件就是： usr/local/nginx/html/index.html</span>
        location <span class="token operator">=</span> / <span class="token punctuation">{</span>  
            root   html<span class="token punctuation">;</span> <span class="token comment"># 静态资源文件的根目录 比如我的是 /usr/local/nginx/html/</span>
            index  index.html index.htm<span class="token punctuation">;</span> <span class="token comment"># 静态资源文件名称 比如：网站首页html文件</span>
        <span class="token punctuation">}</span>
        <span class="token comment"># 第二种：静态资源匹配（静态文件修改少访问频繁，可以直接放到nginx或者统一放到文件服务器，减少后端服务的压力），假设把静态文件我们这里放到了 usr/local/nginx/webroot/static/目录下</span>
        location ^~ /static/ <span class="token punctuation">{</span>
            <span class="token builtin class-name">alias</span> /webroot/static/<span class="token punctuation">;</span> 访问 ip:80/static/xxx.jpg后，将会去获取/url/local/nginx/webroot/static/xxx.jpg 文件并响应
        <span class="token punctuation">}</span>
        <span class="token comment"># 第二种的另外一种方式：拦截所有 后缀名是gif,jpg,jpeg,png,css.js,ico这些 类静态的的请求，让他们都去直接访问静态文件目录即可</span>
        location ~* <span class="token punctuation">\\</span>.<span class="token punctuation">(</span>gif<span class="token operator">|</span>jpg<span class="token operator">|</span>jpeg<span class="token operator">|</span>png<span class="token operator">|</span>css<span class="token operator">|</span>js<span class="token operator">|</span>ico<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>
            root /webroot/static/<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment"># 第三种：用来拦截非首页、非静态资源的动态数据请求，并转发到后端应用服务器 </span>
        location / <span class="token punctuation">{</span>
            proxy_pass http://backend_server<span class="token punctuation">;</span> <span class="token comment">#请求转向 upstream是backend_server 指令块所定义的服务器列表</span>
            deny <span class="token number">192.168</span>.3.29<span class="token punctuation">;</span> <span class="token comment">#拒绝的ip （黑名单）</span>
            allow <span class="token number">192.168</span>.5.10<span class="token punctuation">;</span> <span class="token comment">#允许的ip（白名单）</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment"># 定义错误返回的页面，凡是状态码是 500 502 503 504 总之50开头的都会返回这个 根目录下html文件夹下的50x.html文件内容</span>
        error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html<span class="token punctuation">;</span>
        location <span class="token operator">=</span> /50x.html <span class="token punctuation">{</span>
            root   html<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
    <span class="token punctuation">}</span>
    <span class="token comment"># 其余的server配置 ,如果有需要的话</span>
    <span class="token comment">#server {</span>
        <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
    <span class="token comment">#    location / {</span>
               <span class="token punctuation">..</span><span class="token punctuation">..</span>
    <span class="token comment">#    }</span>
    <span class="token comment">#}</span>
    
    <span class="token comment"># include /etc/nginx/conf.d/*.conf;  # 一般我们实际使用中有很多配置，通常的做法并不是将其直接写到nginx.conf文件，</span>
    <span class="token comment"># 而是写到新文件 然后使用include指令 将其引入到nginx.conf即可，这样使得主配置nginx.conf文件更加清晰。</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就是nginx.conf文件的配置了，主要讲了一些指令的含义，当然实际的指令有很多，我在配置文件并没有全部写出来，准备放到后边章节详细阐述这些东西，比如：<strong>location匹配规则，反向代理，动静分离，负载均衡策略，重试策略，压缩，https,限流，缓存，跨域这些</strong> 我们都没细说，这些东西比较多比较细不可能把使用规则和细节都写到上边的配置文件中，所以我们下边一一解释说明关于这些东西的配置和使用方式。（另外值的注意的是： 因为有些指令是可以在不同作用域使用的，如果在多个作用域都有相同指令的使用，那么nginx将会遵循就近原则或者我愿称之为 <strong>内层配置优先</strong>。 eg: 你在 http配了日志级别，也在某个server中配了日志级别，那么这个server将使用他自己配置的已不使用外层的http日志配置）</p><h1 id="_5、location-路由匹配规则" tabindex="-1"><a class="header-anchor" href="#_5、location-路由匹配规则" aria-hidden="true">#</a> 5、location 路由匹配规则</h1><p><strong>什么是location? :</strong> nginx根据用户请求的URI来匹配对应的location模块，匹配到哪个location，请求将被哪个location块中的配置项所处理。</p><p>location配置语法：<code>location [修饰符] pattern {…}</code></p><p><strong>常见匹配规则如下：</strong></p><table><thead><tr><th>修饰符</th><th>作用</th></tr></thead><tbody><tr><td>空</td><td>无修饰符的前缀匹配，匹配前缀是 你配置的（比如说你配的是 /aaa） 的url</td></tr><tr><td>=</td><td>精确匹配</td></tr><tr><td>~</td><td>正则表达式模式匹配，区分大小写</td></tr><tr><td>~*</td><td>正则表达式模式匹配，不区分大小写</td></tr><tr><td>^~</td><td>^~类型的前缀匹配，类似于无修饰符前缀匹配，不同的是，如果匹配到了，那么就停止后续匹配</td></tr><tr><td>/</td><td>通用匹配，任何请求都会匹配到（只要你域名对，所有请求通吃！）</td></tr></tbody></table><h2 id="_5-1、前缀匹配-无修饰符" tabindex="-1"><a class="header-anchor" href="#_5-1、前缀匹配-无修饰符" aria-hidden="true">#</a> 5.1、前缀匹配（无修饰符）</h2><p>首先我提前创建了prefix_match.html文件，之后改一下nginx.conf文件（给前缀是 /prefixmatch 的请求返回 /etc/nginx/locatest/prefix_match.html 这个文件） ，如下： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ddbcfcc11c34bbd96c9fea044bf73d4~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=622&amp;h=378&amp;s=32366&amp;e=png&amp;b=010101" alt="image.png"></p>`,21),k={href:"http://www.locatest.com",title:"http://www.locatest.com",target:"_blank",rel:"noopener noreferrer"},f=n("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ec24b7ceb4046fda34c95041393ad95~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2420&h=2014&s=291249&e=png&b=010101",alt:"image.png"},null,-1),_=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> http://www.locatest.com/prefixmatch     ✅ <span class="token number">301</span>
<span class="token function">curl</span> http://www.locatest.com/prefixmatch?    ✅ <span class="token number">301</span>
<span class="token function">curl</span> http://www.locatest.com/PREFIXMATCH     ❌ <span class="token number">404</span>
<span class="token function">curl</span> http://www.locatest.com/prefixmatch/    ✅ <span class="token number">200</span>
<span class="token function">curl</span> http://www.locatest.com/prefixmatchmmm  ❌ <span class="token number">404</span>
<span class="token function">curl</span> http://www.locatest.com/prefixmatch/mmm ❌ <span class="token number">404</span>
<span class="token function">curl</span> http://www.locatest.com/aaa/prefixmatch/❌ <span class="token number">404</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 <code>域名/prefixmatch</code> 和<code>域名/prefixmatch?</code> 返回了301 ，原因在于prefixmatch映射的 /etc/nginx/locatest/ 是个目录，而不是个文件所以nginx提示我们301，这个我们不用管没关系，总之我们知道：<code>域名/prefixmatch</code>，<code>域名/prefixmatch?</code> 和<code>域名/prefixmatch/</code> 这三个url通过我们配置的 <strong>无修饰符前缀匹配规则</strong> 都能匹配上就行了。</p><p>ps：<em>为了方便，我们下边的几个location规则演示不再跳转静态文件了，而是直接return一句话。</em></p><h2 id="_5-2、精确匹配" tabindex="-1"><a class="header-anchor" href="#_5-2、精确匹配" aria-hidden="true">#</a> 5.2、精确匹配（ = ）</h2><p>为了演示精确匹配，我们再给nginx.conf文件增加一个location配置，如下标红处： <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/79c3aaedaedc46e2bdb4e1d21918ebb1~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=730&amp;h=498&amp;s=36209&amp;e=png&amp;b=000000" alt="image.png"></p><p>实际效果如下： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b20c9d644e64ee18f03901f9adf2263~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1342&amp;h=1142&amp;s=139125&amp;e=png&amp;b=010101" alt="image.png"></p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>locatest<span class="token punctuation">.</span>com<span class="token operator">/</span>exactmatch      ✅ <span class="token number">200</span>
<span class="token symbol">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>locatest<span class="token punctuation">.</span>com<span class="token operator">/</span>exactmatch？    ✅ <span class="token number">200</span>
<span class="token symbol">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>locatest<span class="token punctuation">.</span>com<span class="token operator">/</span>exactmatch<span class="token operator">/</span>     ❌ <span class="token number">404</span>
<span class="token symbol">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>locatest<span class="token punctuation">.</span>com<span class="token operator">/</span>exactmatchmmmm  ❌ <span class="token number">404</span>
<span class="token symbol">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>locatest<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token constant">EXACTMATCH</span>      ❌ <span class="token number">404</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出来精确匹配就是精确匹配，差一个字也不行！</p><h2 id="_5-3、前缀匹配" tabindex="-1"><a class="header-anchor" href="#_5-3、前缀匹配" aria-hidden="true">#</a> 5.3、前缀匹配（ ^~ ）</h2><p>我们上边说了不带任何修饰符的前缀匹配（5.1小节），这里我们看下 修饰符是 ^~的 前缀匹配和不带修饰符的前缀匹配有啥区别，先在ngnx.conf文件增加个location并配好如下： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/02a5131e4e7e41b68aa60fad6ca3a950~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=682&amp;h=390&amp;s=38232&amp;e=png&amp;b=010101" alt="image.png"> curl效果如下： <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/901e9f889df34413bd261db7f31807a9~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1446&amp;h=1168&amp;s=171046&amp;e=png&amp;b=010101" alt="image.png"></p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code>curl http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>locatest<span class="token punctuation">.</span>com<span class="token operator">/</span>exactprefixmatch     ✅ <span class="token number">200</span>
curl http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>locatest<span class="token punctuation">.</span>com<span class="token operator">/</span>exactprefixmatch<span class="token operator">/</span>    ✅ <span class="token number">200</span>
curl http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>locatest<span class="token punctuation">.</span>com<span class="token operator">/</span>exactprefixmatch<span class="token operator">?</span>    ✅ <span class="token number">200</span>
curl http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>locatest<span class="token punctuation">.</span>com<span class="token operator">/</span>exactprefixmatchmmm  ✅ <span class="token number">200</span>
curl http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>locatest<span class="token punctuation">.</span>com<span class="token operator">/</span>exactprefixmatch<span class="token operator">/</span>mmm ✅ <span class="token number">200</span>
curl http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>locatest<span class="token punctuation">.</span>com<span class="token operator">/</span>aaa<span class="token operator">/</span>exactprefixmatch ❌ <span class="token number">404</span>
curl http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>locatest<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token constant">EXACTPREFIXMATCH</span>     ❌ <span class="token number">404</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到带修饰符(<code>^~</code>)的前缀匹配 像：<code>域名/exactprefixmatchmmm</code> 和<code>域名/exactprefixmatch/mmm</code> 是可以匹配上的，而不带修饰符的前缀匹配这两个类型的url是匹配不上的直接返回了404 ，其他的和不带修饰符的前缀匹配似乎都差不多。</p><h2 id="_5-4、正则匹配-区分大小写" tabindex="-1"><a class="header-anchor" href="#_5-4、正则匹配-区分大小写" aria-hidden="true">#</a> 5.4、正则匹配（~ 区分大小写）</h2><p>ps：正则表达式的匹配，需要你对正则语法比较熟悉，熟悉语法后写匹配规则也就得心应手了。</p><p>添加个location并配置，如下：（ ^表示开头，$表示结尾） <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8f1374b3dbf4875bf0959c5b41bef3e~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=752&amp;h=360&amp;s=36101&amp;e=png&amp;b=000000" alt="image.png"> 实际效果如下： <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c6e2f9bfc3c4d159cca6c18d5e27d1f~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1422&amp;h=2088&amp;s=254957&amp;e=png&amp;b=010101" alt="image.png"></p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code>curl http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>locatest<span class="token punctuation">.</span>com<span class="token operator">/</span>regexmatch      ✅ <span class="token number">200</span>
curl http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>locatest<span class="token punctuation">.</span>com<span class="token operator">/</span>regexmatch<span class="token operator">/</span>     ❌ <span class="token number">404</span>
curl http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>locatest<span class="token punctuation">.</span>com<span class="token operator">/</span>regexmatch<span class="token operator">?</span>     ✅ <span class="token number">200</span>
curl http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>locatest<span class="token punctuation">.</span>com<span class="token operator">/</span>regexmatchmmm   ❌ <span class="token number">404</span>
curl http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>locatest<span class="token punctuation">.</span>com<span class="token operator">/</span>regexmatch<span class="token operator">/</span>mmm  ❌ <span class="token number">404</span>
curl http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>locatest<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token constant">REGEXMATCH</span>      ❌ <span class="token number">404</span>
curl http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>locatest<span class="token punctuation">.</span>com<span class="token operator">/</span>aaa<span class="token operator">/</span>regexmatch  ❌ <span class="token number">404</span>
curl http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>locatest<span class="token punctuation">.</span>com<span class="token operator">/</span>bbbregexmatch   ❌ <span class="token number">404</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到~修饰的正则是区分大小写的。接下来我们看下 不区分大小写的匹配。</p><h2 id="_5-5、正则匹配-不区分大小写" tabindex="-1"><a class="header-anchor" href="#_5-5、正则匹配-不区分大小写" aria-hidden="true">#</a> 5.5、正则匹配（~* 不区分大小写）</h2>`,18),x=n("img",{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d698156eb04349b4abe409bda34c32e1~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=984&h=354&s=37607&e=png&b=010101",alt:"image.png"},null,-1),w=n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/552f152769094533a332b4362ed18395~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1382&h=1872&s=235117&e=png&b=010101",alt:"image.png"},null,-1),j={href:"http://www.locatest.com/REGEXMATCH",title:"http://www.locatest.com/REGEXMATCH",target:"_blank",rel:"noopener noreferrer"},y=t(`<h2 id="_5-6、通用匹配" tabindex="-1"><a class="header-anchor" href="#_5-6、通用匹配" aria-hidden="true">#</a> 5.6、通用匹配（ / ）</h2><p>通用匹配使用一个 / 表示，可以匹配所有请求，一般nginx配置文件最后都会有一个通用匹配规则，当其他匹配规则均失效时，请求会被路由给通用匹配规则处理，如果没有配置通用匹配，并且其他所有匹配规则均失效时，nginx会返回404错误。 <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a014bb34510b4db1a141a4b3d9fb3cf0~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1016&amp;h=382&amp;s=41404&amp;e=png&amp;b=000000" alt="image.png"> 通用匹配实际效果： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3068466ae35c4400b3915b260eb2ec75~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1034&amp;h=710&amp;s=123910&amp;e=png&amp;b=020202" alt="image.png"> 可以看到通用匹配很好理解，只要你域名写对了，那么所有的url都会被匹配上，来者不拒的感觉。</p><h2 id="_5-7、关于location-匹配优先级" tabindex="-1"><a class="header-anchor" href="#_5-7、关于location-匹配优先级" aria-hidden="true">#</a> 5.7、关于location 匹配优先级</h2><p>上边我们说了6种location匹配规则，那么如果存在多个到底走哪个location呢？这就的说说location的匹配优先级了。先来看下nginx官网和stackoverflow上的资料如下： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aadcbf83cfa24e118bfd7f996b51c3dd~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2972&amp;h=1698&amp;s=626226&amp;e=png&amp;b=fefefe" alt="image.png"> <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/146fa555a03f42c7905ad4af477597c0~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2226&amp;h=1800&amp;s=471724&amp;e=png&amp;b=fcfcfc" alt="image.png"> 综上资料我们对<strong>location匹配优先级的总结如下：</strong></p><ol><li>优先走<code>精确匹配</code>，精确匹配命中时，直接走对应的location，停止之后的匹配动作。</li><li><code>无修饰符类型的前缀匹配</code>和 <code>^~ 类型的前缀匹配</code>命中时，收集命中的匹配，对比出最长的那一条并存起来(最长指的是与请求url匹配度最高的那个location)。</li><li><code>如果</code>步骤2中最长的那一条匹配<code>是^~类型的前缀匹配</code>，直接走此条匹配对应的location并<code>停止</code>后续匹配动作；如果步骤2<code>最长的那一条匹配</code>不是^~类型的前缀匹配（也就<code>是无修饰符的前缀匹配</code>），则<code>继续往下</code>匹配</li><li>按location的声明顺序，执行正则匹配，当找到第一个命中的正则location时，停止后续匹配。</li><li>都没匹配到，走通用匹配（ / ）（如果有配置的话），如果没配置通用匹配的话，上边也都没匹配上，到这里就是404了。</li></ol><p><strong>如果非要给修饰符排个序的话就是酱样子：</strong> <code>=</code> &gt; <code>^~</code> &gt; <code>正则</code> &gt; <code>无修饰符的前缀匹配</code> &gt; <code>/</code></p><p><em>ok关于location就到这里，location是一个很重要的点，学好这个才知道nginx到底是咋匹配url的。</em></p><h1 id="_6、反向代理" tabindex="-1"><a class="header-anchor" href="#_6、反向代理" aria-hidden="true">#</a> 6、反向代理</h1><p>反向代理示意图我们上边说过，这里再次粘一下： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12feb26340c74998bd7917f1a21d83fa~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1906&amp;h=1212&amp;s=132766&amp;e=png&amp;b=fdfdfd" alt="image.png"></p><p>接下来我们开始用一个小demo来演示反向代理的使用</p><h2 id="_6-1、服务准备" tabindex="-1"><a class="header-anchor" href="#_6-1、服务准备" aria-hidden="true">#</a> 6.1、服务准备</h2><p>首先将我本地的一个服务打成 胖jar： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b061b43645f469c86b008c7b8a341da~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3394&amp;h=2096&amp;s=633913&amp;e=png&amp;b=2c2c2c" alt="image.png"> 然后使用java -jar方式启动服务，且指定端口为8081：</p><div class="language-perl line-numbers-mode" data-ext="perl"><pre class="language-perl"><code>java <span class="token operator">-</span>jar <span class="token operator">/</span>Users<span class="token operator">/</span>hzz<span class="token operator">/</span>myself_project<span class="token operator">/</span>xzll<span class="token operator">/</span>study<span class="token operator">-</span>admin<span class="token operator">/</span>study<span class="token operator">-</span>admin<span class="token operator">-</span>service<span class="token operator">/</span>target<span class="token operator">/</span>study<span class="token operator">-</span>admin<span class="token operator">-</span>service<span class="token operator">.</span>jar <span class="token operator">--</span>server<span class="token operator">.</span>port<span class="token operator">=</span><span class="token number">8081</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88bd8441e4b0444f9966a97482248319~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3536&amp;h=1816&amp;s=837365&amp;e=png&amp;b=010101" alt="image.png"> 最后使用postman测试接口是否正常（注意此时还没被nginx代理，而是直接调的服务）： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d1179942c8e84befb0eed6e7b9238e88~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3238&amp;h=1396&amp;s=224332&amp;e=png&amp;b=fcfcfc" alt="image.png"> 启动服务并验证接口无误后，接下来我们修改nginx配置文件。让nginx反向代理我们的服务。</p><h2 id="_6-2、修改nginx-conf文件" tabindex="-1"><a class="header-anchor" href="#_6-2、修改nginx-conf文件" aria-hidden="true">#</a> 6.2、修改nginx.conf文件</h2><p>要让 <strong><code>nginx 代理</code></strong> 我们的 <strong><code>服务</code></strong> 很简单，简单描述一下就是 <strong><code>两步：</code></strong></p><ol><li><strong>通过upstream指令块来定义我们的上游服务（即被代理的服务）</strong></li><li><strong>通过location指令块中的 proxy_pass指令，指定该location要路由到哪个upstream</strong></li></ol><p>配置好1和2后，如果来了请求后 会通过url路由到对应的location, 然后nginx会将请求打到upstream定义的服务地址中去，下边我们看看：</p>`,18),z=n("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f39d0590e33a4fde83367db2665481d5~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1160&h=940&s=87778&e=png&b=000000",alt:"image.png"},null,-1),q={href:"http://mybackendserver/",title:"http://mybackendserver/",target:"_blank",rel:"noopener noreferrer"},$=n("strong",null,"后边这个斜线加和不加区别挺大的",-1),T=n("code",null,"加的话不会拼接/backend",-1),L=n("code",null,"而不加的话会拼接 /backend",-1),I=n("h2",{id:"_6-3、测试反向代理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-3、测试反向代理","aria-hidden":"true"},"#"),s(" 6.3、测试反向代理")],-1),S=n("p",null,"修改完后我们执行 nginx -s reload 命令重新加载nginx配置，然后再potsman中调用一下，如下：",-1),E=n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b20fc1bdc0fd41678904ae1859ad6255~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3562&h=160&s=78420&e=png&b=010101",alt:"image.png"},null,-1),H=n("code",null,"seLinux的限制",-1),C={href:"https://stackoverflow.com/questions/23948527/13-permission-denied-while-connecting-to-upstreamnginx",title:"https://stackoverflow.com/questions/23948527/13-permission-denied-while-connecting-to-upstreamnginx",target:"_blank",rel:"noopener noreferrer"},R={href:"http://www.proxytest.com",title:"http://www.proxytest.com",target:"_blank",rel:"noopener noreferrer"},P=n("img",{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fcf2fba55362411cb87886220be08b31~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3220&h=1416&s=227407&e=png&b=fdfdfd",alt:"image.png"},null,-1),M=n("img",{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6da779ef690a4df0b18e56f914e30ff6~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3134&h=328&s=82297&e=png&b=010101",alt:"image.png"},null,-1),A=t(`<h2 id="_6-4、反向代理流程与原理" tabindex="-1"><a class="header-anchor" href="#_6-4、反向代理流程与原理" aria-hidden="true">#</a> 6.4、反向代理流程与原理</h2><p>对于上边演示的反向代理案例的流程与原理，我们来个示意图如下：（这个图比较重要） <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cd983baf59944abb6510a3b717a8490~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2612&amp;h=1450&amp;s=259427&amp;e=png&amp;b=ffffff" alt="image.png"></p><p>接下来我们演示下负载均衡。</p><h1 id="_7、负载均衡" tabindex="-1"><a class="header-anchor" href="#_7、负载均衡" aria-hidden="true">#</a> 7、负载均衡</h1><p>说到负载均衡很多人应该并不陌生，总而言之负载均衡就是：避免高并发高流量时请求都聚集到某一个服务或者某几个服务上，而是让其均匀分配（或者能者多劳），从而减少高并发带来的系统压力，从而让服务更稳定。对于nginx来说，负载均衡就是从 <code>upstream</code> 模块定义的后端服务器列表中按照配置的负载策略选取一台服务器接受用户的请求。</p><h2 id="_7-1、准备3个不同端口的springboot服务" tabindex="-1"><a class="header-anchor" href="#_7-1、准备3个不同端口的springboot服务" aria-hidden="true">#</a> 7.1、准备3个不同端口的springboot服务</h2><p>想要演示负载均衡，我们首先得多搞几个服务，搞一个服务是没法儿演示的。所以我启动了3个不同端口（8081，8082，8083）的springboot服务，如下：</p><div class="language-perl line-numbers-mode" data-ext="perl"><pre class="language-perl"><code>java <span class="token operator">-</span>jar <span class="token operator">/</span>Users<span class="token operator">/</span>hzz<span class="token operator">/</span>myself_project<span class="token operator">/</span>xzll<span class="token operator">/</span>study<span class="token operator">-</span>admin<span class="token operator">/</span>study<span class="token operator">-</span>admin<span class="token operator">-</span>service<span class="token operator">/</span>target<span class="token operator">/</span>study<span class="token operator">-</span>admin<span class="token operator">-</span>service<span class="token operator">.</span>jar <span class="token operator">--</span>server<span class="token operator">.</span>port<span class="token operator">=</span><span class="token number">8081</span>
java <span class="token operator">-</span>jar <span class="token operator">/</span>Users<span class="token operator">/</span>hzz<span class="token operator">/</span>myself_project<span class="token operator">/</span>xzll<span class="token operator">/</span>study<span class="token operator">-</span>admin<span class="token operator">/</span>study<span class="token operator">-</span>admin<span class="token operator">-</span>service<span class="token operator">/</span>target<span class="token operator">/</span>study<span class="token operator">-</span>admin<span class="token operator">-</span>service<span class="token operator">.</span>jar <span class="token operator">--</span>server<span class="token operator">.</span>port<span class="token operator">=</span><span class="token number">8082</span>
java <span class="token operator">-</span>jar <span class="token operator">/</span>Users<span class="token operator">/</span>hzz<span class="token operator">/</span>myself_project<span class="token operator">/</span>xzll<span class="token operator">/</span>study<span class="token operator">-</span>admin<span class="token operator">/</span>study<span class="token operator">-</span>admin<span class="token operator">-</span>service<span class="token operator">/</span>target<span class="token operator">/</span>study<span class="token operator">-</span>admin<span class="token operator">-</span>service<span class="token operator">.</span>jar <span class="token operator">--</span>server<span class="token operator">.</span>port<span class="token operator">=</span><span class="token number">8083</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 command+D 对iterm2进行分屏 ，最左侧是8081端口，中间是8082，右侧是8083： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ff1fcf675f74538ab25a0808abc8d5d~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3550&amp;h=1950&amp;s=1320742&amp;e=png&amp;b=232323" alt="image.png"> 接下来我们说一下负载策略再开始。</p><h2 id="_7-2、nginx常用的负载策略" tabindex="-1"><a class="header-anchor" href="#_7-2、nginx常用的负载策略" aria-hidden="true">#</a> 7.2、nginx常用的负载策略:</h2><table><thead><tr><th>负载策略</th><th>描述</th><th>特点</th></tr></thead><tbody><tr><td>轮询</td><td>默认方式</td><td>1. 每个请求会按时间顺序逐一分配到不同的后端服务器</td></tr><tr><td>2. 在轮询中，如果服务器down掉了，会自动剔除该服务器</td><td></td><td></td></tr><tr><td>3. 缺省配置就是轮询策略</td><td></td><td></td></tr><tr><td>4. 此策略适合服务器配置相当，无状态且短平快的服务使用</td><td></td><td></td></tr><tr><td>weight</td><td>权重方式</td><td>1. 在轮询策略的基础上指定轮询的几率</td></tr><tr><td>2. 权重越高分配到的请求越多</td><td></td><td></td></tr><tr><td>3. 此策略可以与least_conn和ip_hash结合使用</td><td></td><td></td></tr><tr><td>4. 此策略比较适合服务器的硬件配置差别比较大的情况</td><td></td><td></td></tr><tr><td>ip_hash</td><td>依据ip的hash值来分配</td><td>1. 在nginx版本1.3.1之前，不能在ip_hash中使用权重（weight）</td></tr><tr><td>2. ip_hash不能与backup同时使用</td><td></td><td></td></tr><tr><td>3. 此策略适合有状态服务，比如session</td><td></td><td></td></tr><tr><td>4. 当有服务器需要剔除，必须手动down掉</td><td></td><td></td></tr><tr><td>least_conn</td><td>最少连接方式</td><td>1. 此负载均衡策略适合请求处理时间长短不一造成服务器过载的情况</td></tr><tr><td>fair（第三方）</td><td>响应时间方式</td><td>1. 根据后端服务器的响应时间来分配请求，响应时间短的优先分配</td></tr><tr><td>2. Nginx本身不支持fair，如果需要这种调度算法，则必须安装upstream_fair模块</td><td></td><td></td></tr><tr><td>url_hash（第三方）</td><td>依据URL分配方式</td><td>1. 按访问的URL的哈希结果来分配请求，使每个URL定向到一台后端服务器</td></tr><tr><td>2. Nginx本身不支持url_hash，如果需要这种调度算法，则必须安装Nginx的hash软件包</td><td></td><td></td></tr></tbody></table><h3 id="_7-2-1、轮询" tabindex="-1"><a class="header-anchor" href="#_7-2-1、轮询" aria-hidden="true">#</a> 7.2.1、轮询</h3><p>轮询策略是默认的，所以只需要如下这样修改配置文件就可以了： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce021eaa72194ccea51dc6f699c55e95~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1186&amp;h=938&amp;s=102633&amp;e=png&amp;b=000000" alt="image.png"> 重启nginx后观察一下： <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e2166f81edf34ec5a8b4e932753a4e75~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3542&amp;h=1922&amp;s=980779&amp;e=png&amp;b=2b2b2b" alt="image.png"> 以上图片可以看到，是按upstream中的先后顺序来进行轮询的。</p><h3 id="_7-2-2、weight" tabindex="-1"><a class="header-anchor" href="#_7-2-2、weight" aria-hidden="true">#</a> 7.2.2、weight</h3><p>weight指令用于指定轮询机率，weight的默认值为1，weight的数值与访问比率成正比。 接下来我们指定8082端口的服务的weight=2，如下： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3243101b8ce348ce901e5bb72e4e16c8~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1182&amp;h=950&amp;s=99825&amp;e=png&amp;b=010101" alt="image.png"> 看下权重策略下的请求结果： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5281831071b4af89abbcab0872bbca3~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3554&amp;h=1958&amp;s=1160694&amp;e=png&amp;b=222222" alt="image.png"> 可以看到在一轮轮询中，8081命中1次，8082由于配置了 weight=2所以命中了2次，8083命中了1次。即配置了weight=2的8082服务，命中几率是8081或者8083的两倍</p><h3 id="_7-2-3、ip-hash" tabindex="-1"><a class="header-anchor" href="#_7-2-3、ip-hash" aria-hidden="true">#</a> 7.2.3、ip_hash</h3><p>设定ip哈希很简单，就是在你的upstream中 指定 <code>ip_hash;</code>即可，如下： <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/65caa05e4c074534b40d5e9d980c871a~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1156&amp;h=920&amp;s=89812&amp;e=png&amp;b=010101" alt="image.png"> 重启nginx后看下效果： <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea9f2b9e30cf4bba9f57b33ecbc87976~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3542&amp;h=1948&amp;s=576034&amp;e=png&amp;b=282828" alt="image.png"> 可以看到，由于我的访问ip总是固定的宿主机的172.30.128.64 根据hash算法我的ip被匹配给了8083端口的服务，所以只要我不换ip 不管我请求多少次，请求都是被 转发到了8083的服务上了。</p><h3 id="_7-2-4、least-conn" tabindex="-1"><a class="header-anchor" href="#_7-2-4、least-conn" aria-hidden="true">#</a> 7.2.4、least_conn</h3>`,18),U=n("code",null,"least_conn;",-1),N=n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66c66d671b044574aa52abe89e4f1133~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1116&h=960&s=110038&e=png&b=000000",alt:"image.png"},null,-1),O={href:"https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/",title:"https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/",target:"_blank",rel:"noopener noreferrer"},D=t(`<h1 id="_8、动静分离" tabindex="-1"><a class="header-anchor" href="#_8、动静分离" aria-hidden="true">#</a> 8、动静分离</h1><p>在说动静分离前，我们要知道为何要做动静分离以及他能解决啥问题，首先，我们常见的web系统中会有大量的静态资源文件比如掘金主页面刷新后的f12如下： <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8215059d01a645e7a6ea31a4abec3314~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1924&amp;h=1714&amp;s=739313&amp;e=png&amp;b=fefefe" alt="image.png"> 可以看到有很多静态资源，如果将这些资源都搞到后端服务的话，将会提高后端服务的压力且占用带宽增加了系统负载（要知道，静态资源的访问频率其实蛮高的）所以为了避免该类问题我们可以把不常修改的静态资源文件放到nginx的静态资源目录中去，这样在访问静态资源时直接读取nginx服务器本地文件目录之后返回，这样就大大减少了后端服务的压力同时也加快了静态资源的访问速度，何为静，何为动呢？：</p><ol><li><strong>静：</strong> 将不常修改且访问频繁的静态文件，放到nginx本地静态目录（当然也可以搞个静态资源服务器专门存放所有静态文件）</li><li><strong>动：</strong> 将变动频繁/实时性较高的比如后端接口，实时转发到对应的后台服务</li></ol><p>接下来我们将构造一个html页面，然后点击按钮后发送get请求到后端接口。流程如下： <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8418a768c2784f908ef61074ffc7b8a4~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1146&amp;h=708&amp;s=95694&amp;e=png&amp;b=ffffff" alt="image.png"></p><h2 id="_8-1、准备工作" tabindex="-1"><a class="header-anchor" href="#_8-1、准备工作" aria-hidden="true">#</a> 8.1、准备工作</h2><p>首先我们搞个html（请原谅我这粗糙的前端代码😂😂）,内容如下： <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa5b2655fc014eadbe37f5670d575413~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2318&amp;h=1974&amp;s=470447&amp;e=png&amp;b=1f1f1f" alt="image.png"> 之后使用</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code>scp <span class="token operator">/</span>Users<span class="token operator">/</span>hzz<span class="token operator">/</span>fsdownload<span class="token operator">/</span>index_page<span class="token punctuation">.</span>html root@<span class="token number">172.30</span><span class="token number">.128</span><span class="token number">.65</span><span class="token operator">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>test<span class="token operator">/</span>static
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令将index_page.html 文件上传到虚拟机。</p><h2 id="_8-2、修改nginx-conf文件" tabindex="-1"><a class="header-anchor" href="#_8-2、修改nginx-conf文件" aria-hidden="true">#</a> 8.2、修改nginx.conf文件</h2><p>首先我们配置俩location规则,一个（ /frontend ）是读取静态文件，一个（/backend）是转发到 我们配置的upstream服务中去。如下： <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb0421cc4d1c47a788e8a06c597a9da8~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1368&amp;h=1590&amp;s=170684&amp;e=png&amp;b=000000" alt="image.png"></p><h2 id="_8-3、演示" tabindex="-1"><a class="header-anchor" href="#_8-3、演示" aria-hidden="true">#</a> 8.3、演示</h2>`,11),G={href:"http://www.proxytest.com/frontend/",title:"http://www.proxytest.com/frontend/",target:"_blank",rel:"noopener noreferrer"},B=n("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b2684cbef96645298fc0cd904579265a~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3548&h=1980&s=719150&e=png&b=ffffff",alt:"image.png"},null,-1),W=n("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9e17b5fbfdbc4b56a36fe271dca2beb8~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3516&h=1884&s=930330&e=png&b=ffffff",alt:"image.png"},null,-1),X=n("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25b739593cea436da5597cd299861115~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3416&h=1686&s=609426&e=png&b=ffffff",alt:"image.png"},null,-1),V=n("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/085c8b4eb6a747ef8694a3fbc043f9b2~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3584&h=296&s=63836&e=png&b=000000",alt:"image.png"},null,-1),K=t(`<p>ok到这里动静分离就演示完了，接下来我们看下跨域</p><h1 id="_9、跨域" tabindex="-1"><a class="header-anchor" href="#_9、跨域" aria-hidden="true">#</a> 9、跨域</h1><h2 id="_9-1、为何会产生跨域" tabindex="-1"><a class="header-anchor" href="#_9-1、为何会产生跨域" aria-hidden="true">#</a> 9.1、为何会产生跨域？</h2><p>产生跨域问题的主要原因就在于同源策略，为了保证用户信息安全，防止恶意网站窃取数据，同源策略是必须的，该政策由 Netscape 公司于1995年引入浏览器。目前，所有浏览器都实行这个政策。同源策略主要是指三点相同即：<strong>协议+域名+端口 相同的两个请求</strong>，则可以被看做<strong>是同源</strong>的，但如果<strong>其中任意一点存在不同</strong>，则代表是<strong>两个不同源的请求</strong>，同源策略会限制不同源之间的资源交互从而减少数据安全问题。</p><h2 id="_9-2、跨域演示" tabindex="-1"><a class="header-anchor" href="#_9-2、跨域演示" aria-hidden="true">#</a> 9.2、跨域演示</h2><p>首先我在nginx.conf文件中加一个server配置也即将前后端配成不同的server 并且监听的端口以及域名名称都不一致，从而<code>造成</code>访问<code>前端服务和后端服务</code>时候 这俩服务<code>不是&quot;同源&quot;</code>， 如下： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/820db4f4dfe643a88f3c628f23cfa392~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1288&amp;h=1590&amp;s=159800&amp;e=png&amp;b=000000" alt="image.png"> 之后我修改index_page中的后端地址： <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3165e5e643d404c90e6dbb402530a7d~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1898&amp;h=1072&amp;s=243627&amp;e=png&amp;b=1f1f1f" alt="image.png"> 重启nginx，并配置宿主机的hosts文件：</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>172.30.128.65 www.front.com
<span class="token target symbol">172.30.128.65</span><span class="token punctuation">:</span>90  www.backend.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>之后在浏览器中测试一下： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c4432be0fc544d3a63fa4e6b312cd9c~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3196&amp;h=1596&amp;s=303575&amp;e=png&amp;b=f7f7f7" alt="image.png"> 可以看到浏览器提示我们受同源规则影响我们不能跨域访问资源。造成的原因是我的两个域名解析出来的端口不一致 一个是80一个是90。不符合同源策略，所以必然会有跨域报错。</p><h2 id="_9-3、nginx解决跨域" tabindex="-1"><a class="header-anchor" href="#_9-3、nginx解决跨域" aria-hidden="true">#</a> 9.3、nginx解决跨域</h2>`,9),F=n("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b7c974e3c1647a78ebb7217b7e838f1~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1426&h=1416&s=147711&e=png&b=000000",alt:"image.png"},null,-1),J={href:"http://www.xxxadminsystem.com/page/",title:"http://www.xxxadminsystem.com/page/",target:"_blank",rel:"noopener noreferrer"},Y=n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f62b80ed64d42ba96a189d6d84c3371~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3548&h=2052&s=933049&e=png&b=fefefe",alt:"image.png"},null,-1),Z=n("img",{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2bf18e319e7249e1841e8e8e08089c05~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3570&h=2020&s=883770&e=png&b=ffffff",alt:"image.png"},null,-1),Q=n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3e328b4af14142dfad71ad39cfc09d68~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2454&h=1430&s=454537&e=png&b=ffffff",alt:"image.png"},null,-1),nn=t('<ul><li><p>当然有些资料上有说使用 设置header的方式解决跨域，但是在实际测试中，设置header的方式始终没解决跨域，试了好久也没解决掉😂😂，有试过此方式解决的大佬帮忙看看我这是哪里配错了还是咋的在此提前感谢了。</p><blockquote><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab1b5d522d2f45b1a3ce5d7353f4c9c2~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1680&amp;h=1880&amp;s=395837&amp;e=png&amp;b=010101" alt="image.png"></p></blockquote></li></ul><h1 id="_10、缓存" tabindex="-1"><a class="header-anchor" href="#_10、缓存" aria-hidden="true">#</a> 10、缓存</h1><p>在开头我们就介绍过，nginx代理缓存可以在某些场景下有效的减少服务器压力，让请求快速响应，从而提升用户体验和服务性能，那么nginx缓存如何使用呢？在使用及演示前我们先来熟悉下相关的配置以及其含义，知道了这些才能更好的使用nginx缓存。</p><h2 id="_10-1、nginx缓存配置参数表格一览" tabindex="-1"><a class="header-anchor" href="#_10-1、nginx缓存配置参数表格一览" aria-hidden="true">#</a> 10.1、nginx缓存配置参数表格一览</h2>',4),sn=n("thead",null,[n("tr",null,[n("th",null,"指令名称"),n("th",null,"作用解释"),n("th",null,"语法"),n("th",null,"默认配置"),n("th",null,"示例"),n("th",null,"作用域")])],-1),an=n("tr",null,[n("td",null,"proxy_cache"),n("td",null,"设置是否开启对后端响应的缓存。"),n("td",null,"proxy_cache zone"),n("td",null,"off;"),n("td",null,"proxy_cache off;"),n("td",null,"proxy_cache mycache; # 规定开启nginx缓存并且缓存名称为: mycache")],-1),en=n("tr",null,[n("td",null,"proxy_cache_valid"),n("td",null,"配置什么状态码可以被缓存，以及缓存时长"),n("td",null,"proxy_cache_valid [code ...] time;"),n("td",null,"没有默认值"),n("td",null,"proxy_cache_valid 200 304 2m; # 对于状态为200和304的缓存文件，缓存时间是2分钟"),n("td",null,"http, server, location")],-1),tn=n("tr",null,[n("td",null,"proxy_cache_key"),n("td",null,"设置缓存文件的 key"),n("td",null,"proxy_cache_key string;"),n("td",null,"proxy_cache_key schemeschemeschemeproxy_host$request_uri;"),n("td",null,'proxy_cache_key "hosthosthostrequest_uri $cookie_user"; # 使用host +请求的uri以及cookie拼接成缓存key'),n("td",null,"http, server, location")],-1),pn=n("td",null,"proxy_cache_path",-1),cn={href:"https://nginx.org/en/docs/http/ngx_http_proxy_module.html?_ga=2.13518455.1300709501.1700036543-1660479828.1698914648#proxy_cache_path",title:"https://nginx.org/en/docs/http/ngx_http_proxy_module.html?_ga=2.13518455.1300709501.1700036543-1660479828.1698914648#proxy_cache_path",target:"_blank",rel:"noopener noreferrer"},ln=n("td",null,"proxy_cache_path path [levels=levels] [use_temp_path=on",-1),on=n("td",null,"off] keys_zone=name:size [inactive=time] [max_size=size] [min_free=size] [manager_files=number] [manager_sleep=time] [manager_threshold=time] [loader_files=number] [loader_sleep=time] [loader_threshold=time] [purger=on",-1),rn=n("td",null,"off] [purger_files=number] [purger_sleep=time] [purger_threshold=time];",-1),dn=n("td",null,"无",-1),mn=n("tr",null,[n("td",null,"proxy_cache_bypass"),n("td",null,'定义不从缓存中获取响应数据的条件。如果字符串参数中至少有一个值不为空且不等于" 0 "，则不会从缓存中获取响应:'),n("td",null,"proxy_cache_bypass string ...;"),n("td",null,"没有默认值"),n("td",null,"proxy_cache_bypass cookienocachecookie_nocache cookien​ocachearg_nocache$arg_comment;"),n("td",null,"http, server, location")],-1),un=n("tr",null,[n("td",null,"proxy_cache_min_uses"),n("td",null,"指定某一个相同请求在几次请求之后才缓存响应内容"),n("td",null,"proxy_cache_min_uses number;"),n("td",null,"proxy_cache_min_uses 1;"),n("td",null,"proxy_cache_min_uses 3; 规定某一个请求在第3次之后才走nginx缓存"),n("td",null,"http, server, location")],-1),bn=n("tr",null,[n("td",null,"proxy_cache_use_stale"),n("td",null,"指定后端服务器在返回什么状态码的情况下可以使用过期的缓存"),n("td",null,"proxy_cache_use_stale error timeout invalid_header http_500 http_502 http_503 ..."),n("td",null,"off ;"),n("td",null,"proxy_cache_use_stale off;"),n("td",null,"proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504; # 规定服务在出现error timeout,以及502,503,504时可使用过期缓存")],-1),vn=n("tr",null,[n("td",null,"proxy_cache_lock"),n("td",null,"默认不开启，开启后若出现并发重复请求，nginx只让一个请求去后端读数据，其他的排队并尝试从缓存中读取;"),n("td",null,"proxy_cache_lock on"),n("td",null,"off;"),n("td",null,"proxy_cache_lock off;"),n("td",null,"proxy_cache_lock on; # 开启缓存锁")],-1),hn=n("tr",null,[n("td",null,"proxy_cache_lock_timeout"),n("td",null,"等待缓存锁(proxy_cache_lock)超时之后将直接请求后端，且结果不会被缓存"),n("td",null,"proxy_cache_lock_timeout time;"),n("td",null,"proxy_cache_lock_timeout 5s;"),n("td",null,"proxy_cache_lock_timeout 6s; # 等待缓存锁超时（6ms）之后将直接请求后端，结果不会被缓存。"),n("td",null,"http, server, location")],-1),gn=n("tr",null,[n("td",null,"proxy_cache_methods"),n("td",null,"如果客户端请求方法在该指令中，则响应将被缓存。“GET”和“HEAD”方法总是被添加到列表中，尽管建议显式地指定它"),n("td",null,"proxy_cache_methods GET"),n("td",null,"HEAD"),n("td",null,"POST ...;"),n("td",null,"proxy_cache_methods GET HEAD;")],-1),kn=n("tr",null,[n("td",null,".............."),n("td",null,".........."),n("td",null,".........."),n("td",null,".........."),n("td",null,".........."),n("td",null,"..........")],-1),fn=n("strong",null,"ngx_http_proxy_module",-1),_n=n("strong",null,"代理缓存proxy_cache相关的指令远不止这些",-1),xn={href:"https://nginx.org/en/docs/http/ngx_http_proxy_module.html?_ga=2.13518455.1300709501.1700036543-1660479828.1698914648#proxy_cache",title:"https://nginx.org/en/docs/http/ngx_http_proxy_module.html?_ga=2.13518455.1300709501.1700036543-1660479828.1698914648#proxy_cache",target:"_blank",rel:"noopener noreferrer"},wn=n("img",{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/17766455a2f74e7ab69e249594eb5756~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2650&h=1946&s=473524&e=png&b=fbfbfb",alt:"image.png"},null,-1),jn=t(`<h2 id="_10-2、nginx缓存使用与效果演示" tabindex="-1"><a class="header-anchor" href="#_10-2、nginx缓存使用与效果演示" aria-hidden="true">#</a> 10.2、nginx缓存使用与效果演示</h2><p><strong>首先我们想要的效果是：</strong> 将 <strong>url+参数一样</strong> 的请求的结果，缓存到nginx。</p><p>接下来我们修改下nginx.conf文件,如下：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code>http{
    ...
    <span class="token comment"># 指定缓存存放目录为/usr/local/nginx/test/nginx_cache_storage，并设置缓存名称为mycache，大小为64m， 1天未被访问过的缓存将自动清除，磁盘中缓存的最大容量为1gb</span>
    <span class="token key attr-name">proxy_cache_path /usr/local/nginx/test/nginx_cache_storage levels</span><span class="token punctuation">=</span><span class="token value attr-value">1:2 keys_zone=mycache:64m inactive=1d max_size=1g;</span>
    ...
    
    server{
        ...
        <span class="token comment">#  指定 username 参数中只要有字母 就不走nginx缓存  </span>
        if ($arg_username ~ [a-z]) {
             set $cache_name &quot;no cache&quot;;
        }
        
        location  /interface {
                   proxy_pass http://mybackendserver/;
                   <span class="token comment"># 使用名为 mycache 的缓存空间</span>
                   proxy_cache mycache;
                   <span class="token comment"># 对于200 206 状态码的数据缓存2分钟</span>
                   proxy_cache_valid 200 206 1m;
                   <span class="token comment"># 定义生成缓存键的规则（请求的url+参数作为缓存key）</span>
                   proxy_cache_key $host$uri$is_args$args;
                   <span class="token comment"># 资源至少被重复访问2次后再加入缓存</span>
                   proxy_cache_min_uses 3;
                   <span class="token comment"># 出现重复请求时，只让其中一个去后端读数据，其他的从缓存中读取</span>
                   proxy_cache_lock on;
                   <span class="token comment"># 上面的锁 超时时间为4s，超过4s未获取数据，其他请求直接去后端</span>
                   proxy_cache_lock_timeout 4s;
                   <span class="token comment"># 对于请求参数中有字母的 不走nginx缓存</span>
                   proxy_no_cache $cache_name; # 判断该变量是否有值，如果有值则不进行缓存，没有值则进行缓存
                   <span class="token comment"># 在响应头中添加一个缓存是否命中的状态（便于调试）</span>
                   add_header Cache-status $upstream_cache_status;    
        }
        ...
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/74810a8e148442b3a8e4261fb735fb8f~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2258&amp;h=1738&amp;s=346084&amp;e=png&amp;b=000000" alt="image.png"></p><p>ps: 在上边配置文件中除了缓存相关的配置，我们还加了一个参数：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>add_header Cache-status <span class="token variable">$upstream_cache_status</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>这个参数可以方便从响应头看到是否命中了nginx缓存，方便我们观察，其不同的值有不同的含义，upstream_cache_status的值集合如下：</p><p>MISS：请求未命中缓存<br> HIT：请求命中缓存。<br> EXPIRED：请求命中缓存但缓存已过期。<br> STALE：请求命中了陈旧缓存。<br> REVALIDDATED：Nginx验证陈旧缓存依然有效。<br> UPDATING：命中的缓存内容陈旧，但正在更新缓存。<br> BYPASS：响应结果是从原始服务器获取的。</p></blockquote><p>nginx.conf文件配好后，在请求之前先看下数据库 “hzznb” 和 “张无忌” 都是存在的，如下： <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c965cc026144f94805a82c97c80663d~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2194&amp;h=456&amp;s=226716&amp;e=png&amp;b=2e2e2e" alt="image.png"></p><p>接下来我们<code>分别查询 张无忌 和 hzznb</code> 来看看缓存命中情况：</p><p>查询usernam=<code>张无忌；</code> 第一次（未命中，因为此 url+参数 之前没请求过缓存中确实没有）： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05c283c6753a4f20b03745d3dea240de~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3508&amp;h=1618&amp;s=483677&amp;e=png&amp;b=fdfdfd" alt="image.png"> 第二次也未命中就不截图了</p><p>第三次（未命中）： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce285146c833461f9f405d9d12a12eb7~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3476&amp;h=1486&amp;s=438841&amp;e=png&amp;b=ffffff" alt="image.png"> 第四次（<strong>命中</strong>）： <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87dfb978af614a659333ba2bc990843d~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3476&amp;h=1670&amp;s=491789&amp;e=png&amp;b=ffffff" alt="image.png"></p><p>查询usernam=<code>hzznb；</code> 第一次(未命中)： <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c576e4715344e6abc4560fc7812be03~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3508&amp;h=1478&amp;s=413353&amp;e=png&amp;b=ffffff" alt="image.png"> 第2,3次也都是miss 即未命中（截图略）</p><p>第四次：（仍然是未命中，说明我们在nginx.conf中配置的规则：”参数中带字母则不缓存“ 生效了！）： <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/985388c367c14e8d9e1b53cd3093aede~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3506&amp;h=1616&amp;s=497156&amp;e=png&amp;b=fdfdfd" alt="image.png"></p><h1 id="_11、黑白名单" tabindex="-1"><a class="header-anchor" href="#_11、黑白名单" aria-hidden="true">#</a> 11、黑白名单</h1><p>nginx黑白名单比较简单，allow后配置你的白名单，deny后配置你的黑名单，在实际使用中，我们一般都是建个黑名单和白名单的文件然后再nginx.copnf中incluld一下，这样保持主配置文件整洁，也好管理。下边我为了方便就直接在主配置写了。</p><h2 id="_11-1、语法作用域" tabindex="-1"><a class="header-anchor" href="#_11-1、语法作用域" aria-hidden="true">#</a> 11.1、语法作用域</h2><p>关于黑白名单的语法和作用，我们直接看下官网的示例： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/19d8b4060ade4e80bd57ec018630db22~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2664&amp;h=2058&amp;s=556935&amp;e=png&amp;b=fdfdfd" alt="image.png"> 可以看到ip 可以是ipv4 也可以是ipv6 也可以按照网段来配置，当然ip黑白配置可以在 http，server，location和limit_except这几个域都可以区别只是作用粒度大小问题。当然nginx建议我们使用 ngx_http_geo_module这个库，ngx_http_geo_module库支持 按地区、国家进行屏蔽，并且提供了IP库，当需要配置的名单比较多或者根据地区国家屏蔽时这个库可以帮上大忙。</p><p>下面我们配置并演示一下：</p><h2 id="_11-2、黑白名单演示" tabindex="-1"><a class="header-anchor" href="#_11-2、黑白名单演示" aria-hidden="true">#</a> 11.2、黑白名单演示</h2><p><strong>允许任何ip访问前端，然后禁止172.30.128.64访问后端</strong>，nginx.conf文件如下： <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aec3216ee5354b2a913c66bc0afe4f37~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2428&amp;h=1832&amp;s=356656&amp;e=png&amp;b=000000" alt="image.png"> 访问前端，走/page这个location（可以访问成功）： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc8ae97280d4481cae7ee662a1c1e485~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3524&amp;h=1808&amp;s=809270&amp;e=png&amp;b=ffffff" alt="image.png"> 访问后端，走interface这个location（显示403被禁止了）： <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66ebb732a42249a8b1b91380970331c9~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3506&amp;h=1760&amp;s=806046&amp;e=png&amp;b=fefefe" alt="image.png"></p><h1 id="_12、nginx限流" tabindex="-1"><a class="header-anchor" href="#_12、nginx限流" aria-hidden="true">#</a> 12、nginx限流</h1><p>Nginx主要有两种限流方式：按并发连接数限流(ngx_http_limit_conn_module)、按请求速率限流(ngx_http_limit_req_module 使用的令牌桶算法)。</p><p>关于 ngx_http_limit_req_module模块，里边有很多种限流指令，官网资料一览： <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6fa7772d23e143939490bd8373a801ad~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2082&amp;h=1782&amp;s=339953&amp;e=png&amp;b=fdfdfd" alt="image.png"> 我们下面使用 ngx_http_limit_req_module 模块中的limit_req_zone和 limit_req 这两个指令来达到限制单个IP的<strong>请求速率</strong> 的目的。</p><h2 id="_12-1、nginx限流配置解释" tabindex="-1"><a class="header-anchor" href="#_12-1、nginx限流配置解释" aria-hidden="true">#</a> 12.1、nginx限流配置解释</h2><p>在 nginx.conf 中添加限流配置如下：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code>http{
    ...
    <span class="token comment"># 对请求速率限流</span>
    <span class="token key attr-name">limit_req_zone $binary_remote_addr zone</span><span class="token punctuation">=</span><span class="token value attr-value">myRateLimit:10m rate=5r/s;</span>
    
    server{
        location /interface{
            ...
            <span class="token key attr-name">limit_req zone</span><span class="token punctuation">=</span><span class="token value attr-value">myRateLimit burst=5  nodelay;</span>
            limit_req_status 520;
            limit_req_log_level info;
        }
    }
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8cfe0df0bd92490fb641ba50bb66c4a4~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2354&amp;h=1860&amp;s=358907&amp;e=png&amp;b=010101" alt="image.png"> 对上图标红的配置做个解释：</p><p><strong>$binary_remote_addr</strong>：表示基于 remote_addr(客户端IP) 来做限流 <strong>zone=myRateLimit:10m</strong>：表示使用myRateLimit来作为内存区域（存储访问信息）的名字，大小为10M，1M能存储16000 IP地址的访问信息，10M可以存储16W IP地址访问信息 <strong>rate=5r/s</strong>：表示相同ip每秒最多请求5次，nginx是精确到毫秒的，也就是说此配置代表每200毫秒处理一个请求，这意味着自上一个请求处理完后，若后续200毫秒内又有请求到达，将拒绝处理该请求（如果没配burst的话）<br><strong>burst=5</strong>：(英文 爆发 的意思)，意思是设置一个大小为5的缓冲队列，若同时有6个请求到达，Nginx 会处理第一个请求，剩余5个请求将放入队列，然后每隔200ms从队列中获取一个请求进行处理。若请求数大于6，将拒绝处理多余的请求，直接返回503<br><strong>nodelay</strong>：针对的是 burst 参数，burst=5 nodelay 这个配置表示被放到缓冲队列的这5个请求会立马处理，不再是每隔200ms取一个了。但是值得注意的是，即使这5个突发请求立马处理并结束，后续来了请求也不一定不会立马处理，因为虽然请求被处理了但是请求所占的坑并不会被立即释放，而是只能按 200ms 一个来释放，释放一个后 才将等待的请求 入队一个。<br><strong>另外两个：</strong> limit_req_status=520表示当被限流后，nginx的返回码，limit_req_log_level info代表日志级别</p><p><strong>注意：</strong> 如果不开启nodelay且开启了burst这个配置，那么将会严重影响用户体验（你想想假设burst队列长度为100的话每100ms处理一个,那队列最后那个请求得等10000ms=10s后才能被处理，那不超时才怪呢此时burst已经意义不大了）所以一般情况下 建议burst和nodelay结合使用，从而尽可能达到速率稳定，但突然流量也能正常处理的效果。</p><h2 id="_12-2、nginx限流-针对请求速率" tabindex="-1"><a class="header-anchor" href="#_12-2、nginx限流-针对请求速率" aria-hidden="true">#</a> 12.2、nginx限流（针对请求速率）</h2><p>为了突出burst和nodealy的作用，我们一步一步演示</p><h3 id="_12-2-1、限制每秒同一ip最多访问5次-1s" tabindex="-1"><a class="header-anchor" href="#_12-2-1、限制每秒同一ip最多访问5次-1s" aria-hidden="true">#</a> 12.2.1、限制每秒同一ip最多访问5次/1s</h3><p>修改nginx.conf，把burst=5 nodelay注释掉，如下： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f0d4083281f4bc68308cb03f75f053a~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2150&amp;h=1774&amp;s=348261&amp;e=png&amp;b=010101" alt="image.png"> 上边的配置意味着每秒最多处理5次同样ip的请求，我们使用jmeter设置1个线程循环10次，间隔时间为100ms,效果如下（5成功5失败）： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/948f5582525a4e4ba7dfdb9b7ebacf73~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2834&amp;h=1002&amp;s=277682&amp;e=png&amp;b=3d4244" alt="image.png"> 如果我们将间隔时间改200的话，是都可以成功的，因为一秒最多5次精确到毫秒其实就是最多200ms一次,而200ms一次正好没超过我们配置的 5r/s 的速率： <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c0fe06a62b045108164463559e7db1d~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1614&amp;h=380&amp;s=77674&amp;e=png&amp;b=3d4244" alt="image.png"> 运行jemeter发现间隔200ms访问一次的请求都成功了： <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cde886bec6754608af23eb37e5639329~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2856&amp;h=936&amp;s=279581&amp;e=png&amp;b=3d4244" alt="image.png"></p><h3 id="_12-2-2、打开burst参数并设置成5" tabindex="-1"><a class="header-anchor" href="#_12-2-2、打开burst参数并设置成5" aria-hidden="true">#</a> 12.2.2、打开burst参数并设置成5</h3><p>现在我们的速率不变还是最多5次一秒，但是设置burst=5代表缓冲队列的长度为5，nginx每隔200ms，从缓冲队列拿一个进行处理，配置如下： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4aadf8d462a2448ca290deef74241577~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1642&amp;h=1680&amp;s=322918&amp;e=png&amp;b=010101" alt="image.png"></p><p>之后我们配置线程数量为15，每隔100ms掉一次，效果如下： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07d5fbe951ae48768073ae49e5b753ac~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2842&amp;h=1196&amp;s=389751&amp;e=png&amp;b=3d4244" alt="image.png"> 可以看到共计6个请求被处理，第一个是被nginx进程直接处理，之后往burst塞了5个（每隔200ms拿一个进行处理）剩下的都被返回了520状态码代表被拒绝了，我们找一个（1-10这个）被拒的看看状态码： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d167f2adfc7244ce87ccc75daf97abd2~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1382&amp;h=790&amp;s=100137&amp;e=png&amp;b=3a3f41" alt="image.png"></p><h3 id="_12-2-3、打开nodelay" tabindex="-1"><a class="header-anchor" href="#_12-2-3、打开nodelay" aria-hidden="true">#</a> 12.2.3、打开nodelay</h3><p>我们上边说过<strong>打开nodlay的话</strong>，代表放到burst队列的请求直接处理 ，<strong>不再按速率 200ms/次 拿了</strong>，配置如下： <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d027c21be6784d1f89102cdd338c3de9~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1606&amp;h=1744&amp;s=321984&amp;e=png&amp;b=000000" alt="image.png"> 接下来我们还是配置15个线程，然后每个线程间隔100ms请求一次，看下效果： <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/206e98db135f45799f7b85b9ef78d536~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2834&amp;h=1160&amp;s=334900&amp;e=png&amp;b=3d4244" alt="image.png"> 可以很明显的看到：开启nodelay后响应时间10几秒明显比不开启nodelay快很多，但是请求成功的还是6个，因为就像我们上边说的ngdelay虽然会即时处理，但是释放坑位是200ms释放一个 <strong><code>（也就是说即时开启了nodelay 但释放令牌的速度是不变的）</code></strong> ，所以nodelay参数本质上并没有提高访问速率，而仅仅是让处于burst队列的请求 <code>”被快速处理“</code> 罢了。</p><h2 id="_12-3、nginx限流-针对连接数量" tabindex="-1"><a class="header-anchor" href="#_12-3、nginx限流-针对连接数量" aria-hidden="true">#</a> 12.3、nginx限流（针对连接数量）</h2><p>针对连接数量的限流和速率不一样，即使你速率是1ms一次，只要你连接数量不超过设置的，那么也访问成功。如果连接数超过设置的值将会请求失败。值得注意的是他是 ngx_http_limit_conn_module模块中的，不要和 速率限流的 ngx_http_limit_req_module模块搞混了。</p><p>配置如下：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code>http{
    <span class="token comment"># 针对ip  对请求连接数限流</span>
    ...
    <span class="token key attr-name">limit_conn_zone $binary_remote_addr zone</span><span class="token punctuation">=</span><span class="token value attr-value">myConnLimit:10m;</span> 
    ...
    
    server{
       ...
       limit_conn myConnLimit 12;
    }
}    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/96779ae313654b8eac3a78fe2fa3aa90~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1708&amp;h=1852&amp;s=323494&amp;e=png&amp;b=000000" alt="image.png"> 简单对以上标黄处说明一下，<code>limit_conn_zone $binary_remote_addr zone=myConnLimit:10m;</code> 代表的意思 是 基于连接数量限流，限流的对象是ip 名称是myConnLimit 存储空间大小10mb（即存放某ip的访问记录），limit_conn myConnLimit 12;标识该ip最大支持12个连接超过则返回503（被限流后状态码默认是503，当然你也可以修改返回码 像上边的 针对请求速率限流 ，返回码就是 我修改的520）。</p><p>使用jmeter搞20个线程，0延迟，演示下效果： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/661dcb8c3fff497497a2beb325ea2ab0~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2844&amp;h=1400&amp;s=412439&amp;e=png&amp;b=3c4143" alt="image.png"> 可以看到由于我们配置的并发数是12，所以20个连接中有8个都被限了。这个理解起来似乎比速率限流（ngx_http_limit_req_module）简单些我们就不过多解释了。</p><h1 id="_13、https配置" tabindex="-1"><a class="header-anchor" href="#_13、https配置" aria-hidden="true">#</a> 13、https配置</h1><p>说到https大家应该并不陌生，我这里不啰嗦介绍了。一般我们安装的nginx模块都是不包含ssl模块的，所以需要手动安装下。安装完之后我们再说如何配置https。</p><h2 id="_13-1、https-ssl模块安装" tabindex="-1"><a class="header-anchor" href="#_13-1、https-ssl模块安装" aria-hidden="true">#</a> 13.1、https_ssl模块安装</h2><p>首先我们使用 <code>nginx -V</code> (大写) 看下有没有安装https_ssl模块：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c1fb912b90f41e8aff840eac5654ad1~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3558&amp;h=376&amp;s=115535&amp;e=png&amp;b=010101" alt="image.png"> 可以看到我已经安装了,实际上我可以直接使用https_ssl模块了但是为了文章完善性。我下边说一下https_ssl模块的安装步骤：</p><blockquote><p>注意：下边的https_ssl模块是安装到我的旧版本1.23.0去了，而我当前生效运行的nginx是1.24.0 ，使用<code>ps -ef | grep nginx</code> 命令可看出当前运行的nginx： <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a658014a50ff4be4bc116c7cf1d1c8d9~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1716&amp;h=218&amp;s=67057&amp;e=png&amp;b=010101" alt="image.png"> 下边的安装https_ssl仅仅是为了内容全面，<strong>而不是真正使用1.23.0版本的nginx或者1.23.0版本的https_ssl模块</strong>（本文使用的版本都是1.24.0 ，1.23.0是我之前的一个nginx版本）。</p></blockquote><p>没有ssl模块情况下，首先我们<code>进入nginx解压目录</code>：我的是 /usr/local/nginx/nginx-1.23.0/ <strong>总之就是找到你的nginx解压目录</strong>) ，之后在该目录执行命令 <code>./configure --prefix=/usr/local/nginx --with-http_ssl_module</code> 来安装ssl模块，如下图： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fd6de3c1306e4e89aca67d583f51bc50~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1702&amp;h=516&amp;s=136899&amp;e=png&amp;b=010101" alt="image.png"> 安装好后，在/usr/local/nginx/nginx-1.23.0/ 目录中执行 <code>make</code> 命令，重新编译nginx,注意此处无需make install，make成功后，我们执行 <code>cp ./objs/nginx /usr/local/nginx/sbin/</code> 命令将编译后的文件覆盖到 /usr/local/nginx/sbin/，之后执行 <code>/usr/local/nginx/sbin/nginx -V</code> ，可看到ssl模块就安装成功了。操作记录图如下： <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/63e8ba8d00a54a7fb129b4d006397444~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1600&amp;h=1092&amp;s=316783&amp;e=png&amp;b=010101" alt="image.png"></p><h2 id="_13-2、域名购买-解析-ssl证书申请与验证" tabindex="-1"><a class="header-anchor" href="#_13-2、域名购买-解析-ssl证书申请与验证" aria-hidden="true">#</a> 13.2、域名购买&amp;解析&amp;ssl证书申请与验证</h2><p>要配置ssl最好是有个域名，所以我花一杯酱香拿铁的💰买了一个域名（在买域名前需要进行域名模板实名，具体操作去腾讯云官网看这里不啰嗦了），我买的域名是： <strong><code>hzznb-xzll.xyz</code></strong></p><p>ps： 如果我没记错的话这是我的第一个域名，虽然他10块钱但是我很珍惜他😄😄，接下来可以在我的域名中看到已经成功了。</p>`,55),yn=n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98e304262b96425281fa2e86de4a9961~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3448&h=1066&s=347574&e=png&b=e4ebf9",alt:"image.png"},null,-1),zn=n("strong",null,"解析",-1),qn={href:"http://www.hzznb-xzll.xyz",title:"http://www.hzznb-xzll.xyz",target:"_blank",rel:"noopener noreferrer"},$n=n("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0f2d211b5c4452da0831d377f1be81b~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3472&h=896&s=230996&e=png&b=fff9f9",alt:"image.png"},null,-1),Tn=n("img",{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a163ba2bd35488f82d3f4bf65b7c72e~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3366&h=1708&s=454108&e=png&b=ffffff",alt:"image.png"},null,-1),Ln=n("img",{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54cade17f8ae4bac98ab76f024d36669~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3484&h=1754&s=812079&e=png&b=fef9f9",alt:"image.png"},null,-1),In=n("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/978f4c76529843e3bfb542e0b7121c4b~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3350&h=1228&s=266165&e=png&b=ffffff",alt:"image.png"},null,-1),Sn=n("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/acb37e756e7d4cf8b3b8b2a485f38d64~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3122&h=1612&s=420025&e=png&b=323232",alt:"image.png"},null,-1),En=t(`<h2 id="_13-3、上传并配置nginx以及演示" tabindex="-1"><a class="header-anchor" href="#_13-3、上传并配置nginx以及演示" aria-hidden="true">#</a> 13.3、上传并配置nginx以及演示</h2><p>下载到本地后是个zip我们解压之后会看到里边有4个文件分别是：</p><p>hzznb-xzll.xyz_bundle.crt 证书文件<br> hzznb-xzll.xyz_bundle.pem 证书文件（可忽略该文件）<br> hzznb-xzll.xyz.key 私钥文件<br> hzznb-xzll.xyz.csr CSR 文件 （CSR 文件是申请证书时由您上传或系统在线生成的，提供给 CA 机构。安装时可忽略该文件。）</p><p>之后我们仅需要把 hzznb-xzll.xyz.key 和 hzznb-xzll.xyz_bundle.crt 这俩货上传到我新建的 certificate文件夹：/usr/local/nginx/certificate/ ，操作如下： <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/651a45d41f244c04b7fe4d8ee7f68c6c~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2230&amp;h=538&amp;s=118121&amp;e=png&amp;b=010101" alt="image.png"> 上传完成： <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/29eb6206483c42b98eceb87ccb8ccbe3~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1138&amp;h=194&amp;s=39891&amp;e=png&amp;b=010101" alt="image.png"> ssl证书准备好后，我们需要配置一个https的server（如下配置：）<br> 下边的指令名称都有注释说明了各个指令是干啥的，我也就不啰嗦了：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token comment"># --------------------HTTPS 配置---------------------</span>
    server {
        <span class="token comment">#SSL 默认访问端口号为 443</span>
        listen 443 ssl; 
        <span class="token comment">#填写绑定证书的域名 </span>
        server_name www.hzznb-xzll.xyz hzznb-xzll.xyz; 
        <span class="token comment">#请填写证书文件的相对路径或绝对路径</span>
        ssl_certificate /usr/local/nginx/certificate/hzznb-xzll.xyz_bundle.crt; 
        <span class="token comment">#请填写私钥文件的相对路径或绝对路径</span>
        ssl_certificate_key /usr/local/nginx/certificate/hzznb-xzll.xyz.key; 
        <span class="token comment">#停止通信时，加密会话的有效期，在该时间段内不需要重新交换密钥</span>
        ssl_session_timeout 5m;
        <span class="token comment">#服务器支持的TLS版本</span>
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; 
        <span class="token comment">#请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。</span>
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; 
        <span class="token comment">#开启由服务器决定采用的密码套件</span>
        ssl_prefer_server_ciphers on;
    }    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到我们上传到 /usr/local/nginx/certificate/目录下的 .crt和.key文件被使用到了。</p><p>现在我们仅仅是配好一个https类型的server，光一个server没法访问也没意思，我们需要让给他配置上游服务以及路由规则，这里我们直接使用我们上边的 80端口那个server中的location配置，直接copy过来，<strong>https server的配置</strong> 如下： <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e5e659b5d504b73947c414db801d5a0~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1580&amp;h=2200&amp;s=481554&amp;e=png&amp;b=010101" alt="image.png"> 到这里，就可以通过https方式访问我们的页面和接口了。但是需要注意的是，由于我们的协议和域名换了，所以index_page.html里边的接口地址也得变了，如下： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/469223d90de34cb8b81e12098fbecef3~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2058&amp;h=1856&amp;s=417514&amp;e=png&amp;b=1f1f1f" alt="image.png"> 之后我们将index_page.html上传到nginx的 /usr/local/nginx/test/static/ 目录，并重启nginx（nginx -s reload） 之后在浏览器访问试试，</p><blockquote><p>注意：我最开始在配置dns解析时记录值配的是公网ip,但是我发现好像不好使，总是连接失败： <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b247a65f19ec4f4e8c2bfb6fcc4b2ea6~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2596&amp;h=1678&amp;s=253672&amp;e=png&amp;b=fff8f8" alt="image.png"> ，后来改成 局域网ip 172.30.128.65 发现可行了 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b89c7e7cd4d14d919bf2c81ecaee5df3~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2884&amp;h=836&amp;s=187153&amp;e=png&amp;b=ffffff" alt="image.png"></p></blockquote><p>修改云解析dns记录值为172.30.128.65后，访问效果如下： <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/93b1857429404af3bc4fe460916175c2~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3522&amp;h=1382&amp;s=589204&amp;e=png&amp;b=ffffff" alt="image.png"> <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a793e9c760a4cf58245c4279c998d75~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3548&amp;h=1706&amp;s=836338&amp;e=png&amp;b=ffffff" alt="image.png"> 从上边可以看到，我们可以通过https方式访问前端页面和后台接口了。</p><h2 id="_13-4、http跳转https" tabindex="-1"><a class="header-anchor" href="#_13-4、http跳转https" aria-hidden="true">#</a> 13.4、http跳转https</h2>`,10),Hn={href:"http://xxx.com",title:"http://xxx.com",target:"_blank",rel:"noopener noreferrer"},Cn={href:"https://xxx.com",title:"https://xxx.com",target:"_blank",rel:"noopener noreferrer"},Rn=t(`<div class="language-perl line-numbers-mode" data-ext="perl"><pre class="language-perl"><code>server_name www<span class="token operator">.</span>hzznb<span class="token operator">-</span>xzll<span class="token operator">.</span>xyz hzznb<span class="token operator">-</span>xzll<span class="token operator">.</span>xyz<span class="token punctuation">;</span>
<span class="token comment"># 重定向到目标地址</span>
<span class="token keyword">return</span> <span class="token number">301</span> https<span class="token punctuation">:</span><span class="token operator">//</span><span class="token variable">$server_name$request_uri</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e36c7f2dee244e5789942330d911a1d1~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1488&amp;h=1646&amp;s=304188&amp;e=png&amp;b=010101" alt="image.png"> 之后重启nginx看下演示效果：</p>`,2),Pn={href:"http://www.hzznb-xzll.xyz/page/",title:"http://www.hzznb-xzll.xyz/page/",target:"_blank",rel:"noopener noreferrer"},Mn={href:"https://www.hzznb-xzll.xyz/page/",title:"https://www.hzznb-xzll.xyz/page/",target:"_blank",rel:"noopener noreferrer"},An=n("img",{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ff97704505f48ecba42fcf55f1e4544~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3460&h=1616&s=1289722&e=png&b=fbfbfb",alt:"image.png"},null,-1),Un={href:"https://www.hzznb-xzll.xyz/page/",title:"https://www.hzznb-xzll.xyz/page/",target:"_blank",rel:"noopener noreferrer"},Nn=n("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7dd23f4dc3634234b4385e17fd3e4bd0~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3486&h=1732&s=876098&e=png&b=fbfbfb",alt:"image.png"},null,-1),On=t(`<h1 id="_14、压缩" tabindex="-1"><a class="header-anchor" href="#_14、压缩" aria-hidden="true">#</a> 14、压缩</h1><p>压缩功能比较实用尤其是处理一些大文件时，而gzip 是规定的三种标准 HTTP 压缩格式之一。目前绝大多数的网站都在使用 gzip 传输 HTML 、CSS 、 JavaScript 等资源文件。需要知道的是，并不是每个浏览器都支持 gzip 压缩，如何知道客户端（浏览器）是否支持 压缩 呢？ 可以通过观察 某请求头中的 Accept-Encoding 来观察是否支持压缩，另外只有客户端支持也不顶事，服务端得返回gzip格式的文件呀，那么这件事nginx可以帮我们做，我们可以通过 Nginx 的配置来让服务端支持 gzip。服务端返回压缩文件后浏览器进行解压缩从而展示正常内容。</p><h2 id="_14-1、压缩前" tabindex="-1"><a class="header-anchor" href="#_14-1、压缩前" aria-hidden="true">#</a> 14.1、压缩前</h2><p>首先应该明确的是我当前是没开启压缩的： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77321f75b8e04d72bb2740eb3e8b8dca~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2450&amp;h=1244&amp;s=169679&amp;e=png&amp;b=000000" alt="image.png"></p><p>其次为了方便看出效果，我们先将之前那个index_page.html文件加点图片，加点文字给他的文件大小弄大点，如下： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5453159a8ab14b3ab35bc55aa751a388~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2358&amp;h=1770&amp;s=385432&amp;e=png&amp;b=000000" alt="image.png"> 这里无需重启nginx，看下<strong>没开启压缩</strong> 时候的效果： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f57509719384a728c1a61ab87600786~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3470&amp;h=1664&amp;s=2868882&amp;e=png&amp;b=fbf9f9" alt="image.png"> <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a16001d9150b4ad3a37db56f1a7e21e5~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3520&amp;h=1728&amp;s=3000578&amp;e=png&amp;b=f7f5f5" alt="image.png"></p><h2 id="_14-2、压缩后" tabindex="-1"><a class="header-anchor" href="#_14-2、压缩后" aria-hidden="true">#</a> 14.2、压缩后</h2><p>想要压缩就得配置nginx,我们修改nginx.conf文件，在http指令块添加如下内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http <span class="token punctuation">{</span>
    <span class="token comment"># 开启/关闭 压缩机制</span>
    <span class="token function">gzip</span> on<span class="token punctuation">;</span>
    <span class="token comment"># 根据文件类型选择 是否开启压缩机制</span>
    gzip_types text/plain application/javascript text/css application/xml text/javascript image/jpeg image/jpg image/gif image/png  application/json<span class="token punctuation">;</span>
    <span class="token comment"># 设置压缩级别，一共9个级别  1-9   ，越高资源消耗越大 越耗时，但压缩效果越好，</span>
    gzip_comp_level <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token comment"># 设置是否携带Vary:Accept-Encoding 的响应头</span>
    gzip_vary on<span class="token punctuation">;</span>
    <span class="token comment"># 处理压缩请求的 缓冲区数量和大小</span>
    gzip_buffers <span class="token number">32</span> 64k<span class="token punctuation">;</span>
    <span class="token comment"># 对于不支持压缩功能的客户端请求 不开启压缩机制</span>
    gzip_disable <span class="token string">&quot;MSIE [1-6]\\.&quot;</span><span class="token punctuation">;</span> <span class="token comment"># 比如低版本的IE浏览器不支持压缩</span>
    <span class="token comment"># 设置压缩功能所支持的HTTP最低版本</span>
    gzip_http_version <span class="token number">1.1</span><span class="token punctuation">;</span>
    <span class="token comment"># 设置触发压缩的最小阈值</span>
    gzip_min_length 2k<span class="token punctuation">;</span>
    <span class="token comment"># off/any/expired/no-cache/no-store/private/no_last_modified/no_etag/auth 根据不同配置对后端服务器的响应结果进行压缩</span>
    gzip_proxied any<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>几个指令的作用在注释中写明了这里不再过多解释。接下来我们重启nginx，然后看下压缩前后的效果：</p><p>html文件压缩： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77eb77074edc4c6ab170d2cf3915496f~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3478&amp;h=1690&amp;s=1190643&amp;e=png&amp;b=fefefe" alt="image.png"> 接口响应压缩： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03f12df6d0a947cb8eb9a63b8032a8d6~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3512&amp;h=1640&amp;s=3327894&amp;e=png&amp;b=f9f7f7" alt="image.png"> 可以看到不管是html还是接口响应数据， 压缩后的体积变得非常小了，压缩的效果还是不错的，但是值得注意的是压缩后虽然体积变小了，但是响应的时间会变长，因为压缩/解压也需要时间呀！压缩功能似乎有点：<strong>用时间换空间的感觉！</strong>，当然压缩级别可以调的，你可以选择较低级别的压缩，这样既能实现压缩功能使得数据包体积降下来，同时压缩时间也会缩短是比较折中的一种方案（我在演示时为了效果，配置的压缩级别是9 ，一共9个级别， 9是最高级别的压缩等级）。</p><h1 id="_15、其他一些比较常用的指令与说明" tabindex="-1"><a class="header-anchor" href="#_15、其他一些比较常用的指令与说明" aria-hidden="true">#</a> 15、其他一些比较常用的指令与说明</h1><p>关于nginx的指令其实太多了，有些常用的指令不说一下的话，有时候遇见了不懂啥意思，所以这里说一下nginx几个比较常用的指令（上边nginx.conf文件解读 以及某些小节中已经说了很多指令了，这里也不管重不重复吧，说明几个我觉得有必要讲的几个）</p><h2 id="_15-1、rewrite" tabindex="-1"><a class="header-anchor" href="#_15-1、rewrite" aria-hidden="true">#</a> 15.1、rewrite</h2><p>rewrite指令是通过正则表达式来改变URI。可以同时存在一个或多个指令。需要按照顺序依次对URL进行匹配和处理，常用于重定向功能。</p><p>rewrite语法如下：</p><table><thead><tr><th>语法:</th><th><code>rewrite 正则表达式 要替换的内容 [flag];</code></th></tr></thead><tbody><tr><td>默认:</td><td>—</td></tr><tr><td>作用域:</td><td><code>server</code>, <code>location</code>, <code>if</code></td></tr></tbody></table><p>其中flag有如下几个值：</p><p><strong>last:</strong>  本条规则匹配完成后，继续向下匹配新的location URI 规则。<br><strong>break:</strong>  本条规则匹配完成即终止，不再匹配后面的任何规则。<br><strong>redirect:</strong>  返回302临时重定向，浏览器地址会显示跳转新的URL地址。<br><strong>permanent:</strong>  返回301永久重定向。浏览器地址会显示跳转新的URL地址。</p><p>下边我们演示下四种重写的效果 首先修改nginx.conf文件：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code>  server {
      listen 80 default;
      charset utf-8;
      server_name www.hzznb-xzll.xyz hzznb-xzll.xyz;

      <span class="token comment"># 临时（redirect）重定向配置</span>
      location /temp_redir {
          rewrite ^/(.*) https://www.baidu.com redirect;
      }
      <span class="token comment"># 永久重定向（permanent）配置</span>
      location /forever_redir {

          rewrite ^/(.*) https://www.baidu.com permanent;
      }

      <span class="token comment"># rewrite last配置</span>
      location /1 {
        rewrite /1/(.*) /2/$1 last;
      }
      location /2 {
        rewrite /2/(.*) /3/$1 last;
      }
      location /3 {
        alias  &#39;/usr/local/nginx/test/static/&#39;;
        index location_last_test.html;
      }
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/55494f7625da405192cdd9b1abdf29ce~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1820&amp;h=1228&amp;s=257959&amp;e=png&amp;b=000000" alt="image.png"></p>`,21),Dn=n("strong",null,"last配置:",-1),Gn={href:"http://hzznb-xzll.xyz/1/",title:"http://hzznb-xzll.xyz/1/",target:"_blank",rel:"noopener noreferrer"},Bn={href:"http://hzznb-xzll.xyz/2/",title:"http://hzznb-xzll.xyz/2/",target:"_blank",rel:"noopener noreferrer"},Wn={href:"http://hzznb-xzll.xyz/3/",title:"http://hzznb-xzll.xyz/3/",target:"_blank",rel:"noopener noreferrer"},Xn=n("br",null,null,-1),Vn=n("strong",null,"redirect配置：",-1),Kn={href:"http://hzznb-xzll.xyz/temp_redir/",title:"http://hzznb-xzll.xyz/temp_redir/",target:"_blank",rel:"noopener noreferrer"},Fn=n("br",null,null,-1),Jn=n("strong",null,"permanent配置：",-1),Yn={href:"http://hzznb-xzll.xyz/forever_redir/",title:"http://hzznb-xzll.xyz/forever_redir/",target:"_blank",rel:"noopener noreferrer"},Zn=t(`<p>效果如下： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27939667cad34a9583d79f8d2f37eff0~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3254&amp;h=1778&amp;s=1105567&amp;e=png&amp;b=fcfcfc" alt="image.png"></p><h2 id="_15-2、if" tabindex="-1"><a class="header-anchor" href="#_15-2、if" aria-hidden="true">#</a> 15.2、if</h2><p>该指令用于条件判断，并且根据条件判断结果来选择不同的配置，其作用于为：server/location 块。这个指令比较简单，因为编程中if语句都是非常高频使用的，但是里边怎么写 就得说说nginx的全局变量了，因为我们很多时候，都是在对 比如：url 参数 ip 域名等等做比对或者判断（一般都使用正则的方式）,而这些都在nginx全局变量中可以拿到，比如下边这个if判断就用到了全局变量：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>     <span class="token comment"># 指定 username 参数中只要有字母 就不走nginx缓存</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$arg_username</span> ~ <span class="token punctuation">[</span>a-z<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token builtin class-name">set</span> <span class="token variable">$cache_name</span> <span class="token string">&quot;no cache&quot;</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正则表达式就不多说了，具体使用时查一下，我们下边列一下nginx的全局变量：</p><h2 id="_15-3、nginx全局变量" tabindex="-1"><a class="header-anchor" href="#_15-3、nginx全局变量" aria-hidden="true">#</a> 15.3、nginx全局变量</h2>`,6),Qn=n("thead",null,[n("tr",null,[n("th",null,"变量"),n("th",null,"解释")])],-1),ns=n("tr",null,[n("td",null,"$time_local"),n("td",null,"本地时间")],-1),ss=n("tr",null,[n("td",null,"$time_iso8601"),n("td",null,"ISO 8601 时间格式")],-1),as=n("tr",null,[n("td",null,"$arg_name"),n("td",null,"请求中的的参数名，即“?”后面的arg_name=arg_value形式的arg_name")],-1),es=n("tr",null,[n("td",null,"$args"),n("td",null,"与$query_string相同 等于URL当中的参数(GET请求时)，如a=1&b=2")],-1),ts=n("tr",null,[n("td",null,"$document_uri"),n("td",null,"与uri相同这个变量指当前的请求URI，不包括任何参数(见uri相同 这个变量指当前的请求URI，不包括任何参数(见uri相同这个变量指当前的请求URI，不包括任何参数(见args)")],-1),ps=n("tr",null,[n("td",null,"$request_uri"),n("td",null,"包含请求参数的原始URI，不包含主机名，如：/aaa/bbb.html?a=1&b=2")],-1),is=n("tr",null,[n("td",null,"$is_args"),n("td",null,"如果URL包含参数则为？，否则为空字符串")],-1),cs=n("tr",null,[n("td",null,"$query_string"),n("td",null,"与$args相同 等于URL当中的参数(GET请求时)，如a=1&b=2")],-1),ls=n("tr",null,[n("td",null,"$uri"),n("td",null,"当前请求的URI,不包含任何参数")],-1),os=n("tr",null,[n("td",null,"$remote_addr"),n("td",null,"获取客户端ip")],-1),rs=n("tr",null,[n("td",null,"$binary_remote_addr"),n("td",null,"客户端ip（二进制)")],-1),ds=n("tr",null,[n("td",null,"$remote_port"),n("td",null,"客户端port")],-1),ms=n("tr",null,[n("td",null,"$remote_user"),n("td",null,"用于基本验证的用户名。")],-1),us=n("td",null,"$host",-1),bs={href:"https://www.hzznb-xzll.xyz",title:"https://www.hzznb-xzll.xyz",target:"_blank",rel:"noopener noreferrer"},vs=n("tr",null,[n("td",null,"$proxy_host"),n("td",null,"proxy_pass 指令设置的后端服务器的域名（或者IP地址）")],-1),hs=n("tr",null,[n("td",null,"$proxy_port"),n("td",null,"proxy_pass 指令设置的后端服务器的监听端口。")],-1),gs=n("tr",null,[n("td",null,"$http_host"),n("td",null,"是host和host 和 host和server_port 两个变量的结合")],-1),ks=n("tr",null,[n("td",null,"$request"),n("td",null,"用户请求信息，如：GET ?a=1&b=2 HTTP/1.1")],-1),fs=n("tr",null,[n("td",null,"$request_time"),n("td",null,"请求所用时间，单位毫秒")],-1),_s=n("tr",null,[n("td",null,"$request_method"),n("td",null,"请求的方法 比如 get post put delete update 等")],-1),xs=n("tr",null,[n("td",null,"$request_filename"),n("td",null,"当前请求的文件的路径名，由root或alias和URI request组合而成,如：/aaa/bbb.html")],-1),ws=n("tr",null,[n("td",null,"$status"),n("td",null,"请求的响应状态码,如：200")],-1),js=n("tr",null,[n("td",null,"$body_bytes_sent"),n("td",null,"响应时送出的body字节数数量。即使连接中断，这个数据也是精确的,如：40，传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的“%B”参数保持兼容")],-1),ys=n("tr",null,[n("td",null,"$content_length"),n("td",null,"等于请求行的“Content_Length”的值")],-1),zs=n("tr",null,[n("td",null,"$content_type"),n("td",null,"等于请求行的“Content_Type”的值")],-1),qs=n("tr",null,[n("td",null,"$http_referer"),n("td",null,"引用地址")],-1),$s=n("tr",null,[n("td",null,"$http_user_agent"),n("td",null,"客户端agent信息,如：Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36 这个可以用来区分手机端还是pc端")],-1),Ts=n("tr",null,[n("td",null,"$document_root"),n("td",null,"针对当前请求的根路径设置值")],-1),Ls=n("tr",null,[n("td",null,"$hostname"),n("td",null,"主机名称")],-1),Is=n("tr",null,[n("td",null,"$http_cookie"),n("td",null,"客户端cookie信息")],-1),Ss=n("tr",null,[n("td",null,"$cookie_COOKIE"),n("td",null,"cookie COOKIE变量的值")],-1),Es=n("tr",null,[n("td",null,"$limit_rate"),n("td",null,"这个变量可以限制连接速率，0表示不限速")],-1),Hs=n("tr",null,[n("td",null,"$request_body"),n("td",null,"记录POST过来的数据信息")],-1),Cs=n("tr",null,[n("td",null,"$request_body_file"),n("td",null,"客户端请求主体信息的临时文件名")],-1),Rs=n("tr",null,[n("td",null,"$scheme"),n("td",null,"HTTP方法（如http，https）")],-1),Ps=n("tr",null,[n("td",null,"$request_completion"),n("td",null,"如果请求结束，设置为OK. 当请求未结束或如果该请求不是请求链串的最后一个时，为空(Empty)，如：OK")],-1),Ms=n("tr",null,[n("td",null,"$server_protocol"),n("td",null,"请求使用的协议，通常是HTTP/1.0或HTTP/1.1，如：HTTP/1.1")],-1),As=n("tr",null,[n("td",null,"$server_addr"),n("td",null,"服务器IP地址，在完成一次系统调用后可以确定这个值")],-1),Us=n("tr",null,[n("td",null,"$server_name"),n("td",null,"响应请求的服务器名称")],-1),Ns=n("tr",null,[n("td",null,"$server_port"),n("td",null,"请求到达服务器的端口号，如：80")],-1),Os=n("tr",null,[n("td",null,"$connection"),n("td",null,"连接序列号")],-1),Ds=n("tr",null,[n("td",null,"$connection_requests"),n("td",null,"当前通过连接发出的请求数")],-1),Gs=n("tr",null,[n("td",null,"$nginx_version"),n("td",null,"nginx版本")],-1),Bs=n("tr",null,[n("td",null,"$pid"),n("td",null,"工作进程的PID")],-1),Ws=n("tr",null,[n("td",null,"$pipe"),n("td",null,"如果请求来自管道通信，值为“p”，否则为“.”")],-1),Xs=n("tr",null,[n("td",null,"$proxy_protocol_addr"),n("td",null,"获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串")],-1),Vs=n("tr",null,[n("td",null,"$realpath_root"),n("td",null,"对应于当前请求的根目录或别名值的绝对路径名，所有符号连接都解析为真实路径。")],-1),Ks=n("p",null,"可以看到全局变量比较多，但是没关系在使用时再去详查就好了。",-1),Fs=n("h2",{id:"_15-4、auto-index",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_15-4、auto-index","aria-hidden":"true"},"#"),s(" 15.4、auto_index")],-1),Js=n("p",null,[s("一般用于快速搭建静态资源网站，比如我要给自己搞个书籍网站里边放些好书，以便需要时查看阅读，首先建一个book文件夹并往里放几本书： "),n("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/528eb4768338439dbbb70db277f4e070~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1574&h=276&s=103591&e=png&b=010101",alt:"image.png"})],-1),Ys={href:"http://hzznb-xzll.xyz/book/",title:"http://hzznb-xzll.xyz/book/",target:"_blank",rel:"noopener noreferrer"},Zs=t(`<div class="language-vbnet line-numbers-mode" data-ext="vbnet"><pre class="language-vbnet"><code>      location <span class="token operator">/</span>book<span class="token operator">/</span> <span class="token punctuation">{</span>
          root <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>test<span class="token punctuation">;</span>
          autoindex <span class="token keyword">on</span><span class="token punctuation">;</span> # 打开 autoindex，，可选参数有 <span class="token keyword">on</span> | <span class="token keyword">off</span>
          autoindex_format html<span class="token punctuation">;</span> # 以html的方式进行格式化，可选参数有 html | json | xml
          autoindex_exact_size <span class="token keyword">on</span><span class="token punctuation">;</span> # 修改为<span class="token keyword">off</span>，会以KB、MB、GB显示文件大小，默认为<span class="token keyword">on</span>以bytes显示出⽂件的确切⼤⼩
          autoindex_localtime <span class="token keyword">off</span><span class="token punctuation">;</span> # 显示⽂件时间 GMT格式
      <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b44a714dcb3c43c78b3e95c5fe80b135~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1616&amp;h=828&amp;s=120547&amp;e=png&amp;b=010101" alt="image.png"></p>`,2),Qs={href:"http://hzznb-xzll.xyz/book/",title:"http://hzznb-xzll.xyz/book/",target:"_blank",rel:"noopener noreferrer"},na=n("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c6f9d133db64414ac7191663fcba115~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3530&h=1352&s=435859&e=png&b=ffffff",alt:"image.png"},null,-1),sa=t(`<h2 id="_15-5、root-alias" tabindex="-1"><a class="header-anchor" href="#_15-5、root-alias" aria-hidden="true">#</a> 15.5、root&amp;alias</h2><p>root和alias这俩货一般都是用于指定静态资源目录，但是还是有挺大区别的，虽然这是个小知识点但是如果你不清楚规则，很容易走弯路，所以这里阐明并演示这俩的区别。</p><h3 id="_15-5-1、root" tabindex="-1"><a class="header-anchor" href="#_15-5-1、root" aria-hidden="true">#</a> 15.5.1、root</h3><p>说先说root：</p><table><thead><tr><th>语法:</th><th><code>root path;</code></th></tr></thead><tbody><tr><td>默认值:</td><td><code>root html;</code></td></tr><tr><td>作用域:</td><td><code>http</code>, <code>server</code>, <code>location</code>, <code>if in location</code></td></tr></tbody></table><p>为请求设置根目录。例如，使用以下配置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>location /static/ <span class="token punctuation">{</span>
    root /usr/local/nginx/test<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),aa={href:"http://www.hzznb-xzll.xyz/static/image2.jpg",title:"http://www.hzznb-xzll.xyz/static/image2.jpg",target:"_blank",rel:"noopener noreferrer"},ea=n("br",null,null,-1),ta=n("strong",null,[s("root指令会 将 /static/ 拼接到 /usr/local/nginx/test 后边"),n("br"),s(" 即完整目录路径为： /usr/local/nginx/test/static/")],-1),pa=n("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ea48800fdb14a909134a7b58a4df770~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3450&h=1912&s=1090431&e=png&b=fcfcfc",alt:"image.png"},null,-1),ia=t(`<h3 id="_15-5-2、alias" tabindex="-1"><a class="header-anchor" href="#_15-5-2、alias" aria-hidden="true">#</a> 15.5.2、alias</h3><p><strong>alias</strong> 中文意思别名，这个和root最大区别就是 <strong>不会进行拼接</strong>，下边我们改下nginx.conf文件来演示下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>location /static <span class="token punctuation">{</span> <span class="token comment"># 注意一般 alias的 url都不带后边的/</span>
     <span class="token builtin class-name">alias</span> /usr/local/nginx/test/<span class="token punctuation">;</span> <span class="token comment"># 使用alias时  这里的目录最后边一定要加/ 否则就404</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),ca=n("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/249189ce28f541e3838660b1b7fa0304~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1840&h=1052&s=176466&e=png&b=010101",alt:"image.png"},null,-1),la={href:"http://www.hzznb-xzll.xyz/static/image2.jpg",title:"http://www.hzznb-xzll.xyz/static/image2.jpg",target:"_blank",rel:"noopener noreferrer"},oa=n("img",{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f1ec27672ea1411eaacd9f29ddb11753~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3466&h=1592&s=681624&e=png&b=fafafa",alt:"image.png"},null,-1),ra=n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f8edf38a338f46c18d475ccf878ac5b7~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3488&h=1642&s=1045818&e=png&b=fcfcfc",alt:"image.png"},null,-1),da=t(`<h3 id="_15-5-3、proxy-pass-中的斜线与root和-alias的相似之处" tabindex="-1"><a class="header-anchor" href="#_15-5-3、proxy-pass-中的斜线与root和-alias的相似之处" aria-hidden="true">#</a> 15.5.3、proxy_pass 中的斜线与root和 alias的相似之处</h3><p>在我们上边的负载均衡以及动静锋利等等演示中，可以看到我们的proxy_pass的配置基本上都是这么配的：</p><div class="language-arduino line-numbers-mode" data-ext="arduino"><pre class="language-arduino"><code>proxy_pass http<span class="token operator">:</span><span class="token comment">//mybackendserver/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),ma={href:"http://mybackendserver/",title:"http://mybackendserver/",target:"_blank",rel:"noopener noreferrer"},ua=n("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7582c00a5314e2888ac4271628d0a3a~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1818&h=1176&s=283414&e=png&b=010101",alt:"image.png"},null,-1),ba={href:"http://mybackendserver/",title:"http://mybackendserver/",target:"_blank",rel:"noopener noreferrer"},va=n("img",{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ff6e676d27d403ca377fbe60999ab3c~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3540&h=1626&s=694443&e=png&b=fafafa",alt:"image.png"},null,-1),ha=n("strong",null,"会拼接",-1),ga={href:"http://mybackendserver/",title:"http://mybackendserver/",target:"_blank",rel:"noopener noreferrer"},ka=n("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/211632b276484ed2a2521dea765f3521~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3544&h=1556&s=416346&e=png&b=fbfbfb",alt:"image.png"},null,-1),fa=t(`<p><strong>看出来了吗，proxy_pass 值后边加斜线和不加斜线 ，区别是很大的。不加斜线 有点像root（会拼接），加了斜线 有点像alias （不会进行 拼接）。要牢记这个事情。</strong></p><h2 id="_15-6、upstream-中常用的几个指令" tabindex="-1"><a class="header-anchor" href="#_15-6、upstream-中常用的几个指令" aria-hidden="true">#</a> 15.6、upstream 中常用的几个指令</h2><p>在upstream中，有些指令也是比较常用的所以我们这里也列一下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>server</td><td>反向服务地址</td></tr><tr><td>weight</td><td>权重</td></tr><tr><td>fail_timeout</td><td>与max_fails结合使用。</td></tr><tr><td>max_fails</td><td>设置在fail_timeout参数设置的时间内最大失败次数，如果在这个时间内，所有针对该服务器的请求都失败了，那么认为该服务器会被认为是停机了。</td></tr><tr><td>max_conns</td><td>允许最大连接数</td></tr><tr><td>fail_time</td><td>服务器会被认为停机的时间长度,默认为10s</td></tr><tr><td>backup</td><td>标记该服务器为备用服务器，当主服务器停止时，请求会被发送到它这里。</td></tr><tr><td>down</td><td>标记服务器永久停机了</td></tr><tr><td>slow_start</td><td>当节点恢复，不立即加入</td></tr></tbody></table><h1 id="_16、重试策略" tabindex="-1"><a class="header-anchor" href="#_16、重试策略" aria-hidden="true">#</a> 16、重试策略</h1><h2 id="_16-1、服务不可用重试" tabindex="-1"><a class="header-anchor" href="#_16-1、服务不可用重试" aria-hidden="true">#</a> 16.1、服务不可用重试</h2><p>关于重试策略我们这里也说一下，重试是在发生错误时的一种不可缺少的手段，这样当某一个或者某几个服务宕机时（因为我们现在大多都是多实例部署），如果有正常服务，那么将请求 重试到正常服务的机器上去。</p><p>下边我们先修改下nginx.conf文件：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code>    upstream mybackendserver {
        <span class="token comment"># 60秒内 如果请求8081端口这个应用失败</span>
        <span class="token comment"># 3次，则认为该应用宕机 时间到后再有请求进来继续尝试连接宕机应用且仅尝试 1 次，如果还是失败，</span>
        <span class="token comment"># 则继续等待 60 秒...以此循环，直到恢复</span>
        <span class="token key attr-name">server 172.30.128.64:8081 fail_timeout</span><span class="token punctuation">=</span><span class="token value attr-value">60s max_fails=3;</span> 
        
        server 172.30.128.64:8082;
        server 172.30.128.64:8083;
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6183c53597d14a5bb8d8a35e46e9c5e7~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3466&amp;h=1324&amp;s=802033&amp;e=png&amp;b=020202" alt="image.png"></p><h2 id="_16-2、错误重试" tabindex="-1"><a class="header-anchor" href="#_16-2、错误重试" aria-hidden="true">#</a> 16.2、错误重试</h2><p>错误重试是你可以配置哪些状态下 才会执行重试，比如如下这个配置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token comment"># 指定哪些错误状态才执行 重试 比如下边的 error 超时，500,502,503 504</span>
proxy_next_upstream error <span class="token function">timeout</span> http_500 http_502 http_503 http_504<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们使用idea启动8082端口，然后打个断点让8082这个服务超时（验证下超时重试），效果如下： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c5a45d2a9924e258417ca3ebff16556~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3184&amp;h=1570&amp;s=641853&amp;e=png&amp;b=fbfbfb" alt="image.png"> 可以看到8082因为超时，重试给8081 然后8081也不可用重试给8083 最终8083返回数据。</p><h2 id="_16-3、关于backup" tabindex="-1"><a class="header-anchor" href="#_16-3、关于backup" aria-hidden="true">#</a> 16.3、关于backup</h2><p>Nginx 支持设置备用节点，当所有线上节点都异常时会启用备用节点，同时备用节点也会影响到失败 重试的逻辑。</p><p>我们可以通过 backup 指令来定义备用服务器，backup有如下特征：</p><ol><li>正常情况下，请求不会转到到 backup 服务器，包括失败重试的场景</li><li>当所有正常节点全部不可用时，backup 服务器生效，开始处理请求</li><li>一旦有正常节点恢复，就使用已经恢复的正常节点</li><li>backup 服务器生效期间，不会存在所有正常节点一次性恢复的逻辑</li><li>如果全部 backup 服务器也异常，则会将所有节点一次性恢复，加入存活列表</li><li>如果全部节点（包括 backup）都异常了，则 Nginx 返回 502 错误</li></ol><p>接着我们修改下nginx.conf文件演示下backup的作用：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code>upstream mybackendserver {
    <span class="token key attr-name">server 172.30.128.64:8081 fail_timeout</span><span class="token punctuation">=</span><span class="token value attr-value">60s max_fails=3; # 60秒内 如果请求某一个应用失败3次，则认为该应用宕机 时间到后再有请求进来继续尝试连接宕机应用且仅尝试 1 次，如果还是失败，则继续等待 60 秒...以此循环，直到恢复</span>
    server 172.30.128.64:8082;
    server 172.30.128.64:8083 backup; # 设置8083位备机
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6f7717f7d6f1475cbbf666f5243dbe98~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3142&amp;h=472&amp;s=100351&amp;e=png&amp;b=000000" alt="image.png"></p><p>之后我们启动8081 8082 8083 三个服务，然后先停掉8081 再停掉8082 看看效果：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/55b3edda22b947018964194635c76eec~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=3262&amp;h=1764&amp;s=767075&amp;e=png&amp;b=020202" alt="image.png"> 可以看到即使8081 不可用也只是去8082重试而不会到备机重试，如果8081 8082都不可用则请求重试到备机：8083</p><h1 id="_17、最后" tabindex="-1"><a class="header-anchor" href="#_17、最后" aria-hidden="true">#</a> 17、最后</h1><p>为了方便粘贴以及观察，这里贴出我机器上完整的 nginx.conf文件，如下：</p><h2 id="_17-1、贴出完整nginx-conf文件" tabindex="-1"><a class="header-anchor" href="#_17-1、贴出完整nginx-conf文件" aria-hidden="true">#</a> 17.1、贴出完整nginx.conf文件</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>user  nginx<span class="token punctuation">;</span>
worker_processes  auto<span class="token punctuation">;</span>

error_log  /var/log/nginx/error.log notice<span class="token punctuation">;</span>
pid        /var/run/nginx.pid<span class="token punctuation">;</span>


events <span class="token punctuation">{</span>
    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


http <span class="token punctuation">{</span>
    include       /etc/nginx/mime.types<span class="token punctuation">;</span>
    default_type  application/octet-stream<span class="token punctuation">;</span>

    <span class="token comment"># log_format  debug  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span>
    <span class="token comment">#                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span>
    <span class="token comment">#                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span>
    <span class="token comment">#</span>
    log_format  debug  <span class="token string">&#39; $remote_user [$time_local]  $http_x_Forwarded_for $remote_addr  $request &#39;</span>  
                      <span class="token string">&#39;$http_x_forwarded_for &#39;</span>  
                      <span class="token string">&#39;$upstream_addr &#39;</span>  
                      <span class="token string">&#39;ups_resp_time: $upstream_response_time &#39;</span>  
                      <span class="token string">&#39;request_time: $request_time&#39;</span><span class="token punctuation">;</span> 

    access_log  /var/log/nginx/access.log  debug<span class="token punctuation">;</span>

    sendfile        on<span class="token punctuation">;</span>
    <span class="token comment">#tcp_nopush     on;</span>

    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>

    upstream mybackendserver <span class="token punctuation">{</span>
        server <span class="token number">172.30</span>.128.64:8081 <span class="token assign-left variable">fail_timeout</span><span class="token operator">=</span>60s <span class="token assign-left variable">max_fails</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment"># 60秒内 如果请求某一个应用失败3次，则认为该应用宕机 时间到后再有请求进来继续尝试连接宕机应用且仅尝试 1 次，如果还是失败，则继续等待 60 秒...以此循环，直到恢复</span>
        server <span class="token number">172.30</span>.128.64:8082<span class="token punctuation">;</span>
        server <span class="token number">172.30</span>.128.64:8083 backup<span class="token punctuation">;</span> <span class="token comment"># 设置8083位备机</span>
    <span class="token punctuation">}</span>

     <span class="token comment"># 开启/关闭 压缩机制</span>
    <span class="token function">gzip</span> on<span class="token punctuation">;</span>
    <span class="token comment"># 根据文件类型选择 是否开启压缩机制</span>
    gzip_types text/plain application/javascript text/css application/xml text/javascript image/jpeg image/jpg image/gif image/png  application/json<span class="token punctuation">;</span>
    <span class="token comment"># 设置压缩级别，越高资源消耗越大越耗时，但压缩效果越好</span>
    gzip_comp_level <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token comment"># 设置是否携带Vary:Accept-Encoding 的响应头</span>
    gzip_vary on<span class="token punctuation">;</span>
    <span class="token comment"># 处理压缩请求的 缓冲区数量和大小</span>
    gzip_buffers <span class="token number">32</span> 64k<span class="token punctuation">;</span>
    <span class="token comment"># 对于不支持压缩功能的客户端请求 不开启压缩机制</span>
    gzip_disable <span class="token string">&quot;MSIE [1-6]\\.&quot;</span><span class="token punctuation">;</span> <span class="token comment"># 比如低版本的IE浏览器不支持压缩</span>
    <span class="token comment"># 设置压缩功能所支持的HTTP最低版本</span>
    gzip_http_version <span class="token number">1.1</span><span class="token punctuation">;</span>
    <span class="token comment"># 设置触发压缩的最小阈值</span>
    gzip_min_length 2k<span class="token punctuation">;</span>
    <span class="token comment"># off/any/expired/no-cache/no-store/private/no_last_modified/no_etag/auth 根据不同配置对后端服务器的响应结果进行压缩</span>
    gzip_proxied any<span class="token punctuation">;</span>

    <span class="token comment"># 指定缓存存放目录为/usr/local/nginx/test/nginx_cache_storage，并设置缓存名称为mycache，大小为64m， 1天未被访问过的缓存将自动清除，磁盘中缓存的最大容量为1gb</span>
    proxy_cache_path /usr/local/nginx/test/nginx_cache_storage <span class="token assign-left variable">levels</span><span class="token operator">=</span><span class="token number">1</span>:2 <span class="token assign-left variable">keys_zone</span><span class="token operator">=</span>mycache:64m <span class="token assign-left variable">inactive</span><span class="token operator">=</span>1d <span class="token assign-left variable">max_size</span><span class="token operator">=</span>1g<span class="token punctuation">;</span>
    <span class="token comment"># 对请求速率限流</span>
    <span class="token comment">#limit_req_zone $binary_remote_addr zone=myRateLimit:10m rate=5r/s;</span>
    <span class="token comment"># 对请求连接数限流</span>
    limit_conn_zone <span class="token variable">$binary_remote_addr</span> <span class="token assign-left variable">zone</span><span class="token operator">=</span>myConnLimit:10m<span class="token punctuation">;</span> 
    
    <span class="token comment"># --------------------HTTP 演示 配置---------------------</span>
    server <span class="token punctuation">{</span>
      listen <span class="token number">80</span> default<span class="token punctuation">;</span>
      charset utf-8<span class="token punctuation">;</span>
      server_name www.hzznb-xzll.xyz hzznb-xzll.xyz<span class="token punctuation">;</span>

      <span class="token comment">#location /static/ {</span>
      <span class="token comment">#    root /usr/local/nginx/test;  # /usr/local/nginx/test/static/xxx.jpg</span>
      <span class="token comment">#}</span>

      location /static <span class="token punctuation">{</span> <span class="token comment"># 注意一般 alias的 url都不带后边的/ </span>
          <span class="token builtin class-name">alias</span> /usr/local/nginx/test/<span class="token punctuation">;</span> <span class="token comment"># 使用alias时  这里的目录最后边一定要加/ 否则就404</span>
      <span class="token punctuation">}</span>
      <span class="token comment"># 测试autoindex效果</span>
      location /book/ <span class="token punctuation">{</span>
          root /usr/local/nginx/test<span class="token punctuation">;</span>
          autoindex on<span class="token punctuation">;</span> <span class="token comment"># 打开 autoindex，，可选参数有 on | off</span>
          autoindex_format html<span class="token punctuation">;</span> <span class="token comment"># 以html的方式进行格式化，可选参数有 html | json | xml</span>
          autoindex_exact_size on<span class="token punctuation">;</span> <span class="token comment"># 修改为off，会以KB、MB、GB显示文件大小，默认为on以bytes显示出⽂件的确切⼤⼩</span>
          autoindex_localtime off<span class="token punctuation">;</span> <span class="token comment"># 显示⽂件时间 GMT格式</span>
      <span class="token punctuation">}</span>
      
      <span class="token comment"># 临时重定向</span>
      location /temp_redir <span class="token punctuation">{</span>
          rewrite ^/<span class="token punctuation">(</span>.*<span class="token punctuation">)</span> https://www.baidu.com redirect<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment"># 永久重定向</span>
      location /forever_redir <span class="token punctuation">{</span>
          
          rewrite ^/<span class="token punctuation">(</span>.*<span class="token punctuation">)</span> https://www.baidu.com permanent<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment"># rewrite last规则测试</span>
      location /1 <span class="token punctuation">{</span>
        rewrite /1/<span class="token punctuation">(</span>.*<span class="token punctuation">)</span> /2/<span class="token variable">$1</span> last<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      location /2 <span class="token punctuation">{</span>
        rewrite /2/<span class="token punctuation">(</span>.*<span class="token punctuation">)</span> /3/<span class="token variable">$1</span> last<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      location /3 <span class="token punctuation">{</span>
        <span class="token builtin class-name">alias</span>  <span class="token string">&#39;/usr/local/nginx/test/static/&#39;</span><span class="token punctuation">;</span>
        index location_last_test.html<span class="token punctuation">;</span> 
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment"># --------------------HTTP配置---------------------</span>
    server <span class="token punctuation">{</span>
      listen <span class="token number">80</span><span class="token punctuation">;</span>
      charset utf-8<span class="token punctuation">;</span>
      <span class="token comment">#server_name www.xxxadminsystem.com;</span>
      server_name www.hzznbc-xzll.xyz hzznbc-xzll.xyz<span class="token punctuation">;</span>
      <span class="token comment"># 重定向，会显示跳转的地址server_name,如果访问的地址没有匹配会默认使用第一个，即www.likeong.icu</span>
      <span class="token builtin class-name">return</span> <span class="token number">301</span> https://<span class="token variable">$server_name</span><span class="token variable">$request_uri</span><span class="token punctuation">;</span>

        <span class="token comment"># # 指定 username 参数中只要有字母 就不走nginx缓存  </span>
        <span class="token comment"># if ($arg_username ~ [a-z]) {</span>
        <span class="token comment">#     set $cache_name &quot;no cache&quot;;</span>
        <span class="token comment"># }</span>
        <span class="token comment"># # 前端页面资源</span>
        <span class="token comment"># location  /page {</span>
        <span class="token comment">#   alias  &#39;/usr/local/nginx/test/static/&#39;;</span>
        <span class="token comment">#   index index_page.html; </span>

        <span class="token comment">#   allow all;</span>
        <span class="token comment"># }</span>
        <span class="token comment"># # 后端服务</span>
        <span class="token comment"># location  /interface {</span>
        <span class="token comment">#   proxy_pass http://mybackendserver/;</span>
        <span class="token comment">#   # 使用名为 mycache 的缓存空间</span>
        <span class="token comment">#   proxy_cache mycache;</span>
        <span class="token comment">#   # 对于200 206 状态码的数据缓存2分钟</span>
        <span class="token comment">#   proxy_cache_valid 200 206 1m;</span>
        <span class="token comment">#   # 定义生成缓存键的规则（请求的url+参数作为缓存key）</span>
        <span class="token comment">#   proxy_cache_key $host$uri$is_args$args;</span>
        <span class="token comment">#   # 资源至少被重复访问2次后再加入缓存</span>
        <span class="token comment">#   proxy_cache_min_uses 3;</span>
        <span class="token comment">#   # 出现重复请求时，只让其中一个去后端读数据，其他的从缓存中读取</span>
        <span class="token comment">#   proxy_cache_lock on;</span>
        <span class="token comment">#   # 上面的锁 超时时间为4s，超过4s未获取数据，其他请求直接去后端</span>
        <span class="token comment">#   proxy_cache_lock_timeout 4s;</span>
        <span class="token comment">#   # 对于请求参数中有字母的 不走nginx缓存</span>
        <span class="token comment">#   proxy_no_cache $cache_name; # 判断该变量是否有值，如果有值则不进行缓存，没有值则进行缓存</span>
        <span class="token comment">#   # 在响应头中添加一个缓存是否命中的状态（便于调试）</span>
        <span class="token comment">#   add_header Cache-status $upstream_cache_status;</span>
          
        <span class="token comment">#   limit_conn myConnLimit 12;</span>

        <span class="token comment"># limit_req zone=myRateLimit burst=5  nodelay;</span>
        <span class="token comment"># limit_req_status 520;</span>
        <span class="token comment"># limit_req_log_level info;</span>
        <span class="token comment">#}  </span>
    <span class="token punctuation">}</span>

    <span class="token comment"># --------------------HTTPS 配置---------------------</span>
    server <span class="token punctuation">{</span>
        <span class="token comment">#SSL 默认访问端口号为 443</span>
        listen <span class="token number">443</span> ssl<span class="token punctuation">;</span> 
        <span class="token comment">#填写绑定证书的域名 </span>
        server_name www.hzznb-xzll.xyz hzznb-xzll.xyz<span class="token punctuation">;</span> 
        <span class="token comment">#请填写证书文件的相对路径或绝对路径</span>
        ssl_certificate /usr/local/nginx/certificate/hzznb-xzll.xyz_bundle.crt<span class="token punctuation">;</span> 
        <span class="token comment">#请填写私钥文件的相对路径或绝对路径</span>
        ssl_certificate_key /usr/local/nginx/certificate/hzznb-xzll.xyz.key<span class="token punctuation">;</span> 
        <span class="token comment">#停止通信时，加密会话的有效期，在该时间段内不需要重新交换密钥</span>
        ssl_session_timeout 5m<span class="token punctuation">;</span>
        <span class="token comment">#服务器支持的TLS版本</span>
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3<span class="token punctuation">;</span> 
        <span class="token comment">#请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。</span>
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>MD5:<span class="token operator">!</span>RC4:<span class="token operator">!</span>DHE<span class="token punctuation">;</span> 
        <span class="token comment">#开启由服务器决定采用的密码套件</span>
        ssl_prefer_server_ciphers on<span class="token punctuation">;</span>
        
        <span class="token comment"># 指定 username 参数中只要有字母 就不走nginx缓存  </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$arg_username</span> ~ <span class="token punctuation">[</span>a-z<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token builtin class-name">set</span> <span class="token variable">$cache_name</span> <span class="token string">&quot;no cache&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment"># 前端页面资源</span>
        location  /page <span class="token punctuation">{</span>
          <span class="token builtin class-name">alias</span>  <span class="token string">&#39;/usr/local/nginx/test/static/&#39;</span><span class="token punctuation">;</span>
          index index_page.html<span class="token punctuation">;</span> 

          allow all<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment"># 后端服务</span>
        location  /interface <span class="token punctuation">{</span>
          proxy_pass http://mybackendserver/<span class="token punctuation">;</span>

          <span class="token comment"># 指定哪些错误状态才执行 重试</span>
          proxy_next_upstream error <span class="token function">timeout</span> http_500 http_502 http_503 http_504 http_404<span class="token punctuation">;</span>


          <span class="token comment"># 使用名为 mycache 的缓存空间</span>
          proxy_cache mycache<span class="token punctuation">;</span>
          <span class="token comment"># 对于200 206 状态码的数据缓存2分钟</span>
          proxy_cache_valid <span class="token number">200</span> <span class="token number">206</span> 1m<span class="token punctuation">;</span>
          <span class="token comment"># 定义生成缓存键的规则（请求的url+参数作为缓存key）</span>
          proxy_cache_key <span class="token variable">$host</span><span class="token variable">$uri</span><span class="token variable">$is_args</span><span class="token variable">$args</span><span class="token punctuation">;</span>
          <span class="token comment"># 资源至少被重复访问2次后再加入缓存</span>
          proxy_cache_min_uses <span class="token number">3</span><span class="token punctuation">;</span>
          <span class="token comment"># 出现重复请求时，只让其中一个去后端读数据，其他的从缓存中读取</span>
          proxy_cache_lock on<span class="token punctuation">;</span>
          <span class="token comment"># 上面的锁 超时时间为4s，超过4s未获取数据，其他请求直接去后端</span>
          proxy_cache_lock_timeout 4s<span class="token punctuation">;</span>
          <span class="token comment"># 对于请求参数中有字母的 不走nginx缓存</span>
          proxy_no_cache <span class="token variable">$cache_name</span><span class="token punctuation">;</span> <span class="token comment"># 判断该变量是否有值，如果有值则不进行缓存，没有值则进行缓存</span>
          <span class="token comment"># 在响应头中添加一个缓存是否命中的状态（便于调试）</span>
          add_header Cache-status <span class="token variable">$upstream_cache_status</span><span class="token punctuation">;</span>
          
          limit_conn myConnLimit <span class="token number">12</span><span class="token punctuation">;</span>

        <span class="token comment"># limit_req zone=myRateLimit burst=5  nodelay;</span>
        <span class="token comment"># limit_req_status 520;</span>
        <span class="token comment"># limit_req_log_level info;</span>
        <span class="token punctuation">}</span> 

        <span class="token comment"># 后端服务</span>
        location  /interface2 <span class="token punctuation">{</span>
          proxy_pass http://mybackendserver<span class="token punctuation">;</span>
          <span class="token comment"># 使用名为 mycache 的缓存空间</span>
          proxy_cache mycache<span class="token punctuation">;</span>
          <span class="token comment"># 对于200 206 状态码的数据缓存2分钟</span>
          proxy_cache_valid <span class="token number">200</span> <span class="token number">206</span> 1m<span class="token punctuation">;</span>
          <span class="token comment"># 定义生成缓存键的规则（请求的url+参数作为缓存key）</span>
          proxy_cache_key <span class="token variable">$host</span><span class="token variable">$uri</span><span class="token variable">$is_args</span><span class="token variable">$args</span><span class="token punctuation">;</span>
          <span class="token comment"># 资源至少被重复访问2次后再加入缓存</span>
          proxy_cache_min_uses <span class="token number">3</span><span class="token punctuation">;</span>
          <span class="token comment"># 出现重复请求时，只让其中一个去后端读数据，其他的从缓存中读取</span>
          proxy_cache_lock on<span class="token punctuation">;</span>
          <span class="token comment"># 上面的锁 超时时间为4s，超过4s未获取数据，其他请求直接去后端</span>
          proxy_cache_lock_timeout 4s<span class="token punctuation">;</span>
          <span class="token comment"># 对于请求参数中有字母的 不走nginx缓存</span>
          proxy_no_cache <span class="token variable">$cache_name</span><span class="token punctuation">;</span> <span class="token comment"># 判断该变量是否有值，如果有值则不进行缓存，没有值则进行缓存</span>
          <span class="token comment"># 在响应头中添加一个缓存是否命中的状态（便于调试）</span>
          add_header Cache-status <span class="token variable">$upstream_cache_status</span><span class="token punctuation">;</span>
          
          limit_conn myConnLimit <span class="token number">12</span><span class="token punctuation">;</span>

        <span class="token comment"># limit_req zone=myRateLimit burst=5  nodelay;</span>
        <span class="token comment"># limit_req_status 520;</span>
        <span class="token comment"># limit_req_log_level info;</span>
        <span class="token punctuation">}</span> 

    <span class="token punctuation">}</span>

    <span class="token comment"># include /etc/nginx/conf.d/*.conf;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_17-2、个人絮叨" tabindex="-1"><a class="header-anchor" href="#_17-2、个人絮叨" aria-hidden="true">#</a> 17.2、个人絮叨</h2>`,28),_a={href:"https://nginx.org/en/docs/",title:"https://nginx.org/en/docs/",target:"_blank",rel:"noopener noreferrer"},xa=n("hr",null,null,-1),wa=n("p",null,"如果本文对你有帮助或启发请帮忙点个赞👍 👍 ，谢谢😋😋~~",-1);function ja(ya,za){const a=i("ExternalLinkIcon");return c(),l("div",null,[r,n("ol",null,[d,m,n("li",null,[s("关于nginx如何安装（本文不再赘述），参考之前我的一篇文章："),n("a",u,[s("Centos7中安装nginx"),e(a)])]),b]),v,n("p",null,[s("关于nginx的安装在这里不再赘述，参考我之前的一篇文章："),n("a",h,[s("Centos7中安装nginx"),e(a)])]),g,n("p",null,[s("然后在宿主机hosts中配置域名 172.30.128.65 "),n("a",k,[s("www.locatest.com"),e(a)]),s(" 映射后，观察到nginx服务器返回内容如下： "),f]),_,n("p",null,[s("改下location 在修饰符~后加个 * "),x,s(" 看下实际效果： "),w,s(" 可以看到这次 curl "),n("a",j,[s("www.locatest.com/REGEXMATCH"),e(a)]),s(" 是可以匹配上的，说明 ~* 确实是不区分大小写的。")]),y,n("p",null,[s("使用 vi /etc/nginx/nginx.conf命令修改nginx.conf文件，如下： "),z,s(" （注意上边的 proxy_pass "),n("a",q,[s("http://mybackendserver/"),e(a)]),s(),$,s("，"),T,s(" , "),L,s(" ,这一点我们在15.5.3小节会讲到，这里留意下就好）")]),I,S,n("blockquote",null,[n("p",null,[s("ps：在第一次调用中出现了一个错误: failed (13: Permission denied) while connecting to upstream： "),E,s(" 解决办法很简单在虚拟机执行命令：setenforce 0 来关闭"),H,s("即可，或者参考："),n("a",C,[s("stackoverflow上的解决方案"),e(a)])])]),n("p",null,[s("解决后再次调用发现可以了：（注意 "),n("a",R,[s("www.proxytest.com"),e(a)]),s(" 是我随便写的域名没做dns解析，我是在请求发出方 宿主机 配了host，所以才能请求通） "),P,s("同时也可使用命令 tail -n +1 -f access.log 观察到nginx日志输出如下： "),M]),A,n("p",null,[s("同ip_hash一样，设定最小连接数策略也很简单，就是在你的upstream中 指定 "),U,s("即可，如下： "),N,s(" 由于我这里最小连接数看不出啥效果，所以就不演示截图了，知道怎么配置最小连接数即可。关于第三方的负载策略。不做过多说明了，可以看看："),n("a",O,[s("nginx官方文档"),e(a)]),s(" 获取其他的网上资料。")]),D,n("p",null,[s("首先我们在浏览器输入："),n("a",G,[s("www.proxytest.com/frontend/"),e(a)]),s(" ，可以看到请求返回了一个html页面，其实就是我们刚才的 /usr/local/nginx/test/static/index_page.html文件 "),B,s(' 接着我们输入要查询的人名，之后点击 "调用get接口" 按钮，如下： '),W,s(" 返回数据： "),X,s(" 查看nginx访问日志可以看到两次请求的输出： "),V]),K,n("p",null,[s("首先想解决跨越就得避免不同源，而我们可不可以 把对后端的代理 放在前端的server中呢（也就是说让前后端统一使用一个端口，一个server_name）？答案是可以的，因为server支持多个location配置呀（一个location处理前端，一个location转发后端），我们改下配置文件试一把如下： "),F,s(" 之后重启nginx后在浏览器输入 "),n("a",J,[s("www.xxxadminsystem.com/page/"),e(a)]),s(" ，效果如下： "),Y,s(" 上边/page请求返回了html页面之后我们输入参数点击“调用get接口”查看到后端接口的调用如下： "),Z,s(),Q,s(" 从上边可以看到，我上边设想的方式是可行的。")]),nn,n("table",null,[sn,n("tbody",null,[an,en,tn,n("tr",null,[pn,n("td",null,[s("指定缓存存储的路径，文件名为cache key的md5值，然后多级目录的话，根据level参数来生成，key_zone参数用来指定在共享内存中缓存数据的名称和内存大小，比如keys_zone=mycache:100m，inactive用来指定缓存没有被访问后超时移除的时间，默认是10分钟，也可以自己指定比如inactive=2h ；max_size 用来指定缓存的最大值，超过这个值则会自动移除最近最少使用（lru淘汰算法）的缓存 这个指令对应的参数很多，具体见官网："),n("a",cn,[s("proxy_cache_path"),e(a)])]),ln,on,rn,dn]),mn,un,bn,vn,hn,gn,kn])]),n("p",null,[s("事实上，"),fn,s("模块中"),_n,s("，在这里我不可能把所有都列出来，只列出上边那几个已经很占篇幅了，如果有需要请参考： "),n("a",xn,[s("nginx官方文档"),e(a)]),s("， 在官方文档中，详细描述了ngx_http_proxy_module模块（包含了proxy_cache部分）的各种指令、作用以及使用方式，相信在遇到困难和疑惑时，官方文档永远是你最好的老师！如下： "),wn]),jn,n("p",null,[yn,s(" 有域名了，下一步就需要配置DNS解析，让别人通过公网也访问到呀，所以点击上图的 "),zn,s(" 按钮后，来到下边的页面添加解析记录，如下：（主机记录www的结果是："),n("a",qn,[s("www.hzznb-xzll.xyz"),e(a)]),s(" ，@的结果是 hzznb-xzll.xyz， *的意思为泛解析，对应的结果是 xxx.hzznb-xzll.xyz）： "),$n,s(" 配置好解析后，我们开始申请一个免费的ssl证书并将其和我上边的域名绑定，如下： "),Tn,s(" 提交申请后，因为我们选择的手动DNS验证，所以接下来按照人家的提示手动配置（这个操作比较重要，不做这一步，证书验证肯定过不去，所以必须做并且做对）： "),Ln,s(" 之后我们在我的证书看到已经完成验证，此时就可以下载ssl证书，然后配置我们的nginx了： "),In,s(" 因为我们接下来要配置到nginx反向代理服务器，所以这里选择下载nginx类型的ssl证书： "),Sn]),En,n("p",null,[s("一般情况下为了安全都不使用http方式访问页面or后台服务，但是有的人就是喜欢使用http访问怎么办？好说，我给http加个跳转，你访问 "),n("a",Hn,[s("xxx.com"),e(a)]),s(" 我给你跳转到"),n("a",Cn,[s("xxx.com"),e(a)]),s(", 想达到此效果需要先修改下nginx.conf文件：")]),Rn,n("p",null,[s("首先请求 "),n("a",Pn,[s("www.hzznb-xzll.xyz/page/"),e(a)]),s(" 会返回重定向地址，让你重新定向到 "),n("a",Mn,[s("www.hzznb-xzll.xyz/page/"),e(a)]),s(),An,s(" 请求（这一步浏览器会自动发起请求，无需手动点击或刷新啥的）定向后的目标地址： "),n("a",Un,[s("www.hzznb-xzll.xyz/page/"),e(a)]),s(),Nn,s(" 可以看到http方式的请求被成功重定向到了https server(443端口对应的server)。")]),On,n("p",null,[Dn,s(" 可以看到我们定义 访问 "),n("a",Gn,[s("hzznb-xzll.xyz/1/"),e(a)]),s(" 的请求被替换为 "),n("a",Bn,[s("hzznb-xzll.xyz/2/"),e(a)]),s(" 之后再被替换为 "),n("a",Wn,[s("hzznb-xzll.xyz/3/"),e(a)]),s(" 最后找到/usr/local/nginx/test/static/location_last_test.html 这个文件并返回。"),Xn,Vn,s(" 当访问 "),n("a",Kn,[s("hzznb-xzll.xyz/temp_redir/"),e(a)]),s(" 这个请求会临时（302）重定向到百度页面"),Fn,Jn,s(" 当访问 "),n("a",Yn,[s("hzznb-xzll.xyz/forever_red…"),e(a)]),s(" 这个请求会永久（301）重定向到百度页面")]),Zn,n("table",null,[Qn,n("tbody",null,[ns,ss,as,es,ts,ps,is,cs,ls,os,rs,ds,ms,n("tr",null,[us,n("td",null,[s("请求主机头字段，否则为服务器名称，如:"),n("a",bs,[s("www.hzznb-xzll.xyz"),e(a)])])]),vs,hs,gs,ks,fs,_s,xs,ws,js,ys,zs,qs,$s,Ts,Ls,Is,Ss,Es,Hs,Cs,Rs,Ps,Ms,As,Us,Ns,Os,Ds,Gs,Bs,Ws,Xs,Vs])]),Ks,Fs,Js,n("p",null,[s("之后我们配置nginx， 使得访问 "),n("a",Ys,[s("hzznb-xzll.xyz/book/"),e(a)]),s(" 时,返回 /usr/local/nginx/test/book/目录下的书籍，配置如下：")]),Zs,n("p",null,[s("重启nginx并在浏览器输入 "),n("a",Qs,[s("hzznb-xzll.xyz/book/"),e(a)]),s(" （注意book后边的斜线 / 不能去掉，否则404了，具体原因我们下边马上会说），看下效果： "),na]),sa,n("p",null,[s("此时，当你请求 "),n("a",aa,[s("www.hzznb-xzll.xyz/static/imag…"),e(a)]),s(" 时，/usr/local/nginx/test/static/image2.jpg 文件将被作为响应内容响应给客户端,也就是说 :"),ea,ta,s(" 演示效果如下： "),pa]),ia,n("p",null,[ca,s(" 上边配置的意思就是当前你访问 "),n("a",la,[s("www.hzznb-xzll.xyz/static/imag…"),e(a)]),s(" 时，nginx会去alias配置的路径：/usr/local/nginx/test/目录下找 image2.jpg 这个文件从而返回。比如我现在的/usr/local/nginx/test/目录下没有image2.jpg 文件则返回404，如下： "),oa,s(" 之后我们copy image2.jpg文件到 /usr/local/nginx/test/ 目录，然后看下效果： "),ra,s(" 可以看到成功返回了。")]),da,n("p",null,[s("这里有个东西和root与alias的规则很像，所以我们在这里也提一下，就是 "),n("a",ma,[s("http://mybackendserver/"),e(a)]),s(" 后边这个斜线 /，如果你不写 / 则会将location的url拼接到路径后边，如果你写了则不会，下边我们演示下这样更直观些。修改nginx.conf如下： "),ua,s(" interface 这个location不会拼接 interface到 "),n("a",ba,[s("http://mybackendserver/"),e(a)]),s(" 后边，如下： "),va]),n("p",null,[s("interface2 这个location "),ha,s(" interface2到 "),n("a",ga,[s("http://mybackendserver/"),e(a)]),s(" 后边（从而导致接口404），如下： "),ka]),fa,n("p",null,[s("这篇文章写了前后有20天，中间遇到很多的问题，都一一解决了，到这里我感到收获颇多，因为我之前对nginx说实话了解的并不多，这篇文章也基本补齐了对nginx的认识和使用。另外值的一说的是，nginx可不止本文这些东西，功能海了去了，更多的请查阅nginx官网，里边每一个模块，每一个指令以及作用都说的清清楚楚，官网戳这里："),n("a",_a,[s("nginx官网文档"),e(a)]),s(" 。")]),xa,wa])}const $a=p(o,[["render",ja],["__file","nginx yibasuo！（chaoxiangxijiangjie_shicao）.html.vue"]]);export{$a as default};
