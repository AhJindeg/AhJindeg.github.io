import{_ as e,o as t,c as r,a}from"./app-X7JQ3QX2.js";const o={},i=a('<h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h2><ul><li><p>Node.js &gt;= 12</p></li><li><p>受 Angular 启发</p></li><li><p>使用 Express 或 Fastify</p></li><li><p>支持 MVC、SSE、CORS、Swagger</p></li><li><p>支持 TypeScript 和 JavaScript</p></li><li><p>使用 Babel 编译</p></li><li><p>支持 RESTful API、RPC 和 GraphQL</p></li><li><p>遵循 SOLID 原则</p><ul><li>单一职责原则</li><li>开放扩展封闭修改原则</li><li>里式替换原则</li><li>接口隔离原则</li><li>依赖反转原则</li></ul></li><li><p>推荐使用 joi 来校验数据</p></li><li><p>默认提供TypeORM 和 Sequelize 的集成，也支持 Mongo、Prisma 和 Knex.js</p></li><li><p>Node.js 不遵循请求/响应多线程无状态模型，而是采用单线程和事件循环模型。即 Node.js 不会为每个请求创建一个新的线程，所以单例不需要考虑竞态问题。</p></li><li><p>文档推荐的 CSRF 保护模块已经停止维护</p></li></ul><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念" aria-hidden="true">#</a> 核心概念</h2><ul><li>Module</li><li>Controller</li><li>依赖注入（Provider &amp; Injectable）</li><li>Middleware</li><li>Exception Filter</li><li>Pipe</li><li>Guard</li></ul><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h2><ul><li>class-validator 只支持 TS 不支持 JS</li></ul><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>bash</p><p>复制代码</p><p><code>npm i -g @nestjs/cli nest new --strict project-name</code></p><h2 id="命令" tabindex="-1"><a class="header-anchor" href="#命令" aria-hidden="true">#</a> 命令</h2><p>bash</p><p>复制代码</p><p><code>npm run start:dev nest g resource users # 包含模块、service、控制器、实体类、DTO、测试 nest g mo # 生成 module nest g co # 生成 controller nest g s # 生成 service</code></p><h2 id="装饰器" tabindex="-1"><a class="header-anchor" href="#装饰器" aria-hidden="true">#</a> 装饰器</h2><h3 id="参数装饰器" tabindex="-1"><a class="header-anchor" href="#参数装饰器" aria-hidden="true">#</a> 参数装饰器</h3><table><thead><tr><th>装饰器</th><th>作用</th></tr></thead><tbody><tr><td><code>@Request(), @Req()</code></td><td><code>req</code></td></tr><tr><td><code>@Response(), @Res()</code></td><td><code>res</code></td></tr><tr><td><code>@Next()</code></td><td><code>next</code></td></tr><tr><td><code>@Session()</code></td><td><code>req.session</code></td></tr><tr><td><code>@Param(param?: string)</code></td><td><code>req.params</code> / <code>req.params[param]</code></td></tr><tr><td><code>@Body(param?: string)</code></td><td><code>req.body</code> / <code>req.body[param]</code></td></tr><tr><td><code>@Query(param?: string)</code></td><td><code>req.query</code> / <code>req.query[param]</code></td></tr><tr><td><code>@Headers(param?: string)</code></td><td><code>req.headers</code> / <code>req.headers[param]</code></td></tr><tr><td><code>@Ip()</code></td><td><code>req.ip</code></td></tr><tr><td><code>@HostParam()</code></td><td><code>req.hosts</code></td></tr></tbody></table><h3 id="自定义装饰器" tabindex="-1"><a class="header-anchor" href="#自定义装饰器" aria-hidden="true">#</a> 自定义装饰器</h3><p>typescript</p><p>复制代码</p><p><code>export const User = createParamDecorator( (data: string, ctx: ExecutionContext) =&gt; { const request = ctx.switchToHttp().getRequest(); const user = request.user; return data ? user?.[data] : user; }, );</code></p><p>typescript</p><p>复制代码</p><p><code>@Get() async findOne(@User(&#39;firstName&#39;) firstName: string) { console.log(`Hello ${firstName}`); }</code></p><p>typescript</p><p>复制代码</p><p><code>import { applyDecorators } from &#39;@nestjs/common&#39;; export function Auth(...roles: Role[]) { return applyDecorators( SetMetadata(&#39;roles&#39;, roles), UseGuards(AuthGuard, RolesGuard), ApiBearerAuth(), ApiUnauthorizedResponse({ description: &#39;Unauthorized&#39; }), ); }</code></p><p>typescript</p><p>复制代码</p><p><code>@Get(&#39;users&#39;) @Auth(&#39;admin&#39;) findAllUsers() {}</code></p><h2 id="controller" tabindex="-1"><a class="header-anchor" href="#controller" aria-hidden="true">#</a> Controller</h2><p>typescript</p><p>复制代码</p><p><code>import { Controller, Get, Query, Post, Body, Put, Param, Delete } from &#39;@nestjs/common&#39;; import { CreateCatDto, UpdateCatDto, ListAllEntities } from &#39;./dto&#39;; @Controller(&#39;cats&#39;) export class CatsController { @Post() create(@Body() createCatDto: CreateCatDto) { return &#39;This action adds a new cat&#39;; } @Get() findAll(@Query() query: ListAllEntities) { return `This action returns all cats (limit: ${query.limit} items)`; } @Get(&#39;:id&#39;) findOne(@Param(&#39;id&#39;) id: string) { return `This action returns a #${id} cat`; } @Put(&#39;:id&#39;) update(@Param(&#39;id&#39;) id: string, @Body() updateCatDto: UpdateCatDto) { return `This action updates a #${id} cat`; } @Delete(&#39;:id&#39;) remove(@Param(&#39;id&#39;) id: string) { return `This action removes a #${id} cat`; } }</code></p><h2 id="service" tabindex="-1"><a class="header-anchor" href="#service" aria-hidden="true">#</a> Service</h2><p>typescript</p><p>复制代码</p><p><code>import { Injectable } from &#39;@nestjs/common&#39;; import { Cat } from &#39;./interfaces/cat.interface&#39;; @Injectable() export class CatsService { private readonly cats: Cat[] = []; create(cat: Cat) { this.cats.push(cat); } findAll(): Cat[] { return this.cats; } }</code></p><p>此时 Controller 需要添加构造函数参数：</p><p>typescript</p><p>复制代码</p><p><code>@Controller(&#39;cats&#39;) export class CatsController { constructor(private catsService: CatsService) {} // --- }</code></p><p>Module 需要添加 provider：</p><p>typescript</p><p>复制代码</p><p><code>@Module({ controllers: [CatsController], providers: [CatsService], }) export class AppModule {}</code></p><h2 id="定义中间件" tabindex="-1"><a class="header-anchor" href="#定义中间件" aria-hidden="true">#</a> 定义中间件</h2><p>typescript</p><p>复制代码</p><p><code>import { Injectable, NestMiddleware } from &#39;@nestjs/common&#39;; import { Request, Response, NextFunction } from &#39;express&#39;; @Injectable() export class LoggerMiddleware implements NestMiddleware { use(req: Request, res: Response, next: NextFunction) { console.log(&#39;Request...&#39;); next(); } }</code></p><h2 id="使用管道-pipe" tabindex="-1"><a class="header-anchor" href="#使用管道-pipe" aria-hidden="true">#</a> 使用管道 Pipe</h2><p>typescript</p><p>复制代码</p><p><code>@Get(&#39;:id&#39;) async findOne(@Param(&#39;id&#39;, ParseIntPipe) id: number) { return this.catsService.findOne(id); }</code></p><p>typescript</p><p>复制代码</p><p><code>@Get(&#39;:id&#39;) async findOne( @Param(&#39;id&#39;, new ParseIntPipe({ errorHttpStatusCode: HttpStatus.NOT_ACCEPTABLE })) id: number, ) { return this.catsService.findOne(id); }</code></p><p>typescript</p><p>复制代码</p><p><code>@Get(&#39;:uuid&#39;) async findOne(@Param(&#39;uuid&#39;, new ParseUUIDPipe()) uuid: string) { return this.catsService.findOne(uuid); }</code></p><p>typescript</p><p>复制代码</p><p><code>@Post() @UsePipes(new JoiValidationPipe(createCatSchema)) async create(@Body() createCatDto: CreateCatDto) { this.catsService.create(createCatDto); }</code></p><h2 id="自定义管道" tabindex="-1"><a class="header-anchor" href="#自定义管道" aria-hidden="true">#</a> 自定义管道</h2><p>typescript</p><p>复制代码</p><p><code>@Injectable() export class JoiValidationPipe implements PipeTransform { constructor(private schema: ObjectSchema) {} transform(value: any, metadata: ArgumentMetadata) { const { error } = this.schema.validate(value); if (error) { throw new BadRequestException(&#39;Validation failed&#39;); } return value; } }</code></p><h2 id="类验证器-class-validator" tabindex="-1"><a class="header-anchor" href="#类验证器-class-validator" aria-hidden="true">#</a> 类验证器 class-validator</h2><p>typescript</p><p>复制代码</p><p><code>import { IsString, IsInt } from &#39;class-validator&#39;; export class CreateCatDto { @IsString() name: string; @IsInt() age: number; @IsString() breed: string; }</code></p><h2 id="validationpipe" tabindex="-1"><a class="header-anchor" href="#validationpipe" aria-hidden="true">#</a> ValidationPipe</h2><p>typescript</p><p>复制代码</p><p><code>@Injectable() export class ValidationPipe implements PipeTransform&lt;any&gt; { async transform(value: any, { metatype }: ArgumentMetadata) { if (!metatype || !this.toValidate(metatype)) { return value; } const object = plainToInstance(metatype, value); const errors = await validate(object); if (errors.length &gt; 0) { throw new BadRequestException(&#39;Validation failed&#39;); } return value; } private toValidate(metatype: Function): boolean { const types: Function[] = [String, Boolean, Number, Array, Object]; return !types.includes(metatype); } }</code></p><p>typescript</p><p>复制代码</p><p><code>@Post() async create( @Body(new ValidationPipe()) createCatDto: CreateCatDto, ) { this.catsService.create(createCatDto); }</code></p><h2 id="默认值" tabindex="-1"><a class="header-anchor" href="#默认值" aria-hidden="true">#</a> 默认值</h2><p>typescript</p><p>复制代码</p><p><code>@Get() async findAll( @Query(&#39;activeOnly&#39;, new DefaultValuePipe(false), ParseBoolPipe) activeOnly: boolean, @Query(&#39;page&#39;, new DefaultValuePipe(0), ParseIntPipe) page: number, ) { return this.catsService.findAll({ activeOnly, page }); }</code></p><h2 id="使用中间件" tabindex="-1"><a class="header-anchor" href="#使用中间件" aria-hidden="true">#</a> 使用中间件</h2><p>typescript</p><p>复制代码</p><p><code>import { Module, NestModule, MiddlewareConsumer } from &#39;@nestjs/common&#39;; import { LoggerMiddleware } from &#39;./common/middleware/logger.middleware&#39;; import { CatsModule } from &#39;./cats/cats.module&#39;; @Module({ imports: [CatsModule], }) export class AppModule implements NestModule { configure(consumer: MiddlewareConsumer) { consumer .apply(LoggerMiddleware, cors(), helmet(), logger) .exclude( { path: &#39;cats&#39;, method: RequestMethod.GET }, { path: &#39;cats&#39;, method: RequestMethod.POST }, &#39;cats/(.*)&#39;, ) .forRoutes({ path: &#39;ab*cd&#39;, method: RequestMethod.ALL }); // .forRoutes(CatsController); } }</code></p><h2 id="抛出异常" tabindex="-1"><a class="header-anchor" href="#抛出异常" aria-hidden="true">#</a> 抛出异常</h2><p>typescript</p><p>复制代码</p><p><code>@Get() async findAll() { throw new HttpException(&#39;Forbidden&#39;, HttpStatus.FORBIDDEN); }</code></p><h2 id="抛出多个异常" tabindex="-1"><a class="header-anchor" href="#抛出多个异常" aria-hidden="true">#</a> 抛出多个异常</h2><p>typescript</p><p>复制代码</p><p><code>@Get() async findAll() { try { await this.service.findAll() } catch (error) { throw new HttpException({ status: HttpStatus.FORBIDDEN, error: &#39;This is a custom message&#39;, }, HttpStatus.FORBIDDEN, { cause: error }); } }</code></p><h2 id="自定义异常" tabindex="-1"><a class="header-anchor" href="#自定义异常" aria-hidden="true">#</a> 自定义异常</h2><p>typescript</p><p>复制代码</p><p><code>export class ForbiddenException extends HttpException { constructor() { super(&#39;Forbidden&#39;, HttpStatus.FORBIDDEN); } }</code></p><h2 id="异常过滤器" tabindex="-1"><a class="header-anchor" href="#异常过滤器" aria-hidden="true">#</a> 异常过滤器</h2><p>typescript</p><p>复制代码</p><p><code>@Catch(HttpException) export class HttpExceptionFilter implements ExceptionFilter { catch(exception: HttpException, host: ArgumentsHost) { const ctx = host.switchToHttp(); const response = ctx.getResponse&lt;Response&gt;(); const request = ctx.getRequest&lt;Request&gt;(); const status = exception.getStatus(); response .status(status) .json({ statusCode: status, timestamp: new Date().toISOString(), path: request.url, }); } }</code></p><h2 id="绑定异常过滤器" tabindex="-1"><a class="header-anchor" href="#绑定异常过滤器" aria-hidden="true">#</a> 绑定异常过滤器</h2><p>typescript</p><p>复制代码</p><p><code>@Post() @UseFilters(HttpExceptionFilter) async create(@Body() createCatDto: CreateCatDto) { throw new ForbiddenException(); }</code></p><p>typescript</p><p>复制代码</p><p><code>@UseFilters(new HttpExceptionFilter()) export class CatsController {}</code></p><p>typescript</p><p>复制代码</p><p><code>app.useGlobalFilters(new HttpExceptionFilter());</code></p><p>typescript</p><p>复制代码</p><p><code>@Module({ providers: [ { provide: APP_FILTER, useClass: HttpExceptionFilter, }, ], }) export class AppModule {}</code></p><h2 id="定义守卫" tabindex="-1"><a class="header-anchor" href="#定义守卫" aria-hidden="true">#</a> 定义守卫</h2><p>typescript</p><p>复制代码</p><p><code>import { Injectable, CanActivate, ExecutionContext } from &#39;@nestjs/common&#39;; import { Reflector } from &#39;@nestjs/core&#39;; @Injectable() export class RolesGuard implements CanActivate { constructor(private reflector: Reflector) {} canActivate(context: ExecutionContext): boolean { const roles = this.reflector.get&lt;string[]&gt;(&#39;roles&#39;, context.getHandler()); if (!roles) { return true; } const request = context.switchToHttp().getRequest(); const user = request.user; return matchRoles(roles, user.roles); } }</code></p><h2 id="使用守卫" tabindex="-1"><a class="header-anchor" href="#使用守卫" aria-hidden="true">#</a> 使用守卫</h2><p>typescript</p><p>复制代码</p><p><code>@Controller(&#39;cats&#39;) @UseGuards(RolesGuard) export class CatsController { @Post() @Roles(&#39;admin&#39;) async create(@Body() createCatDto: CreateCatDto) { this.catsService.create(createCatDto); } }</code></p><h2 id="拦截器-interceptor" tabindex="-1"><a class="header-anchor" href="#拦截器-interceptor" aria-hidden="true">#</a> 拦截器 Interceptor</h2><p>typescript</p><p>复制代码</p><p><code>@Injectable() export class LoggingInterceptor implements NestInterceptor { intercept(context: ExecutionContext, next: CallHandler): Observable&lt;any&gt; { console.log(&#39;Before...&#39;); const now = Date.now(); return next .handle() .pipe( tap(() =&gt; console.log(`After... ${Date.now() - now}ms`)), ); } }</code></p>',127),s=[i];function p(d,c){return t(),r("div",null,s)}const l=e(o,[["render",p],["__file","NestJS zuobibiao.html.vue"]]);export{l as default};
